
@c %start of fragment

@deffn Function clutter-container-child-notify  (self@tie{}@code{<clutter-container>}) (child@tie{}@code{<clutter-actor>}) (pspec@tie{}@code{<gparam>})
@deffnx Method child-notify
Calls the @code{clutter-container-iface.child-notify} virtual function
of @code{<clutter-container>}. The default implementation will emit the
@code{<"child-notify">} signal.

@table @var
@item container
a @code{<clutter-container>}

@item child
a @code{<clutter-actor>}

@item pspec
a @code{<gparam>}

@end table

Since 1.6

@end deffn

@deffn Function clutter-container-create-child-meta  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>})
@deffnx Method create-child-meta
Creates the @code{<clutter-child-meta>} wrapping @var{actor} inside the
@var{container}, if the @code{<"child-meta-type">} class member is not
set to @samp{G_TYPE_INVALID}.

This function is only useful when adding a @code{<clutter-actor>} to a
@code{<clutter-container>} implementation outside of the
@code{<clutter-container>}::@code{add} virtual function implementation.

Applications should not call this function.

@table @var
@item container
a @code{<clutter-container>}

@item actor
a @code{<clutter-actor>}

@end table

Since 1.2

@end deffn

@deffn Function clutter-container-get-child-meta  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>}) @result{}@tie{} (ret@tie{}@code{<clutter-child-meta>})
@deffnx Method get-child-meta
Retrieves the @code{<clutter-child-meta>} which contains the data about
the @var{container} specific state for @var{actor}.

@table @var
@item container
a @code{<clutter-container>}

@item actor
a @code{<clutter-actor>} that is a child of @var{container}.

@item ret
the @code{<clutter-child-meta>} for the @var{actor} child of
@var{container} or @samp{@code{#f}} if the specifiec actor does not
exist or the container is not configured to provide
@code{<clutter-child-meta>}s.

@end table

Since 0.8

@end deffn


@c %end of fragment
