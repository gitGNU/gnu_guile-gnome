
@c %start of fragment

@deffn Function clutter-x11-has-event-retrieval  @result{}@tie{} (ret@tie{}@code{bool})
Queries the X11 backend to check if event collection has been disabled.

@table @var
@item ret
TRUE if event retrival has been disabled. FALSE otherwise.

@end table

Since 0.8

@end deffn

@deffn Function clutter-x11-get-stage-from-window  (win@tie{}@code{unsigned-int32}) @result{}@tie{} (ret@tie{}@code{<clutter-stage>})
Gets the stage for a particular X window.

@table @var
@item win
an X Window ID

@item ret
The stage or NULL if a stage does not exist for the window.

@end table

Since 0.8

@end deffn

@deffn Function clutter-x11-get-default-screen  @result{}@tie{} (ret@tie{}@code{int})
Gets the number of the default X Screen object.

@table @var
@item ret
the number of the default screen

@end table

Since 0.6

@end deffn

@deffn Function clutter-x11-get-root-window  @result{}@tie{} (ret@tie{}@code{unsigned-int32})
Retrieves the root window.

@table @var
@item ret
the id of the root window

@end table

Since 0.6

@end deffn

@deffn Function clutter-x11-get-stage-window  (stage@tie{}@code{<clutter-stage>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
Gets the stages X Window.

@table @var
@item stage
a @code{<clutter-stage>}

@item ret
An XID for the stage window.

@end table

Since 0.4

@end deffn

@deffn Function clutter-x11-set-stage-foreign  (stage@tie{}@code{<clutter-stage>}) (xwindow@tie{}@code{unsigned-int32}) @result{}@tie{} (ret@tie{}@code{bool})
Target the @code{<clutter-stage>} to use an existing external X Window

@table @var
@item stage
a @code{<clutter-stage>}

@item xwindow
an existing X Window id

@item ret
@samp{@code{#t}} if foreign window is valid

@end table

Since 0.4

@end deffn

@deffn Function clutter-x11-trap-x-errors 
Traps every X error until @code{clutter-x11-untrap-x-errors} is called.

Since 0.6

@end deffn

@deffn Function clutter-x11-untrap-x-errors  @result{}@tie{} (ret@tie{}@code{int})
Removes the X error trap and returns the current status.

@table @var
@item ret
the trapped error code, or 0 for success

@end table

Since 0.4

@end deffn

@deffn Function clutter-x11-has-composite-extension  @result{}@tie{} (ret@tie{}@code{bool})
Retrieves whether Clutter is running on an X11 server with the
XComposite extension

@table @var
@item ret
@samp{@code{#t}} if the XComposite extension is available

@end table

@end deffn

@deffn Function clutter-x11-set-use-argb-visual  (use_argb@tie{}@code{bool})
Sets whether the Clutter X11 backend should request ARGB visuals by
default or not.

By default, Clutter requests RGB visuals.

@cartouche 
If no ARGB visuals are found, the X11 backend will fall back to
requesting a RGB visual instead.
@end cartouche

ARGB visuals are required for the @code{<"use-alpha">} property to work.

@cartouche 
This function can only be called once, and before @code{clutter-init} is
called.
@end cartouche

@table @var
@item use-argb
@samp{@code{#t}} if ARGB visuals should be requested by default

@end table

Since 1.2

@end deffn

@deffn Function clutter-x11-get-use-argb-visual  @result{}@tie{} (ret@tie{}@code{bool})
Retrieves whether the Clutter X11 backend is using ARGB visuals by
default

@table @var
@item ret
@samp{@code{#t}} if ARGB visuals are queried by default

@end table

Since 1.2

@end deffn

@deffn Function clutter-x11-has-xinput  @result{}@tie{} (ret@tie{}@code{bool})
Gets whether Clutter has XInput support.

@table @var
@item ret
@samp{@code{#t}} if Clutter was compiled with XInput support and XInput
support is available at run time.

@end table

Since 0.8

@end deffn

@deffn Function clutter-x11-enable-xinput 
Enables the use of the XInput extension if present on connected XServer
and support built into Clutter. XInput allows for multiple pointing
devices to be used.

This function must be called before @code{clutter-init}.

Since XInput might not be supported by the X server, you might want to
use @code{clutter-x11-has-xinput} to see if support was enabled.

Since 0.8

@end deffn

@deffn Function clutter-x11-event-get-key-group  (event@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{int})
Retrieves the group for the modifiers set in @var{event}

@table @var
@item event
a @code{<clutter-event>} of type @samp{CLUTTER_KEY_PRESS} or
@samp{CLUTTER_KEY_RELEASE}

@item ret
the group id

@end table

Since 1.4

@end deffn


@c %end of fragment
