
@c %start of fragment

@node Clipboards
@chapter Clipboards
Storing data on clipboards

@section Overview
The @code{<gtk-clipboard>} object represents a clipboard of data shared between
different processes or between different widgets in the same process. Each
clipboard is identified by a name encoded as a @code{<gdk-atom>}. (Conversion to
and from strings can be done with @code{gdk-atom-intern} and
@code{gdk-atom-name}.) The default clipboard corresponds to the "CLIPBOARD"
atom; another commonly used clipboard is the "PRIMARY" clipboard, which, in X,
traditionally contains the currently selected text.

To support having a number of different formats on the clipboard at the same
time, the clipboard mechanism allows providing callbacks instead of the actual
data. When you set the contents of the clipboard, you can either supply the data
directly (via functions like @code{gtk-clipboard-set-text}), or you can supply a
callback to be called at a later time when the data is needed (via
@code{gtk-clipboard-set-with-data} or @code{gtk-clipboard-set-with-owner}.)
Providing a callback also avoids having to make copies of the data when it is
not needed.

@code{gtk-clipboard-set-with-data} and @code{gtk-clipboard-set-with-owner} are
quite similar; the choice between the two depends mostly on which is more
convenient in a particular situation. The former is most useful when you want to
have a blob of data with callbacks to convert it into the various data types
that you advertise. When the @var{clear-func} you provided is called, you simply
free the data blob. The latter is more useful when the contents of clipboard
reflect the internal state of a @code{<gobject>} (As an example, for the PRIMARY
clipboard, when an entry widget provides the clipboard's contents the contents
are simply the text within the selected region.) If the contents change, the
entry widget can call @code{gtk-clipboard-set-with-owner} to update the
timestamp for clipboard ownership, without having to worry about
@var{clear-func} being called.

Requesting the data from the clipboard is essentially asynchronous. If the
contents of the clipboard are provided within the same process, then a direct
function call will be made to retrieve the data, but if they are provided by
another process, then the data needs to be retrieved from the other process,
which may take some time. To avoid blocking the user interface, the call to
request the selection, @code{gtk-clipboard-request-contents} takes a callback
that will be called when the contents are received (or when the request fails.)
If you don't want to deal with providing a separate callback, you can also use
@code{gtk-clipboard-wait-for-contents}. What this does is run the GLib main loop
recursively waiting for the contents. This can simplify the code flow, but you
still have to be aware that other callbacks in your program can be called while
this recursive mainloop is running.

Along with the functions to get the clipboard contents as an arbitrary data
chunk, there are also functions to retrieve it as text,
@code{gtk-clipboard-request-text} and @code{gtk-clipboard-wait-for-text}. These
functions take care of determining which formats are advertised by the clipboard
provider, asking for the clipboard in the best available format and converting
the results into the UTF-8 encoding. (The standard form for representing strings
in GTK+.)

@section Usage
@include defuns-gtkclipboard.xml.texi

@c %end of fragment
