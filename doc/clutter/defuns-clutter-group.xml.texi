
@c %start of fragment

@deffn Function clutter-group-new  @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
Create a new @code{<clutter-group>}.

@table @var
@item ret
the newly created @code{<clutter-group>} actor

@end table

@end deffn

@deffn Function clutter-group-remove-all  (self@tie{}@code{<clutter-group>})
@deffnx Method remove-all
Removes all children actors from the @code{<clutter-group>}.

@table @var
@item group
A @code{<clutter-group>}

@end table

@end deffn

@deffn Function clutter-group-get-n-children  (self@tie{}@code{<clutter-group>}) @result{}@tie{} (ret@tie{}@code{int})
@deffnx Method get-n-children
Gets the number of actors held in the group.

@table @var
@item self
A @code{<clutter-group>}

@item ret
The number of child actors held in the group.

@end table

Since 0.2

@end deffn

@deffn Function clutter-group-get-nth-child  (self@tie{}@code{<clutter-group>}) (index_@tie{}@code{int}) @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
@deffnx Method get-nth-child
Gets a groups child held at @var{index} in stack.

@table @var
@item self
A @code{<clutter-group>}

@item index
the position of the requested actor.

@item ret
A Clutter actor, or @samp{@code{#f}} if @var{index} is invalid.

@end table

Since 0.2

@end deffn


@c %end of fragment
