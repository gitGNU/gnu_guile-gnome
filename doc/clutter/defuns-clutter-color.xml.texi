
@c %start of fragment

@deffn Function clutter-color-new  (red@tie{}@code{unsigned-int8}) (green@tie{}@code{unsigned-int8}) (blue@tie{}@code{unsigned-int8}) (alpha@tie{}@code{unsigned-int8}) @result{}@tie{} (ret@tie{}@code{<clutter-color>})
Creates a new @code{<clutter-color>} with the given values.

@table @var
@item red
red component of the color, between 0 and 255

@item green
green component of the color, between 0 and 255

@item blue
blue component of the color, between 0 and 255

@item alpha
alpha component of the color, between 0 and 255

@item ret
the newly allocated color. Use @code{clutter-color-free} when done.

@end table

Since 0.8.4

@end deffn

@deffn Function clutter-color-from-string  (name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{scm})
Parses a string definition of a color, filling the @c (structfield
"red") , @c (structfield "green") , @c (structfield "blue") and @c
(structfield "alpha") channels of @var{color}. If alpha is not specified
it will be set full opaque.

The @var{color} is not allocated.

The color may be defined by any of the formats understood by
@code{pango-color-from-string}; these include literal color names, like
@samp{Red} or @samp{DarkSlateGray}, or hexadecimal specifications like
@samp{&#x0023;3050b2} or @samp{&#x0023;333}.

@table @var
@item color
return location for a @code{<clutter-color>}.

@item str
a string specifiying a color (named color or @code{<rrggbbaa>})

@item ret
@samp{@code{#t}} if parsing succeeded.

@end table

Since 1.0

@end deffn

@deffn Function clutter-color-to-string  (self@tie{}@code{<clutter-color>}) @result{}@tie{} (ret@tie{}@code{mchars})
Returns a textual specification of @var{color} in the hexadecimal form
@samp{&#x0023;rrggbbaa}, where @samp{r}, @samp{g}, @samp{b} and @samp{a}
are hex digits representing the red, green, blue and alpha components
respectively.

@table @var
@item color
a @code{<clutter-color>}

@item ret
a newly-allocated text string.

@end table

Since 0.2

@end deffn

@deffn Function clutter-color-from-hls  (self@tie{}@code{<clutter-color>}) (hue@tie{}@code{float}) (luminance@tie{}@code{float}) (saturation@tie{}@code{float})
Converts a color expressed in HLS (hue, luminance and saturation) values
into a @code{<clutter-color>}.

@table @var
@item color
return location for a @code{<clutter-color>}.

@item hue
hue value, in the 0 .. 360 range

@item luminance
luminance value, in the 0 .. 1 range

@item saturation
saturation value, in the 0 .. 1 range

@end table

@end deffn

@deffn Function clutter-color-to-hls  (self@tie{}@code{<clutter-color>}) @result{}@tie{} (hue@tie{}@code{float}) (luminance@tie{}@code{float}) (saturation@tie{}@code{float})
Converts @var{color} to the HLS format.

The @var{hue} value is in the 0 .. 360 range. The @var{luminance} and
@var{saturation} values are in the 0 .. 1 range.

@table @var
@item color
a @code{<clutter-color>}

@item hue
return location for the hue value or @samp{@code{#f}}.

@item luminance
return location for the luminance value or @samp{@code{#f}}.

@item saturation
return location for the saturation value or @samp{@code{#f}}.

@end table

@end deffn

@deffn Function clutter-color-from-pixel  (self@tie{}@code{<clutter-color>}) (pixel@tie{}@code{unsigned-int32})
Converts @var{pixel} from the packed representation of a four 8 bit
channel color to a @code{<clutter-color>}.

@table @var
@item color
return location for a @code{<clutter-color>}.

@item pixel
a 32 bit packed integer containing a color

@end table

@end deffn

@deffn Function clutter-color-to-pixel  (self@tie{}@code{<clutter-color>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
Converts @var{color} into a packed 32 bit integer, containing all the
four 8 bit channels used by @code{<clutter-color>}.

@table @var
@item color
a @code{<clutter-color>}

@item ret
a packed color

@end table

@end deffn

@deffn Function clutter-color-add  (self@tie{}@code{<clutter-color>}) (b@tie{}@code{<clutter-color>}) (result@tie{}@code{<clutter-color>})
Adds @var{a} to @var{b} and saves the resulting color inside
@var{result}.

The alpha channel of @var{result} is set as as the maximum value between
the alpha channels of @var{a} and @var{b}.

@table @var
@item a
a @code{<clutter-color>}

@item b
a @code{<clutter-color>}

@item result
return location for the result.

@end table

@end deffn

@deffn Function clutter-color-subtract  (self@tie{}@code{<clutter-color>}) (b@tie{}@code{<clutter-color>}) (result@tie{}@code{<clutter-color>})
Subtracts @var{b} from @var{a} and saves the resulting color inside
@var{result}.

This function assumes that the components of @var{a} are greater than
the components of @var{b}; the result is, otherwise, undefined.

The alpha channel of @var{result} is set as the minimum value between
the alpha channels of @var{a} and @var{b}.

@table @var
@item a
a @code{<clutter-color>}

@item b
a @code{<clutter-color>}

@item result
return location for the result.

@end table

@end deffn

@deffn Function clutter-color-lighten  (self@tie{}@code{<clutter-color>}) (result@tie{}@code{<clutter-color>})
Lightens @var{color} by a fixed amount, and saves the changed color in
@var{result}.

@table @var
@item color
a @code{<clutter-color>}

@item result
return location for the lighter color.

@end table

@end deffn

@deffn Function clutter-color-darken  (self@tie{}@code{<clutter-color>}) (result@tie{}@code{<clutter-color>})
Darkens @var{color} by a fixed amount, and saves the changed color in
@var{result}.

@table @var
@item color
a @code{<clutter-color>}

@item result
return location for the darker color.

@end table

@end deffn

@deffn Function clutter-color-shade  (self@tie{}@code{<clutter-color>}) (factor@tie{}@code{double}) (result@tie{}@code{<clutter-color>})
Shades @var{color} by @var{factor} and saves the modified color into
@var{result}.

@table @var
@item color
a @code{<clutter-color>}

@item factor
the shade factor to apply

@item result
return location for the shaded color.

@end table

@end deffn

@deffn Function clutter-value-set-color  (value@tie{}@code{<gvalue>}) (color@tie{}@code{<clutter-color>})
Sets @var{value} to @var{color}.

@table @var
@item value
a @code{<gvalue>} initialized to @code{<clutter-type-color>}

@item color
the color to set

@end table

Since 0.8.4

@end deffn

@deffn Function clutter-value-get-color  (value@tie{}@code{<gvalue>}) @result{}@tie{} (ret@tie{}@code{<clutter-color>})
Gets the @code{<clutter-color>} contained in @var{value}.

@table @var
@item value
a @code{<gvalue>} initialized to @code{<clutter-type-color>}

@item ret
the color inside the passed @code{<gvalue>}.

@end table

Since 0.8.4

@end deffn


@c %end of fragment
