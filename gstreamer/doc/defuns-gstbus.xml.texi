
@c %start of fragment

@deftp Class <gst-bus>
This @code{<gobject>} class defines no properties, other than those defined by
its superclasses.

@end deftp

@defop Signal <gst-bus> sync-message  (arg0@tie{}@code{<gst-message>})
A message has been posted on the bus. This signal is emitted from the thread
that posted the message so one has to be careful with locking.

This signal will not be emitted by default, you have to set up
@code{gst-bus-sync-signal-handler} as a sync handler if you want this signal to
be emitted when a message is posted on the bus, like this:

@example 

gst_bus_set_sync_handler (bus, gst_bus_sync_signal_handler, yourdata);
@end example

@end defop

@defop Signal <gst-bus> message  (arg0@tie{}@code{<gst-message>})
A message has been posted on the bus. This signal is emitted from a GSource
added to the mainloop. this signal will only be emitted when there is a mainloop
running.

@end defop

@deffn Function gst-bus-new  @result{}@tie{} (ret@tie{}@code{<gst-bus>})
Creates a new @code{<gst-bus>} instance.

@table @var
@item ret
a new @code{<gst-bus>} instance

@end table

@end deffn

@deffn Function gst-bus-post  (self@tie{}@code{<gst-bus>}) (message@tie{}@code{<gst-message>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method post
Post a message on the given bus. Ownership of the message is taken by the bus.

@table @var
@item bus
a @code{<gst-bus>} to post on

@item message
The @code{<gst-message>} to post

@item ret
TRUE if the message could be posted, FALSE if the bus is flushing. MT safe.

@end table

@end deffn

@deffn Function gst-bus-have-pending  (self@tie{}@code{<gst-bus>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method have-pending
Check if there are pending messages on the bus that should be handled.

@table @var
@item bus
a @code{<gst-bus>} to check

@item ret
TRUE if there are messages on the bus to be handled, FALSE otherwise. MT safe.

@end table

@end deffn

@deffn Function gst-bus-peek  (self@tie{}@code{<gst-bus>}) @result{}@tie{} (ret@tie{}@code{<gst-message>})
@deffnx Method peek
Peek the message on the top of the bus' queue. The message will remain on the
bus' message queue. A reference is returned, and needs to be unreffed by the
caller.

@table @var
@item bus
a @code{<gst-bus>}

@item ret
The @code{<gst-message>} that is on the bus, or NULL if the bus is empty. MT
safe.

@end table

@end deffn

@deffn Function gst-bus-pop  (self@tie{}@code{<gst-bus>}) @result{}@tie{} (ret@tie{}@code{<gst-message>})
@deffnx Method pop
Get a message from the bus.

@table @var
@item bus
a @code{<gst-bus>} to pop

@item ret
The @code{<gst-message>} that is on the bus, or NULL if the bus is empty. The
message is taken from the bus and needs to be unreffed with
@code{gst-message-unref} after usage. MT safe.

@end table

@end deffn

@deffn Function gst-bus-set-flushing  (self@tie{}@code{<gst-bus>}) (flushing@tie{}@code{bool})
@deffnx Method set-flushing
If @var{flushing}, flush out and unref any messages queued in the bus. Releases
references to the message origin objects. Will flush future messages until
@code{gst-bus-set-flushing} sets @var{flushing} to @code{@code{#f}}.

MT safe.

@table @var
@item bus
a @code{<gst-bus>}

@item flushing
whether or not to flush the bus

@end table

@end deffn

@deffn Function gst-bus-set-sync-handler  (self@tie{}@code{<gst-bus>}) (func@tie{}@code{<gst-bus-sync-handler>}) (data@tie{}@code{<gpointer>})
@deffnx Method set-sync-handler
Sets the synchronous handler on the bus. The function will be called every time
a new message is posted on the bus. Note that the function will be called in the
same thread context as the posting object. This function is usually only called
by the creator of the bus. Applications should handle messages asynchronously
using the gst_bus watch and poll functions.

You cannot replace an existing sync_handler. You can pass NULL to this function,
which will clear the existing handler.

@table @var
@item bus
a @code{<gst-bus>} to install the handler on

@item func
The handler function to install

@item data
User data that will be sent to the handler function.

@end table

@end deffn

@deffn Function gst-bus-sync-signal-handler  (self@tie{}@code{<gst-bus>}) (message@tie{}@code{<gst-message>}) (data@tie{}@code{<gpointer>}) @result{}@tie{} (ret@tie{}@code{<gst-bus-sync-reply>})
@deffnx Method sync-signal-handler
A helper GstBusSyncHandler that can be used to convert all synchronous messages
into signals.

@table @var
@item bus
a @code{<gst-bus>}

@item message
the @code{<gst-message>} received

@item data
user data

@item ret
GST_BUS_PASS

@end table

@end deffn

@deffn Function gst-bus-create-watch  (self@tie{}@code{<gst-bus>}) @result{}@tie{} (ret@tie{}@code{<g-source*>})
@deffnx Method create-watch
Create watch for this bus. The GSource will be dispatched whenever a message is
on the bus. After the GSource is dispatched, the message is popped off the bus
and unreffed.

@table @var
@item bus
a @code{<gst-bus>} to create the watch for

@item ret
A @code{<g-source>} that can be added to a mainloop.

@end table

@end deffn

@deffn Function gst-bus-add-watch-full  (self@tie{}@code{<gst-bus>}) (priority@tie{}@code{int}) (func@tie{}@code{<gst-bus-func>}) (user_data@tie{}@code{<gpointer>}) (notify@tie{}@code{<g-destroy-notify>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
@deffnx Method add-watch-full
Adds a bus watch to the default main context with the given @var{priority}. This
function is used to receive asynchronous messages in the main loop.

When @var{func} is called, the message belongs to the caller; if you want to
keep a copy of it, call @code{gst-message-ref} before leaving @var{func}.

The watch can be removed using @code{g-source-remove} or by returning FALSE from
@var{func}.

@table @var
@item bus
a @code{<gst-bus>} to create the watch for.

@item priority
The priority of the watch.

@item func
A function to call when a message is received.

@item user-data
user data passed to @var{func}.

@item notify
the function to call when the source is removed.

@item ret
The event source id. MT safe.

@end table

@end deffn

@deffn Function gst-bus-add-watch  (self@tie{}@code{<gst-bus>}) (func@tie{}@code{<gst-bus-func>}) (user_data@tie{}@code{<gpointer>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
@deffnx Method add-watch
Adds a bus watch to the default main context with the default priority. This
function is used to receive asynchronous messages in the main loop.

The watch can be removed using @code{g-source-remove} or by returning FALSE from
@var{func}.

@table @var
@item bus
a @code{<gst-bus>} to create the watch for

@item func
A function to call when a message is received.

@item user-data
user data passed to @var{func}.

@item ret
The event source id. MT safe.

@end table

@end deffn

@deffn Function gst-bus-async-signal-func  (self@tie{}@code{<gst-bus>}) (message@tie{}@code{<gst-message>}) (data@tie{}@code{<gpointer>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method async-signal-func
A helper @code{<gst-bus-func>} that can be used to convert all asynchronous
messages into signals.

@table @var
@item bus
a @code{<gst-bus>}

@item message
the @code{<gst-message>} received

@item data
user data

@item ret
TRUE

@end table

@end deffn

@deffn Function gst-bus-add-signal-watch  (self@tie{}@code{<gst-bus>})
@deffnx Method add-signal-watch
Adds a bus signal watch to the default main context with the default priority.
After calling this statement, the bus will emit the "message" signal for each
message posted on the bus.

This function may be called multiple times. To clean up, the caller is
responsible for calling @code{gst-bus-remove-signal-watch} as many times as this
function is called.

MT safe.

@table @var
@item bus
a @code{<gst-bus>} on which you want to receive the "message" signal

@end table

@end deffn

@deffn Function gst-bus-add-signal-watch-full  (self@tie{}@code{<gst-bus>}) (priority@tie{}@code{int})
@deffnx Method add-signal-watch-full
Adds a bus signal watch to the default main context with the given priority.
After calling this statement, the bus will emit the "message" signal for each
message posted on the bus when the main loop is running.

This function may be called multiple times. To clean up, the caller is
responsible for calling @code{gst-bus-remove-signal-watch} as many times as this
function is called.

MT safe.

@table @var
@item bus
a @code{<gst-bus>} on which you want to receive the "message" signal

@item priority
The priority of the watch.

@end table

@end deffn

@deffn Function gst-bus-remove-signal-watch  (self@tie{}@code{<gst-bus>})
@deffnx Method remove-signal-watch
Removes a signal watch previously added with @code{gst-bus-add-signal-watch}.

MT safe.

@table @var
@item bus
a @code{<gst-bus>} you previously added a signal watch to

@end table

@end deffn

@deffn Function gst-bus-poll  (self@tie{}@code{<gst-bus>}) (events@tie{}@code{<gst-message-type>}) (timeout@tie{}@code{unsigned-long-long}) @result{}@tie{} (ret@tie{}@code{<gst-message>})
@deffnx Method poll
Poll the bus for messages. Will block while waiting for messages to come. You
can specify a maximum time to poll with the @var{timeout} parameter. If
@var{timeout} is negative, this function will block indefinitely.

All messages not in @var{events} will be popped off the bus and will be ignored.

Because poll is implemented using the "message" signal enabled by
@code{gst-bus-add-signal-watch}, calling @code{gst-bus-poll} will cause the
"message" signal to be emitted for every message that poll sees. Thus a
"message" signal handler will see the same messages that this function sees --
neither will steal messages from the other.

This function will run a main loop from the default main context when polling.

@table @var
@item bus
a @code{<gst-bus>}

@item events
a mask of @code{<gst-message-type>}, representing the set of message types to
poll for.

@item timeout
the poll timeout, as a @code{<gst-clock-time-diff>}, or -1 to poll indefinitely.

@item ret
The message that was received, or NULL if the poll timed out. The message is
taken from the bus and needs to be unreffed with @code{gst-message-unref} after
usage.

@end table

@end deffn


@c %end of fragment
