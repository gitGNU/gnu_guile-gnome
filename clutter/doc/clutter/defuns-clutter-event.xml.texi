
@c %start of fragment

@deftp Class <clutter-button-event>
Derives from @code{<gboxed>}.

This class defines no direct slots.

@end deftp

@deftp Class <clutter-key-event>
Derives from @code{<gboxed>}.

This class defines no direct slots.

@end deftp

@deftp Class <clutter-motion-event>
Derives from @code{<gboxed>}.

This class defines no direct slots.

@end deftp

@deftp Class <clutter-scroll-event>
Derives from @code{<gboxed>}.

This class defines no direct slots.

@end deftp

@deftp Class <clutter-stage-state-event>
Derives from @code{<gboxed>}.

This class defines no direct slots.

@end deftp

@deftp Class <clutter-crossing-event>
Derives from @code{<gboxed>}.

This class defines no direct slots.

@end deftp

@deffn Function clutter-event-new  (type@tie{}@code{<clutter-event-type>}) @result{}@tie{} (ret@tie{}@code{<clutter-event>})
Creates a new @code{<clutter-event>} of the specified type.

@table @var
@item type
The type of event.

@item ret
A newly allocated @code{<clutter-event>}.

@end table

@end deffn

@deffn Function clutter-event-type  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-event-type>})
@deffnx Method type
Retrieves the type of the event.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a @code{<clutter-event-type>}

@end table

@end deffn

@deffn Function clutter-event-get-coords  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (x@tie{}@code{int}) (y@tie{}@code{int})
@deffnx Method get-coords
Retrieves the coordinates of @var{event} and puts them into @var{x} and @var{y}.

@table @var
@item event
a @code{<clutter-event>}

@item x
return location for the X coordinate

@item y
return location for the Y coordinate

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-state  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-modifier-type>})
@deffnx Method get-state
Retrieves the modifier state of the event.

@table @var
@item event
a @code{<clutter-event>}

@item ret
the modifier state parameter, or 0

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-time  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
@deffnx Method get-time
Retrieves the time of the event.

@table @var
@item event
a @code{<clutter-event>}

@item ret
the time of the event, or @samp{CLUTTER_CURRENT_TIME}

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-source  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
@deffnx Method get-source
Retrieves the source @code{<clutter-actor>} the event originated from, or NULL
if the event has no source.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a @code{<clutter-actor>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-event-get-stage  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-stage>})
@deffnx Method get-stage
Retrieves the source @code{<clutter-stage>} the event originated for, or NULL if
the event has no stage.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a @code{<clutter-stage>}

@end table

Since 0.8

@end deffn

@deffn Function clutter-event-get  @result{}@tie{} (ret@tie{}@code{<clutter-event>})
Pops an event off the event queue. Applications should not need to call this.

@table @var
@item ret
A @code{<clutter-event>} or NULL if queue empty

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-peek  @result{}@tie{} (ret@tie{}@code{<clutter-event>})
Returns a pointer to the first event from the event queue but does not remove
it.

@table @var
@item ret
A @code{<clutter-event>} or NULL if queue empty.

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-put  (self@tie{}@code{<clutter-event>})
@deffnx Method put
Puts a copy of the event on the back of the event queue. The event will have the
@code{<clutter-event-flag-synthetic>} flag set. If the source is set event
signals will be emitted for this source and capture/bubbling for it's ancestors.
If the source is not set it will be generated by picking or use the actor that
currently has keyboard focus.

@table @var
@item event
a @code{<clutter-event>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-events-pending  @result{}@tie{} (ret@tie{}@code{bool})
Checks if events are pending in the event queue.

@table @var
@item ret
TRUE if there are pending events, FALSE otherwise.

@end table

Since 0.4

@end deffn

@deffn Function clutter-button-event-button  (self@tie{}@code{<clutter-button-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
@deffnx Method button
Retrieve the button number of the event.

@table @var
@item buttev
a @code{<clutter-button-event>}

@item ret
the button number.

@end table

Since 0.4

@end deffn

@deffn Function clutter-key-event-symbol  (self@tie{}@code{<clutter-key-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
@deffnx Method symbol
Retrieves the value of the key that caused @var{keyev}.

@table @var
@item keyev
A @code{<clutter-key-event>}

@item ret
The keysym representing the key

@end table

@end deffn

@deffn Function clutter-key-event-code  (self@tie{}@code{<clutter-key-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int16})
@deffnx Method code
Retrieves the keycode of the key that caused @var{keyev}.

@table @var
@item keyev
A @code{<clutter-key-event>}

@item ret
The keycode representing the key

@end table

@end deffn

@deffn Function clutter-key-event-unicode  (self@tie{}@code{<clutter-key-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
@deffnx Method unicode
Retrieves the unicode value for the key that caused @var{keyev}.

@table @var
@item keyev
A @code{<clutter-key-event>}

@item ret
The unicode value representing the key

@end table

@end deffn

@deffn Function clutter-keysym-to-unicode  (keyval@tie{}@code{unsigned-int}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
Convert from a Clutter key symbol to the corresponding ISO10646 (Unicode)
character.

@table @var
@item keyval
a clutter key symbol

@item ret
the corresponding unicode character, or 0 if there is no corresponding
character.

@end table

@end deffn

@deffn Function clutter-event-get-device-id  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{int})
@deffnx Method get-device-id
Retrieves the events device id if set.

@table @var
@item event
a clutter event

@item ret
A unique identifier for the device or -1 if the event has no specific device
set.

@end table

@end deffn


@c %end of fragment
