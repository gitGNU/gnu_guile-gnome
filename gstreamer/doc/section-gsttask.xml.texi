
@c %start of fragment

@node GstTask
@chapter GstTask
Abstraction of GStreamer streaming threads.

@section Overview
@code{<gst-task>} is used by @code{<gst-element>} and @code{<gst-pad>} to
provide the data passing threads in a @code{<gst-pipeline>}.

A @code{<gst-pad>} will typically start a @code{<gst-task>} to push or pull data
to/from the peer pads. Most source elements start a @code{<gst-task>} to push
data. In some cases a demuxer element can start a @code{<gst-task>} to pull data
from a peer element. This is typically done when the demuxer can perform random
access on the upstream peer element for improved performance.

Although convenience functions exist on @code{<gst-pad>} to start/pause/stop
tasks, it might sometimes be needed to create a @code{<gst-task>} manually if it
is not related to a @code{<gst-pad>}.

Before the @code{<gst-task>} can be run, it needs a @code{<g-static-rec-mutex>}
that can be set with @code{gst-task-set-lock}.

The task can be started, paused and stopped with @code{gst-task-start},
@code{gst-task-pause} and @code{gst-task-stop} respectively.

A @code{<gst-task>} will repeadedly call the @code{<gst-task-function>} with the
user data that was provided when creating the task with @code{gst-task-create}.
Before calling the function it will acquire the provided lock.

Stopping a task with @code{gst-task-stop} will not immediatly make sure the task
is not running anymore. Use @code{gst-task-join} to make sure the task is
completely stopped and the thread is stopped.

After creating a @code{<gst-task>}, use @code{gst-object-unref} to free its
resources. This can only be done it the task is not running anymore.

Last reviewed on 2006-02-13 (0.10.4)

@section Usage
@include defuns-gsttask.xml.texi

@c %end of fragment
