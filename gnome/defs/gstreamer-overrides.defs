;; -*- scheme -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; types missed by h2defs
(define-boxed Buffer
  (in-module "Gst")
  (c-name "GstBuffer")
  (gtype-id "GST_TYPE_BUFFER")
)

(define-boxed Caps
  (in-module "Gst")
  (c-name "GstCaps")
  (gtype-id "GST_TYPE_CAPS")
)

(define-boxed Event
  (in-module "Gst")
  (c-name "GstEvent")
  (gtype-id "GST_TYPE_EVENT")
)

(define-boxed Structure
  (in-module "Gst")
  (c-name "GstStructure")
  (gtype-id "GST_TYPE_STRUCTURE")
)

;; types still not wrapped (as far as i can tell)
;; GST_TYPE_URI


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; wrap certain functions specially

(define-function gst_alloc_trace_list
  (c-name "gst_alloc_trace_list")
  (overrides "gst_alloc_trace_list")
  (return-type "const-GList*-of-GstAllocTrace*")
)

;; GstBin

(define-method attach-iterator
  (of-object "GstBin")
  (c-name "gst_bin_attach_iterator")
  (return-type "none"))

(define-method get_list
  (of-object "GstBin")
  (c-name "gst_bin_get_list")
  (overrides "gst_bin_get_list")
  (return-type "const-GList*-of-GstElement*")
)

(define-method remove-iterator
  (of-object "GstBin")
  (c-name "gst_bin_remove_iterator")
  (return-type "none"))

(define-method get_all_by_interface
  (of-object "GstBin")
  (c-name "gst_bin_get_all_by_interface")
  (overrides "gst_bin_get_all_by_interface")
  (return-type "GList*-of-GstElement*")
  (parameters
    '("GType" "interface")
  )
)

;; GstBuffer

(define-method get-data
  (of-object "GstBuffer")
  (c-name "_wrap_gst_buffer_get_data")
  (overrides "gst_buffer_get_data")
  (return-type "SCM")
  (parameters '("SCM" "prot")))

(define-method set-data
  (of-object "GstBuffer")
  (c-name "_wrap_gst_buffer_set_data")
  (overrides "gst_buffer_set_data")
  (return-type "none")
  (parameters '("SCM" "data")))

;; GstCaps

(define-method append
  (of-object "GstCaps")
  (c-name "gst_caps_append")
  (overrides "gst_caps_append")
  (return-type "none")
  (parameters
    '("GstCaps*" "caps2" (callee-owned))
  )
)

(define-method append_structure
  (of-object "GstCaps")
  (c-name "gst_caps_append_structure")
  (overrides "gst_caps_append_structure")
  (return-type "none")
  (parameters
    '("GstStructure*" "structure" (callee-owned))
  )
)

;; GstClockID
;; 
;; Unfortunately, since GstClockId is the pointer already (not
;; GstClockID*), we need to make these into functions

(define-function wait-async
  (c-name "_wrap_gst_clock_id_wait_async")
  (overrides "gst_clock_id_wait_async")
  (return-type "GstClockReturn")
  (parameters '("GstClockID" "id") '("SCM" "callback")))

(define-function get_time
  (c-name "gst_clock_id_get_time")
  (overrides "gst_clock_id_get_time")
  (parameters '("GstClockID" "id"))
  (return-type "GstClockTime")
)

(define-function wait
  (c-name "gst_clock_id_wait")
  (overrides "gst_clock_id_wait")
  (return-type "GstClockReturn")
  (parameters
    '("GstClockID" "id")
    '("GstClockTimeDiff*" "jitter")
  )
)

(define-function wait_async
  (c-name "gst_clock_id_wait_async")
  (overrides "gst_clock_id_wait_async")
  (return-type "GstClockReturn")
  (parameters
    '("GstClockID" "id")
    '("GstClockCallback" "func")
    '("gpointer" "user_data")
  )
)

(define-function unschedule
  (c-name "gst_clock_id_unschedule")
  (overrides "gst_clock_id_unschedule")
  (parameters '("GstClockID" "id"))
  (return-type "none")
)

(define-function unlock
  (c-name "gst_clock_id_unlock")
  (overrides "gst_clock_id_unlock")
  (parameters '("GstClockID" "id"))
  (return-type "none")
)

(define-function free
  (c-name "gst_clock_id_free")
  (overrides "gst_clock_id_free")
  (parameters '("GstClockID" "id"))
  (return-type "none")
)

;; GstDebug

(define-function gst_debug_get_all_categories
  (c-name "gst_debug_get_all_categories")
  (overrides "gst_debug_get_all_categories")
  (return-type "GSList*-of-const-GstDebugCategory*"))

(define-function get_name
  (c-name "gst_debug_level_get_name")
  (overrides "gst_debug_level_get_name")
  (return-type "const-gchar*")
  (parameters '("GstDebugLevel" "level"))
)

;; GstElement

(define-method get_pad_list
  (of-object "GstElement")
  (c-name "gst_element_get_pad_list")
  (overrides "gst_element_get_pad_list")
  (return-type "const-GList*-of-GstPad*")
)

(define-method get_pad_template_list
  (of-object "GstElement")
  (c-name "gst_element_get_pad_template_list")
  (overrides "gst_element_get_pad_template_list")
  (return-type "GList*-of-GstPadTemplate*")
)

;; GstElementClass

;; define these as functions, wrapping them as methods manually because
;; they are class methods
(define-function add-pad-template
  (c-name "gst_element_class_add_pad_template")
  (overrides "gst_element_class_add_pad_template")
  (return-type "none")
  (parameters '("GstElementClass*" "klass")
              '("GstPadTemplate*" "templ")))

(define-function get-pad-template
  (c-name "gst_element_class_get_pad_template")
  (overrides "gst_element_class_get_pad_template")
  (return-type "GstPadTemplate*")
  (parameters '("GstElementClass*" "klass")
              '("const-gchar*" "klass")))

(define-function get-pad-template-list
  (c-name "gst_element_class_get_pad_template_list")
  (overrides "gst_element_class_get_pad_template_list")
  (return-type "const-GList*-of-GstPadTemplate*")
  (parameters '("GstElementClass*" "klass")))

(define-function set-details
  (c-name "gst_element_class_set_details")
  (overrides "gst_element_class_set_details")
  (return-type "none")
  (parameters
    '("GstElementClass*" "klass")
    '("const-GstElementDetails*" "details")
  )
)

;; GstElementState

(define-function get_name
  (c-name "gst_element_state_get_name")
  (overrides "gst_element_state_get_name")
  (return-type "const-gchar*")
  (parameters '("GstElementState" "state"))
)

;; GstElementFactory

(define-method create
  (of-object "GstElementFactory")
  (c-name "gst_element_factory_create")
  (overrides "gst_element_factory_create")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name" (null-ok))
  )
)

(define-function gst_element_factory_make
  (c-name "gst_element_factory_make")
  (overrides "gst_element_factory_make")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "factoryname")
    '("const-gchar*" "name" (null-ok))
  )
)

;; Inconsistent naming between this and the element functions
(define-method get_pad_templates
  (of-object "GstElementFactory")
  (c-name "gst_element_factory_get_pad_templates")
  (overrides "gst_element_factory_get_pad_templates")
  (return-type "const-GList*-of-GstPadTemplate*")
)

;; GstFormat

(define-function gst_format_get_details
  (c-name "gst_format_get_details")
  (overrides "gst_format_get_details")
  (return-type "const-GstFormatDefinition*")
  (parameters
    '("GstFormat" "format")
  )
)

(define-function gst_format_get_definitions
  (c-name "gst_format_get_definitions")
  (overrides "gst_format_get_definitions")
  (return-type "const-GList*-of-GstFormatDefinition*")
)

;; GstObject

(define-method set_name
  (of-object "GstObject")
  (c-name "gst_object_set_name")
  (overrides "gst_object_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name" (null-ok))
  )
)

(define-function gst_object_check_uniqueness
  (c-name "gst_object_check_uniqueness")
  (overrides "gst_object_check_uniqueness")
  (return-type "gboolean")
  (parameters
    '("GList*-of-GstObject*" "list")
    '("const-gchar*" "name")
  )
)

;; GstPad

(define-method get_ghost_pad_list
  (of-object "GstPad")
  (c-name "gst_pad_get_ghost_pad_list")
  (overrides "gst_pad_get_ghost_pad_list")
  (return-type "GList*-of-GstGhostPad*")
)

(define-method get_internal_links
  (of-object "GstPad")
  (c-name "gst_pad_get_internal_links")
  (overrides "gst_pad_get_internal_links")
  (return-type "GList*-of-GstPad*")
)

(define-method get_internal_links_default
  (of-object "GstPad")
  (c-name "gst_pad_get_internal_links_default")
  (overrides "gst_pad_get_internal_links_default")
  (return-type "GList*-of-GstPad*")
)

(define-function gst_pad_select
  (c-name "gst_pad_selectv")
  (overrides "gst_pad_select") ;; set scm-name to gst-pad-select
  (return-type "GstPad*")
  (parameters
    '("GList*-of-GstPad*" "padlist")
  )
)

(define-method realize
  (of-object "GstPad")
  (c-name "gst_pad_realize")
  (return-type "GstRealPad*"))

(define-method set-chain-function
  (of-object "GstPad")
  (c-name "_wrap_gst_pad_set_chain_function")
  (overrides "gst_pad_set_chain_function")
  (parameters '("SCM" "pad") '("SCM" "chain-function")))

(define-method set-get-function
  (of-object "GstPad")
  (c-name "_wrap_gst_pad_set_get_function")
  (overrides "gst_pad_set_get_function")
  (parameters '("SCM" "pad") '("SCM" "get-function")))

(define-method set-link-function
  (of-object "GstPad")
  (c-name "_wrap_gst_pad_set_link_function")
  (overrides "gst_pad_set_link_function")
  (parameters '("SCM" "pad") '("SCM" "link-function")))

;; GstPadTemplate

(define-method get-name-template
  (of-object "GstPadTemplate")
  (c-name "gst_pad_template_get_name_template")
  (return-type "const-gchar*"))

(define-method get-direction
  (of-object "GstPadTemplate")
  (c-name "gst_pad_template_get_direction")
  (return-type "GstPadDirection"))

(define-method get-presence
  (of-object "GstPadTemplate")
  (c-name "gst_pad_template_get_presence")
  (return-type "GstPadPresence"))

(define-function gst_pad_template_new
  (c-name "gst_pad_template_new")
  (overrides "gst_pad_template_new")
  (is-constructor-of "GstPadTemplate")
  (return-type "GstPadTemplate*")
  (parameters
    '("const-gchar*" "name_template")
    '("GstPadDirection" "direction")
    '("GstPadPresence" "presence")
    '("GstCaps*" "caps" (callee-owned))
  )
)
;; GstPluginFeature

(define-method get-name
  (of-object "GstPluginFeature")
  (c-name "gst_plugin_feature_get_name")
  (return-type "const-gchar*"))

(define-method feature_filter
  (of-object "GstPlugin")
  (c-name "gst_plugin_feature_filter")
  (overrides "gst_plugin_feature_filter")
  (return-type "GList*-of-GstPluginFeature*")
  (parameters
    '("GstPluginFeatureFilter" "filter")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)

(define-function gst_plugin_list_feature_filter
  (c-name "gst_plugin_list_feature_filter")
  (overrides "gst_plugin_list_feature_filter")
  (return-type "GList*-of-GstPluginFeature*")
  (parameters
    '("GList*-of-GstPlugin*" "list")
    '("GstPluginFeatureFilter" "filter")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)

(define-method get_feature_list
  (of-object "GstPlugin")
  (c-name "gst_plugin_get_feature_list")
  (overrides "gst_plugin_get_feature_list")
  (return-type "GList*-of-GstPluginFeature*")
)

;; GstQueryType

(define-function get_details
  (c-name "gst_query_type_get_details")
  (overrides "gst_query_type_get_details")
  (return-type "const-GstQueryTypeDefinition*")
  (parameters '("GstQueryType" "type"))
)

(define-function gst_query_type_get_definitions
  (c-name "gst_query_type_get_definitions")
  (overrides "gst_query_type_get_definitions")
  (return-type "const-GList*-of-GstQueryTypeDefinition*")
)

;; GstRegistry

(define-method get_path_list
  (of-object "GstRegistry")
  (c-name "gst_registry_get_path_list")
  (overrides "gst_registry_get_path_list")
  (return-type "GList*-of-const-gchar*")
)

(define-method plugin_filter
  (of-object "GstRegistry")
  (c-name "gst_registry_plugin_filter")
  (overrides "gst_registry_plugin_filter")
  (return-type "GList*-of-GstPlugin*")
  (parameters
    '("GstPluginFilter" "filter")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)

(define-method feature_filter
  (of-object "GstRegistry")
  (c-name "gst_registry_feature_filter")
  (overrides "gst_registry_feature_filter")
  (return-type "GList*-of-GstPluginFeature*")
  (parameters
    '("GstPluginFeatureFilter" "filter")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)

(define-function gst_registry_pool_plugin_filter
  (c-name "gst_registry_pool_plugin_filter")
  (overrides "gst_registry_pool_plugin_filter")
  (return-type "GList*-of-GstPlugin*")
  (parameters
    '("GstPluginFilter" "filter")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)

(define-function gst_registry_pool_feature_filter
  (c-name "gst_registry_pool_feature_filter")
  (overrides "gst_registry_pool_feature_filter")
  (return-type "GList*-of-GstPluginFeature*")
  (parameters
    '("GstPluginFeatureFilter" "filter")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)

;; GstPlugin

(define-function gst_registry_pool_plugin_list
  (c-name "gst_registry_pool_plugin_list")
  (overrides "gst_registry_pool_plugin_list")
  (return-type "GList*-of-GstPlugin*")
)

(define-function gst_registry_pool_feature_list
  (c-name "gst_registry_pool_feature_list")
  (overrides "gst_registry_pool_feature_list")
  (return-type "GList*-of-GstPluginFeature*")
  (parameters
    '("GType" "type")
  )
)

;; GstScheduler

(define-method pad_select
  (of-object "GstScheduler")
  (c-name "gst_scheduler_pad_select")
  (overrides "gst_scheduler_pad_select")
  (return-type "GstPad*")
  (parameters
    '("GList*-of-GstPad*" "padlist")
  )
)

;; GstStructure

(define-method for-each
  (of-object "GstStructure")
  (c-name "_wrap_gst_structure_for_each")
  (overrides "gst_structure_foreach")
  (return-type "none")
  (parameters '("SCM" "proc")))

;; GstTypeFind

(define-function gst_type_find_factory_get_list
  (c-name "gst_type_find_factory_get_list")
  (overrides "gst_type_find_factory_get_list")
  (return-type "GList*-of-GstTypeFindFactory*")
)

;; GstXML

(define-method get_topelements
  (of-object "GstXML")
  (c-name "gst_xml_get_topelements")
  (overrides "gst_xml_get_topelements")
  (return-type "GList*-of-GstElement*")
)

;; things that taaz has already done that i should do too:

;; threading support in gst_bin_iterate
;; gst_pad_query
;; gst_element_query
;; gst_pad_convert
;; gst_element_convert


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ignores
(ignore-glob  "*_get_type"
              "_*"
              "*_ref"
              "*_unref"
              "*_copy"
              "*_free"
              "*_newv"
              "*_valist"
              "*_setv"
              "*_sink"
              "*_many"
              "*_function"
              "*_feature_filter"
              "*_plugin_filter")

(ignore-glob "cothread*"
             "gst_atomic*"
             "gst_class*"
             "gst_default*"
             "gst_implements*"
             "gst_init*"
             "gst_mem_chunk*"
             "gst_pipeline_*"
             "gst_thread_*"
             "gst_trash_stack*"
             "gst_util_*")

(ignore "gst_autoplug_to_caps"
        "gst_autoplug_to_renderers"
        "gst_buffer_new_and_alloc"
        "gst_buffer_pool_new"
        "gst_buffer_pool_get_user_data"
        "gst_buffer_pool_set_user_data"
        "gst_caps_chain"
        "gst_data_init"
        "gst_data_ref_by_count"
        "gst_element_class_install_std_props"
        "gst_element_set_loop_function"
        "gst_element_get"
        "gst_element_set"
        "gst_element_get_property"
        "gst_element_set_property"
        "gst_element_enable_threadsafe_properties"
        "gst_element_disable_threadsafe_properties"
        "gst_element_set_pending_properties"
        "gst_element_error"
        "gst_event_new_discontinuous"
        "gst_extra_get_filename_type"
        "gst_use_threads"
        "gst_has_threads"
        "gst_index_add_association"
        "gst_index_set_filter"
        "gst_index_set_resolver"
        "gst_object_default_deep_notify"
        "gst_object_replace"
        "gst_pad_set_element_private"
        "gst_pad_get_element_private"
        "gst_pad_selectv"
        "gst_pad_dispacher"
        "gst_parse_launchv"
        "gst_probe_new"
        "gst_probe_destroy"
        "gst_props_new"
        "gst_props_set"
        "gst_props_entry_get"
        "gst_props_get"
        "gst_props_get_safe"
        "gst_props_entry_new")