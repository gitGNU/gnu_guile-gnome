;; -*- scheme -*-

(include "libgda-types.defs")
(include overrides)

;; From /usr/include/libgda/gda-client.h

(define-function gda_client_get_type
  (c-name "gda_client_get_type")
  (return-type "GType")
)

(define-function gda_client_new
  (c-name "gda_client_new")
  (is-constructor-of "GdaClient")
  (return-type "GdaClient*")
)

(define-method open_connection
  (of-object "GdaClient")
  (c-name "gda_client_open_connection")
  (return-type "GdaConnection*")
  (parameters
    '("const-gchar*" "dsn")
    '("const-gchar*" "username" (null-ok))
    '("const-gchar*" "password" (null-ok))
    '("GdaConnectionOptions" "options")
  )
)

(define-method open_connection_from_string
  (of-object "GdaClient")
  (c-name "gda_client_open_connection_from_string")
  (return-type "GdaConnection*")
  (parameters
    '("const-gchar*" "provider_id")
    '("const-gchar*" "cnc_string")
    '("GdaConnectionOptions" "options")
  )
)

(define-method get_connection_list
  (of-object "GdaClient")
  (c-name "gda_client_get_connection_list")
  (return-type "const-GList*-of-GdaConnection*")
)

(define-method find_connection
  (of-object "GdaClient")
  (c-name "gda_client_find_connection")
  (return-type "GdaConnection*")
  (parameters
    '("const-gchar*" "dsn")
    '("const-gchar*" "username")
    '("const-gchar*" "password")
  )
)

(define-method close_all_connections
  (of-object "GdaClient")
  (c-name "gda_client_close_all_connections")
  (return-type "none")
)

(define-method notify_event
  (of-object "GdaClient")
  (c-name "gda_client_notify_event")
  (return-type "none")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaClientEvent" "event")
    '("GdaParameterList*" "params")
  )
)

(define-method notify_error_event
  (of-object "GdaClient")
  (c-name "gda_client_notify_error_event")
  (return-type "none")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaError*" "error")
  )
)

(define-method notify_connection_opened_event
  (of-object "GdaClient")
  (c-name "gda_client_notify_connection_opened_event")
  (return-type "none")
  (parameters
    '("GdaConnection*" "cnc")
  )
)

(define-method notify_transaction_started_event
  (of-object "GdaClient")
  (c-name "gda_client_notify_transaction_started_event")
  (return-type "none")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaTransaction*" "xaction")
  )
)

(define-method notify_transaction_committed_event
  (of-object "GdaClient")
  (c-name "gda_client_notify_transaction_committed_event")
  (return-type "none")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaTransaction*" "xaction")
  )
)

(define-method notify_transaction_cancelled_event
  (of-object "GdaClient")
  (c-name "gda_client_notify_transaction_cancelled_event")
  (return-type "none")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaTransaction*" "xaction")
  )
)

(define-method begin_transaction
  (of-object "GdaClient")
  (c-name "gda_client_begin_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)

(define-method commit_transaction
  (of-object "GdaClient")
  (c-name "gda_client_commit_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)

(define-method rollback_transaction
  (of-object "GdaClient")
  (c-name "gda_client_rollback_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)



;; From /usr/include/libgda/gda-command.h

(define-function gda_command_new
  (c-name "gda_command_new")
  (is-constructor-of "GdaCommand")
  (return-type "GdaCommand*")
  (parameters
    '("const-gchar*" "text")
    '("GdaCommandType" "type")
    '("GdaCommandOptions" "options")
  )
)

(define-method free
  (of-object "GdaCommand")
  (c-name "gda_command_free")
  (return-type "none")
)

(define-method get_text
  (of-object "GdaCommand")
  (c-name "gda_command_get_text")
  (return-type "const-gchar*")
)

(define-method set_text
  (of-object "GdaCommand")
  (c-name "gda_command_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method get_command_type
  (of-object "GdaCommand")
  (c-name "gda_command_get_command_type")
  (return-type "GdaCommandType")
)

(define-method set_command_type
  (of-object "GdaCommand")
  (c-name "gda_command_set_command_type")
  (return-type "none")
  (parameters
    '("GdaCommandType" "type")
  )
)

(define-method get_options
  (of-object "GdaCommand")
  (c-name "gda_command_get_options")
  (return-type "GdaCommandOptions")
)

(define-method set_options
  (of-object "GdaCommand")
  (c-name "gda_command_set_options")
  (return-type "none")
  (parameters
    '("GdaCommandOptions" "options")
  )
)

(define-method get_transaction
  (of-object "GdaCommand")
  (c-name "gda_command_get_transaction")
  (return-type "GdaTransaction*")
)

(define-method set_transaction
  (of-object "GdaCommand")
  (c-name "gda_command_set_transaction")
  (return-type "none")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)



;; From /usr/include/libgda/gda-connection.h

(define-function gda_connection_get_type
  (c-name "gda_connection_get_type")
  (return-type "GType")
)

(define-function gda_connection_new
  (c-name "gda_connection_new")
  (is-constructor-of "GdaConnection")
  (return-type "GdaConnection*")
  (parameters
    '("GdaClient*" "client")
    '("GdaServerProvider*" "provider")
    '("const-gchar*" "dsn")
    '("const-gchar*" "username")
    '("const-gchar*" "password")
    '("GdaConnectionOptions" "options")
  )
)

(define-method close
  (of-object "GdaConnection")
  (c-name "gda_connection_close")
  (return-type "gboolean")
)

(define-method is_open
  (of-object "GdaConnection")
  (c-name "gda_connection_is_open")
  (return-type "gboolean")
)

(define-method get_client
  (of-object "GdaConnection")
  (c-name "gda_connection_get_client")
  (return-type "GdaClient*")
)

(define-method set_client
  (of-object "GdaConnection")
  (c-name "gda_connection_set_client")
  (return-type "none")
  (parameters
    '("GdaClient*" "client")
  )
)

(define-method get_options
  (of-object "GdaConnection")
  (c-name "gda_connection_get_options")
  (return-type "GdaConnectionOptions")
)

(define-method get_server_version
  (of-object "GdaConnection")
  (c-name "gda_connection_get_server_version")
  (return-type "const-gchar*")
)

(define-method get_database
  (of-object "GdaConnection")
  (c-name "gda_connection_get_database")
  (return-type "const-gchar*")
)

(define-method get_dsn
  (of-object "GdaConnection")
  (c-name "gda_connection_get_dsn")
  (return-type "const-gchar*")
)

(define-method get_cnc_string
  (of-object "GdaConnection")
  (c-name "gda_connection_get_cnc_string")
  (return-type "const-gchar*")
)

(define-method get_provider
  (of-object "GdaConnection")
  (c-name "gda_connection_get_provider")
  (return-type "const-gchar*")
)

(define-method get_username
  (of-object "GdaConnection")
  (c-name "gda_connection_get_username")
  (return-type "const-gchar*")
)

(define-method get_password
  (of-object "GdaConnection")
  (c-name "gda_connection_get_password")
  (return-type "const-gchar*")
)

(define-method add_error
  (of-object "GdaConnection")
  (c-name "gda_connection_add_error")
  (return-type "none")
  (parameters
    '("GdaError*" "error")
  )
)

(define-method add_error_string
  (of-object "GdaConnection")
  (c-name "gda_connection_add_error_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "str")
  )
  (varargs #t)
)

(define-method add_error_list
  (of-object "GdaConnection")
  (c-name "gda_connection_add_error_list")
  (return-type "none")
  (parameters
    '("GList*-of-GdaError*" "error_list")
  )
)

(define-method change_database
  (of-object "GdaConnection")
  (c-name "gda_connection_change_database")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method create_database
  (of-object "GdaConnection")
  (c-name "gda_connection_create_database")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method drop_database
  (of-object "GdaConnection")
  (c-name "gda_connection_drop_database")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method execute_command
  (of-object "GdaConnection")
  (c-name "gda_connection_execute_command")
  (return-type "GList*-of-GdaDataModel*")
  (parameters
    '("GdaCommand*" "cmd")
    '("GdaParameterList*" "params")
  )
)

(define-method execute_single_command
  (of-object "GdaConnection")
  (c-name "gda_connection_execute_single_command")
  (return-type "GdaDataModel*")
  (parameters
    '("GdaCommand*" "cmd")
    '("GdaParameterList*" "params")
  )
)

(define-method execute_non_query
  (of-object "GdaConnection")
  (c-name "gda_connection_execute_non_query")
  (return-type "gint")
  (parameters
    '("GdaCommand*" "cmd")
    '("GdaParameterList*" "params")
  )
)

(define-method begin_transaction
  (of-object "GdaConnection")
  (c-name "gda_connection_begin_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)

(define-method commit_transaction
  (of-object "GdaConnection")
  (c-name "gda_connection_commit_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)

(define-method rollback_transaction
  (of-object "GdaConnection")
  (c-name "gda_connection_rollback_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaTransaction*" "xaction")
  )
)

(define-method get_errors
  (of-object "GdaConnection")
  (c-name "gda_connection_get_errors")
  (return-type "const-GList*-of-GdaError*")
)

(define-method supports
  (of-object "GdaConnection")
  (c-name "gda_connection_supports")
  (return-type "gboolean")
  (parameters
    '("GdaConnectionFeature" "feature")
  )
)

(define-method get_schema
  (of-object "GdaConnection")
  (c-name "gda_connection_get_schema")
  (return-type "GdaDataModel*")
  (parameters
    '("GdaConnectionSchema" "schema")
    '("GdaParameterList*" "params")
  )
)



;; From /usr/include/libgda/gda-data-model-array.h

(define-function gda_data_model_array_get_type
  (c-name "gda_data_model_array_get_type")
  (return-type "GType")
)

(define-function gda_data_model_array_new
  (c-name "gda_data_model_array_new")
  (is-constructor-of "GdaDataModelArray")
  (return-type "GdaDataModel*")
  (parameters
    '("gint" "cols")
  )
)

(define-method set_n_columns
  (of-object "GdaDataModelArray")
  (c-name "gda_data_model_array_set_n_columns")
  (return-type "none")
  (parameters
    '("gint" "cols")
  )
)

(define-method clear
  (of-object "GdaDataModelArray")
  (c-name "gda_data_model_array_clear")
  (return-type "none")
)



;; From /usr/include/libgda/gda-data-model-hash.h

(define-function gda_data_model_hash_get_type
  (c-name "gda_data_model_hash_get_type")
  (return-type "GType")
)

(define-function gda_data_model_hash_new
  (c-name "gda_data_model_hash_new")
  (is-constructor-of "GdaDataModelHash")
  (return-type "GdaDataModel*")
  (parameters
    '("gint" "cols")
  )
)

(define-method hash_get_value_at
  (of-object "GdaDataModel")
  (c-name "gda_data_model_hash_get_value_at")
  (return-type "const-GdaValue*")
  (parameters
    '("gint" "col")
    '("gint" "row")
  )
)

(define-method clear
  (of-object "GdaDataModelHash")
  (c-name "gda_data_model_hash_clear")
  (return-type "none")
)

(define-method set_n_columns
  (of-object "GdaDataModelHash")
  (c-name "gda_data_model_hash_set_n_columns")
  (return-type "none")
  (parameters
    '("gint" "cols")
  )
)

(define-method insert_row
  (of-object "GdaDataModelHash")
  (c-name "gda_data_model_hash_insert_row")
  (return-type "none")
  (parameters
    '("gint" "rownum")
    '("GdaRow*" "row")
  )
)

(define-method hash_get_row
  (of-object "GdaDataModel")
  (c-name "gda_data_model_hash_get_row")
  (return-type "const-GdaRow*")
  (parameters
    '("gint" "row")
  )
)



;; From /usr/include/libgda/gda-data-model-list.h

(define-function gda_data_model_list_get_type
  (c-name "gda_data_model_list_get_type")
  (return-type "GType")
)

(define-function gda_data_model_list_new
  (c-name "gda_data_model_list_new")
  (is-constructor-of "GdaDataModelList")
  (return-type "GdaDataModel*")
)

(define-function gda_data_model_list_new_from_string_list
  (c-name "gda_data_model_list_new_from_string_list")
  (return-type "GdaDataModel*")
  (parameters
    '("GList*-of-const-gchar*" "list")
  )
)

(define-method append_value
  (of-object "GdaDataModelList")
  (c-name "gda_data_model_list_append_value")
  (return-type "const-GdaRow*")
  (parameters
    '("const-GdaValue*" "value")
  )
)



;; From /usr/include/libgda/gda-data-model.h

(define-function gda_data_model_get_type
  (c-name "gda_data_model_get_type")
  (return-type "GType")
)

(define-method changed
  (of-object "GdaDataModel")
  (c-name "gda_data_model_changed")
  (return-type "none")
)

(define-method row_inserted
  (of-object "GdaDataModel")
  (c-name "gda_data_model_row_inserted")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-method row_updated
  (of-object "GdaDataModel")
  (c-name "gda_data_model_row_updated")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-method row_removed
  (of-object "GdaDataModel")
  (c-name "gda_data_model_row_removed")
  (return-type "none")
  (parameters
    '("gint" "row")
  )
)

(define-method freeze
  (of-object "GdaDataModel")
  (c-name "gda_data_model_freeze")
  (return-type "none")
)

(define-method thaw
  (of-object "GdaDataModel")
  (c-name "gda_data_model_thaw")
  (return-type "none")
)

(define-method get_n_rows
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_n_rows")
  (return-type "gint")
)

(define-method get_n_columns
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_n_columns")
  (return-type "gint")
)

(define-method describe_column
  (of-object "GdaDataModel")
  (c-name "gda_data_model_describe_column")
  (return-type "GdaFieldAttributes*")
  (parameters
    '("gint" "col")
  )
)

(define-method get_column_title
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_column_title")
  (return-type "const-gchar*")
  (parameters
    '("gint" "col")
  )
)

(define-method set_column_title
  (of-object "GdaDataModel")
  (c-name "gda_data_model_set_column_title")
  (return-type "none")
  (parameters
    '("gint" "col")
    '("const-gchar*" "title")
  )
)

(define-method get_column_position
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_column_position")
  (return-type "gint")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_row
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_row")
  (return-type "const-GdaRow*")
  (parameters
    '("gint" "row")
  )
)

(define-method get_value_at
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_value_at")
  (return-type "const-GdaValue*")
  (parameters
    '("gint" "col")
    '("gint" "row")
  )
)

(define-method is_editable
  (of-object "GdaDataModel")
  (c-name "gda_data_model_is_editable")
  (return-type "gboolean")
)

(define-method append_row
  (of-object "GdaDataModel")
  (c-name "gda_data_model_append_row")
  (return-type "const-GdaRow*")
  (parameters
    '("GList*-of-GdaValue*" "values")
  )
)

(define-method remove_row
  (of-object "GdaDataModel")
  (c-name "gda_data_model_remove_row")
  (return-type "gboolean")
  (parameters
    '("const-GdaRow*" "row")
  )
)

(define-method update_row
  (of-object "GdaDataModel")
  (c-name "gda_data_model_update_row")
  (return-type "gboolean")
  (parameters
    '("const-GdaRow*" "row")
  )
)

(define-method foreach
  (of-object "GdaDataModel")
  (c-name "gda_data_model_foreach")
  (return-type "none")
  (parameters
    '("GdaDataModelForeachFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method is_editing
  (of-object "GdaDataModel")
  (c-name "gda_data_model_is_editing")
  (return-type "gboolean")
)

(define-method begin_edit
  (of-object "GdaDataModel")
  (c-name "gda_data_model_begin_edit")
  (return-type "gboolean")
)

(define-method cancel_edit
  (of-object "GdaDataModel")
  (c-name "gda_data_model_cancel_edit")
  (return-type "gboolean")
)

(define-method end_edit
  (of-object "GdaDataModel")
  (c-name "gda_data_model_end_edit")
  (return-type "gboolean")
)

(define-method to_comma_separated
  (of-object "GdaDataModel")
  (c-name "gda_data_model_to_comma_separated")
  (return-type "gchar*")
)

(define-method to_tab_separated
  (of-object "GdaDataModel")
  (c-name "gda_data_model_to_tab_separated")
  (return-type "gchar*")
)

(define-method to_xml
  (of-object "GdaDataModel")
  (c-name "gda_data_model_to_xml")
  (return-type "gchar*")
  (parameters
    '("gboolean" "standalone")
  )
)

(define-method to_xml_node
  (of-object "GdaDataModel")
  (c-name "gda_data_model_to_xml_node")
  (return-type "xmlNodePtr")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_command_text
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_command_text")
  (return-type "const-gchar*")
)

(define-method set_command_text
  (of-object "GdaDataModel")
  (c-name "gda_data_model_set_command_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "txt")
  )
)

(define-method get_command_type
  (of-object "GdaDataModel")
  (c-name "gda_data_model_get_command_type")
  (return-type "GdaCommandType")
)

(define-method set_command_type
  (of-object "GdaDataModel")
  (c-name "gda_data_model_set_command_type")
  (return-type "none")
  (parameters
    '("GdaCommandType" "type")
  )
)

;; From /usr/include/libgda/gda-error.h

(define-function gda_error_get_type
  (c-name "gda_error_get_type")
  (return-type "GType")
)

(define-function gda_error_new
  (c-name "gda_error_new")
  (is-constructor-of "GdaError")
  (return-type "GdaError*")
)

(define-method free
  (of-object "GdaError")
  (c-name "gda_error_free")
  (return-type "none")
)

(define-function gda_error_list_copy
  (c-name "gda_error_list_copy")
  (return-type "GList*-of-GdaError*")
  (parameters
    '("GList*-of-GdaError*" "errors")
  )
)

(define-function gda_error_list_free
  (c-name "gda_error_list_free")
  (return-type "none")
  (parameters
    '("GList*-of-GdaError*" "errors")
  )
)

(define-method get_description
  (of-object "GdaError")
  (c-name "gda_error_get_description")
  (return-type "const-gchar*")
)

(define-method set_description
  (of-object "GdaError")
  (c-name "gda_error_set_description")
  (return-type "none")
  (parameters
    '("const-gchar*" "description")
  )
)

(define-method get_number
  (of-object "GdaError")
  (c-name "gda_error_get_number")
  (return-type "glong")
)

(define-method set_number
  (of-object "GdaError")
  (c-name "gda_error_set_number")
  (return-type "none")
  (parameters
    '("glong" "number")
  )
)

(define-method get_source
  (of-object "GdaError")
  (c-name "gda_error_get_source")
  (return-type "const-gchar*")
)

(define-method set_source
  (of-object "GdaError")
  (c-name "gda_error_set_source")
  (return-type "none")
  (parameters
    '("const-gchar*" "source")
  )
)

(define-method get_sqlstate
  (of-object "GdaError")
  (c-name "gda_error_get_sqlstate")
  (return-type "const-gchar*")
)

(define-method set_sqlstate
  (of-object "GdaError")
  (c-name "gda_error_set_sqlstate")
  (return-type "none")
  (parameters
    '("const-gchar*" "sqlstate")
  )
)

;; From /usr/include/libgda/gda-quark-list.h

(define-function gda_quark_list_new_from_string
  (c-name "gda_quark_list_new_from_string")
  (return-type "GdaQuarkList*")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method free
  (of-object "GdaQuarkList")
  (c-name "gda_quark_list_free")
  (return-type "none")
)

(define-method add_from_string
  (of-object "GdaQuarkList")
  (c-name "gda_quark_list_add_from_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "string")
    '("gboolean" "cleanup")
  )
)

(define-method find
  (of-object "GdaQuarkList")
  (c-name "gda_quark_list_find")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method remove
  (of-object "GdaQuarkList")
  (c-name "gda_quark_list_remove")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From /usr/include/libgda/gda-row.h

(define-function gda_row_new_from_list
  (c-name "gda_row_new_from_list")
  (return-type "GdaRow*")
  (parameters
    '("GdaDataModel*" "model")
    '("GList*-of-GdaValue*" "values")
  )
)

(define-method free
  (of-object "GdaRow")
  (c-name "gda_row_free")
  (return-type "none")
)

(define-method get_model
  (of-object "GdaRow")
  (c-name "gda_row_get_model")
  (return-type "GdaDataModel*")
)

(define-method get_number
  (of-object "GdaRow")
  (c-name "gda_row_get_number")
  (return-type "gint")
)

(define-method set_number
  (of-object "GdaRow")
  (c-name "gda_row_set_number")
  (return-type "none")
  (parameters
    '("gint" "number")
  )
)

(define-method get_id
  (of-object "GdaRow")
  (c-name "gda_row_get_id")
  (return-type "const-gchar*")
)

(define-method set_id
  (of-object "GdaRow")
  (c-name "gda_row_set_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-method get_value
  (of-object "GdaRow")
  (c-name "gda_row_get_value")
  (return-type "const-GdaValue*")
  (parameters
    '("gint" "num")
  )
)

(define-method get_length
  (of-object "GdaRow")
  (c-name "gda_row_get_length")
  (return-type "gint")
)



;; From /usr/include/libgda/gda-select.h

(define-function gda_select_get_type
  (c-name "gda_select_get_type")
  (return-type "GType")
)

(define-function gda_select_new
  (c-name "gda_select_new")
  (is-constructor-of "GdaSelect")
  (return-type "GdaDataModel*")
)

(define-method add_source
  (of-object "GdaSelect")
  (c-name "gda_select_add_source")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("GdaDataModel*" "source")
  )
)

(define-method set_sql
  (of-object "GdaSelect")
  (c-name "gda_select_set_sql")
  (return-type "none")
  (parameters
    '("const-gchar*" "sql")
  )
)

(define-method run
  (of-object "GdaSelect")
  (c-name "gda_select_run")
  (return-type "gboolean")
)



;; From /usr/include/libgda/gda-server-provider.h

(define-function gda_server_provider_get_type
  (c-name "gda_server_provider_get_type")
  (return-type "GType")
)

(define-method get_version
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_get_version")
  (return-type "const-gchar*")
)

(define-method open_connection
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_open_connection")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaQuarkList*" "params")
    '("const-gchar*" "username")
    '("const-gchar*" "password")
  )
)

(define-method close_connection
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_close_connection")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
  )
)

(define-method get_server_version
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_get_server_version")
  (return-type "const-gchar*")
  (parameters
    '("GdaConnection*" "cnc")
  )
)

(define-method get_database
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_get_database")
  (return-type "const-gchar*")
  (parameters
    '("GdaConnection*" "cnc")
  )
)

(define-method change_database
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_change_database")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("const-gchar*" "name")
  )
)

(define-method create_database
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_create_database")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("const-gchar*" "name")
  )
)

(define-method drop_database
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_drop_database")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("const-gchar*" "name")
  )
)

(define-method execute_command
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_execute_command")
  (return-type "GList*")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaCommand*" "cmd")
    '("GdaParameterList*" "params")
  )
)

(define-method begin_transaction
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_begin_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaTransaction*" "xaction")
  )
)

(define-method commit_transaction
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_commit_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaTransaction*" "xaction")
  )
)

(define-method rollback_transaction
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_rollback_transaction")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaTransaction*" "xaction")
  )
)

(define-method supports
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_supports")
  (return-type "gboolean")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaConnectionFeature" "feature")
  )
)

(define-method get_schema
  (of-object "GdaServerProvider")
  (c-name "gda_server_provider_get_schema")
  (return-type "GdaDataModel*")
  (parameters
    '("GdaConnection*" "cnc")
    '("GdaConnectionSchema" "schema")
    '("GdaParameterList*" "params")
  )
)



;; From /usr/include/libgda/gda-table.h

(define-function gda_table_get_type
  (c-name "gda_table_get_type")
  (return-type "GType")
)

(define-function gda_table_new
  (c-name "gda_table_new")
  (is-constructor-of "GdaTable")
  (return-type "GdaTable*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-function gda_table_new_from_model
  (c-name "gda_table_new_from_model")
  (return-type "GdaTable*")
  (parameters
    '("const-gchar*" "name")
    '("const-GdaDataModel*" "model")
    '("gboolean" "add_data")
  )
)

(define-method get_name
  (of-object "GdaTable")
  (c-name "gda_table_get_name")
  (return-type "const-gchar*")
)

(define-method set_name
  (of-object "GdaTable")
  (c-name "gda_table_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method add_field
  (of-object "GdaTable")
  (c-name "gda_table_add_field")
  (return-type "none")
  (parameters
    '("const-GdaFieldAttributes*" "fa")
  )
)

(define-method add_data_from_model
  (of-object "GdaTable")
  (c-name "gda_table_add_data_from_model")
  (return-type "none")
  (parameters
    '("const-GdaDataModel*" "model")
  )
)



;; From /usr/include/libgda/gda-transaction.h

(define-function gda_transaction_get_type
  (c-name "gda_transaction_get_type")
  (return-type "GType")
)

(define-function gda_transaction_new
  (c-name "gda_transaction_new")
  (is-constructor-of "GdaTransaction")
  (return-type "GdaTransaction*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_isolation_level
  (of-object "GdaTransaction")
  (c-name "gda_transaction_get_isolation_level")
  (return-type "GdaTransactionIsolation")
)

(define-method set_isolation_level
  (of-object "GdaTransaction")
  (c-name "gda_transaction_set_isolation_level")
  (return-type "none")
  (parameters
    '("GdaTransactionIsolation" "level")
  )
)

(define-method get_name
  (of-object "GdaTransaction")
  (c-name "gda_transaction_get_name")
  (return-type "const-gchar*")
)

(define-method set_name
  (of-object "GdaTransaction")
  (c-name "gda_transaction_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From /usr/include/libgda/gda-util.h

(define-function gda_type_from_string
  (c-name "gda_type_from_string")
  (return-type "GdaValueType")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-function gda_string_hash_to_list
  (c-name "gda_string_hash_to_list")
  (return-type "GList*-of-const-gchar*")
  (parameters
    '("GHashTable*" "hash_table")
  )
)

(define-function gda_sql_replace_placeholders
  (c-name "gda_sql_replace_placeholders")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "sql")
    '("GdaParameterList*" "params")
  )
)

(define-function gda_file_load
  (c-name "gda_file_load")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-function gda_file_save
  (c-name "gda_file_save")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("const-gchar*" "buffer")
    '("gint" "len")
  )
)



;; From /usr/include/libgda/gda-value.h

(define-function gda_value_new_null
  (c-name "gda_value_new_null")
  (return-type "GdaValue*")
)

(define-function gda_value_new_bigint
  (c-name "gda_value_new_bigint")
  (return-type "GdaValue*")
  (parameters
    '("gint64" "val")
  )
)

(define-function gda_value_new_biguint
  (c-name "gda_value_new_biguint")
  (return-type "GdaValue*")
  (parameters
    '("guint64" "val")
  )
)

(define-function gda_value_new_binary
  (c-name "gda_value_new_binary")
  (return-type "GdaValue*")
  (parameters
    '("gconstpointer" "val")
    '("glong" "size")
  )
)

(define-function gda_value_new_boolean
  (c-name "gda_value_new_boolean")
  (return-type "GdaValue*")
  (parameters
    '("gboolean" "val")
  )
)

(define-function gda_value_new_date
  (c-name "gda_value_new_date")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaDate*" "val")
  )
)

(define-function gda_value_new_double
  (c-name "gda_value_new_double")
  (return-type "GdaValue*")
  (parameters
    '("gdouble" "val")
  )
)

(define-function gda_value_new_geometric_point
  (c-name "gda_value_new_geometric_point")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaGeometricPoint*" "val")
  )
)

(define-function gda_value_new_gobject
  (c-name "gda_value_new_gobject")
  (return-type "GdaValue*")
  (parameters
    '("const-GObject*" "val")
  )
)

(define-function gda_value_new_integer
  (c-name "gda_value_new_integer")
  (return-type "GdaValue*")
  (parameters
    '("gint" "val")
  )
)

(define-function gda_value_new_list
  (c-name "gda_value_new_list")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaValueList*" "val")
  )
)

(define-function gda_value_new_money
  (c-name "gda_value_new_money")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaMoney*" "val")
  )
)

(define-function gda_value_new_numeric
  (c-name "gda_value_new_numeric")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaNumeric*" "val")
  )
)

(define-function gda_value_new_single
  (c-name "gda_value_new_single")
  (return-type "GdaValue*")
  (parameters
    '("gfloat" "val")
  )
)

(define-function gda_value_new_smallint
  (c-name "gda_value_new_smallint")
  (return-type "GdaValue*")
  (parameters
    '("gshort" "val")
  )
)

(define-function gda_value_new_smalluint
  (c-name "gda_value_new_smalluint")
  (return-type "GdaValue*")
  (parameters
    '("gushort" "val")
  )
)

(define-function gda_value_new_string
  (c-name "gda_value_new_string")
  (return-type "GdaValue*")
  (parameters
    '("const-gchar*" "val")
  )
)

(define-function gda_value_new_time
  (c-name "gda_value_new_time")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaTime*" "val")
  )
)

(define-function gda_value_new_timestamp
  (c-name "gda_value_new_timestamp")
  (return-type "GdaValue*")
  (parameters
    '("const-GdaTimestamp*" "val")
  )
)

(define-function gda_value_new_timestamp_from_timet
  (c-name "gda_value_new_timestamp_from_timet")
  (return-type "GdaValue*")
  (parameters
    '("time_t" "val")
  )
)

(define-function gda_value_new_tinyint
  (c-name "gda_value_new_tinyint")
  (return-type "GdaValue*")
  (parameters
    '("gchar" "val")
  )
)

(define-function gda_value_new_tinyuint
  (c-name "gda_value_new_tinyuint")
  (return-type "GdaValue*")
  (parameters
    '("guchar" "val")
  )
)

(define-function gda_value_new_type
  (c-name "gda_value_new_type")
  (return-type "GdaValue*")
  (parameters
    '("GdaValueType" "val")
  )
)

(define-function gda_value_new_uinteger
  (c-name "gda_value_new_uinteger")
  (return-type "GdaValue*")
  (parameters
    '("guint" "val")
  )
)

(define-function gda_value_new_from_string
  (c-name "gda_value_new_from_string")
  (return-type "GdaValue*")
  (parameters
    '("const-gchar*" "as_string")
    '("GdaValueType" "type")
  )
)

(define-function gda_value_new_from_xml
  (c-name "gda_value_new_from_xml")
  (return-type "GdaValue*")
  (parameters
    '("const-xmlNodePtr" "node")
  )
)

(define-method free
  (of-object "GdaValue")
  (c-name "gda_value_free")
  (return-type "none")
)

(define-method get_type
  (of-object "GdaValue")
  (c-name "gda_value_get_type")
  (return-type "GdaValueType")
)

(define-method is_null
  (of-object "GdaValue")
  (c-name "gda_value_is_null")
  (return-type "gboolean")
)

(define-method is_number
  (of-object "GdaValue")
  (c-name "gda_value_is_number")
  (return-type "gboolean")
)

(define-method copy
  (of-object "GdaValue")
  (c-name "gda_value_copy")
  (return-type "GdaValue*")
)

(define-method get_bigint
  (of-object "GdaValue")
  (c-name "gda_value_get_bigint")
  (return-type "gint64")
)

(define-method set_bigint
  (of-object "GdaValue")
  (c-name "gda_value_set_bigint")
  (return-type "none")
  (parameters
    '("gint64" "val")
  )
)

(define-method get_biguint
  (of-object "GdaValue")
  (c-name "gda_value_get_biguint")
  (return-type "guint64")
)

(define-method set_biguint
  (of-object "GdaValue")
  (c-name "gda_value_set_biguint")
  (return-type "none")
  (parameters
    '("guint64" "val")
  )
)

(define-method get_binary
  (of-object "GdaValue")
  (c-name "gda_value_get_binary")
  (return-type "const-gpointer")
  (parameters
    '("glong*" "size")
  )
)

(define-method set_binary
  (of-object "GdaValue")
  (c-name "gda_value_set_binary")
  (return-type "none")
  (parameters
    '("gconstpointer" "val")
    '("glong" "size")
  )
)

(define-method get_boolean
  (of-object "GdaValue")
  (c-name "gda_value_get_boolean")
  (return-type "gboolean")
)

(define-method set_boolean
  (of-object "GdaValue")
  (c-name "gda_value_set_boolean")
  (return-type "none")
  (parameters
    '("gboolean" "val")
  )
)

(define-method get_date
  (of-object "GdaValue")
  (c-name "gda_value_get_date")
  (return-type "const-GdaDate*")
)

(define-method set_date
  (of-object "GdaValue")
  (c-name "gda_value_set_date")
  (return-type "none")
  (parameters
    '("const-GdaDate*" "val")
  )
)

(define-method get_double
  (of-object "GdaValue")
  (c-name "gda_value_get_double")
  (return-type "gdouble")
)

(define-method set_double
  (of-object "GdaValue")
  (c-name "gda_value_set_double")
  (return-type "none")
  (parameters
    '("gdouble" "val")
  )
)

(define-method get_geometric_point
  (of-object "GdaValue")
  (c-name "gda_value_get_geometric_point")
  (return-type "const-GdaGeometricPoint*")
)

(define-method set_geometric_point
  (of-object "GdaValue")
  (c-name "gda_value_set_geometric_point")
  (return-type "none")
  (parameters
    '("const-GdaGeometricPoint*" "val")
  )
)

(define-method get_gobject
  (of-object "GdaValue")
  (c-name "gda_value_get_gobject")
  (return-type "const-GObject*")
)

(define-method set_gobject
  (of-object "GdaValue")
  (c-name "gda_value_set_gobject")
  (return-type "none")
  (parameters
    '("const-GObject*" "val")
  )
)

(define-method get_integer
  (of-object "GdaValue")
  (c-name "gda_value_get_integer")
  (return-type "gint")
)

(define-method set_integer
  (of-object "GdaValue")
  (c-name "gda_value_set_integer")
  (return-type "none")
  (parameters
    '("gint" "val")
  )
)

(define-method get_list
  (of-object "GdaValue")
  (c-name "gda_value_get_list")
  (return-type "const-GdaValueList*")
)

(define-method set_list
  (of-object "GdaValue")
  (c-name "gda_value_set_list")
  (return-type "none")
  (parameters
    '("const-GdaValueList*" "val")
  )
)

(define-method set_null
  (of-object "GdaValue")
  (c-name "gda_value_set_null")
  (return-type "none")
)

(define-method get_money
  (of-object "GdaValue")
  (c-name "gda_value_get_money")
  (return-type "const-GdaMoney*")
)

(define-method set_money
  (of-object "GdaValue")
  (c-name "gda_value_set_money")
  (return-type "none")
  (parameters
    '("const-GdaMoney*" "val")
  )
)

(define-method get_numeric
  (of-object "GdaValue")
  (c-name "gda_value_get_numeric")
  (return-type "const-GdaNumeric*")
)

(define-method set_numeric
  (of-object "GdaValue")
  (c-name "gda_value_set_numeric")
  (return-type "none")
  (parameters
    '("const-GdaNumeric*" "val")
  )
)

(define-method get_single
  (of-object "GdaValue")
  (c-name "gda_value_get_single")
  (return-type "gfloat")
)

(define-method set_single
  (of-object "GdaValue")
  (c-name "gda_value_set_single")
  (return-type "none")
  (parameters
    '("gfloat" "val")
  )
)

(define-method get_smallint
  (of-object "GdaValue")
  (c-name "gda_value_get_smallint")
  (return-type "gshort")
)

(define-method set_smallint
  (of-object "GdaValue")
  (c-name "gda_value_set_smallint")
  (return-type "none")
  (parameters
    '("gshort" "val")
  )
)

(define-method get_smalluint
  (of-object "GdaValue")
  (c-name "gda_value_get_smalluint")
  (return-type "gushort")
)

(define-method set_smalluint
  (of-object "GdaValue")
  (c-name "gda_value_set_smalluint")
  (return-type "none")
  (parameters
    '("gushort" "val")
  )
)

(define-method get_string
  (of-object "GdaValue")
  (c-name "gda_value_get_string")
  (return-type "const-gchar*")
)

(define-method set_string
  (of-object "GdaValue")
  (c-name "gda_value_set_string")
  (return-type "none")
  (parameters
    '("const-gchar*" "val")
  )
)

(define-method get_time
  (of-object "GdaValue")
  (c-name "gda_value_get_time")
  (return-type "const-GdaTime*")
)

(define-method set_time
  (of-object "GdaValue")
  (c-name "gda_value_set_time")
  (return-type "none")
  (parameters
    '("const-GdaTime*" "val")
  )
)

(define-method get_timestamp
  (of-object "GdaValue")
  (c-name "gda_value_get_timestamp")
  (return-type "const-GdaTimestamp*")
)

(define-method set_timestamp
  (of-object "GdaValue")
  (c-name "gda_value_set_timestamp")
  (return-type "none")
  (parameters
    '("const-GdaTimestamp*" "val")
  )
)

(define-method get_tinyint
  (of-object "GdaValue")
  (c-name "gda_value_get_tinyint")
  (return-type "gchar")
)

(define-method set_tinyint
  (of-object "GdaValue")
  (c-name "gda_value_set_tinyint")
  (return-type "none")
  (parameters
    '("gchar" "val")
  )
)

(define-method get_tinyuint
  (of-object "GdaValue")
  (c-name "gda_value_get_tinyuint")
  (return-type "guchar")
)

(define-method set_tinyuint
  (of-object "GdaValue")
  (c-name "gda_value_set_tinyuint")
  (return-type "none")
  (parameters
    '("guchar" "val")
  )
)

(define-method get_uinteger
  (of-object "GdaValue")
  (c-name "gda_value_get_uinteger")
  (return-type "guint")
)

(define-method set_uinteger
  (of-object "GdaValue")
  (c-name "gda_value_set_uinteger")
  (return-type "none")
  (parameters
    '("guint" "val")
  )
)

(define-method get_vtype
  (of-object "GdaValue")
  (c-name "gda_value_get_vtype")
  (return-type "GdaValueType")
)

(define-method set_vtype
  (of-object "GdaValue")
  (c-name "gda_value_set_vtype")
  (return-type "none")
  (parameters
    '("GdaValueType" "type")
  )
)

(define-method set_from_string
  (of-object "GdaValue")
  (c-name "gda_value_set_from_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "as_string")
    '("GdaValueType" "type")
  )
)

(define-method set_from_value
  (of-object "GdaValue")
  (c-name "gda_value_set_from_value")
  (return-type "gboolean")
  (parameters
    '("const-GdaValue*" "from")
  )
)

(define-method compare
  (of-object "GdaValue")
  (c-name "gda_value_compare")
  (return-type "gint")
  (parameters
    '("const-GdaValue*" "value2")
  )
)

(define-method stringify
  (of-object "GdaValue")
  (c-name "gda_value_stringify")
  (return-type "gchar*")
)

(define-method to_xml
  (of-object "GdaValue")
  (c-name "gda_value_to_xml")
  (return-type "xmlNodePtr")
)



;; From /usr/include/libgda/libgda.h

(define-function gda_main_run
  (c-name "gda_main_run")
  (return-type "none")
  (parameters
    '("GdaInitFunc" "init_func")
    '("gpointer" "user_data")
  )
)

(define-function gda_main_quit
  (c-name "gda_main_quit")
  (return-type "none")
)
