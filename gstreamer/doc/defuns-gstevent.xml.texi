
@c %start of fragment

@deftp Class <gst-event>
@end deftp

@deffn Function gst-event-get-structure  (self@tie{}@code{<gst-event>}) @result{}@tie{} (ret@tie{}@code{<gst-structure>})
@deffnx Method get-structure
Access the structure of the event.

@table @var
@item event
The @code{<gst-event>}.

@item ret
The structure of the event. The structure is still owned by the event, which
means that you should not free it and that the pointer becomes invalid when you
free the event. MT safe.

@end table

@end deffn

@deffn Function gst-event-new-buffer-size  (format@tie{}@code{<gst-format>}) (minsize@tie{}@code{int64}) (maxsize@tie{}@code{int64}) (async@tie{}@code{bool}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Create a new buffersize event. The event is sent downstream and notifies
elements that they should provide a buffer of the specified dimensions.

When the @var{async} flag is set, a thread boundary is prefered.

@table @var
@item format
buffer format

@item minsize
minimum buffer size

@item maxsize
maximum buffer size

@item async
thread behavior

@item ret
a new @code{<gst-event>}

@end table

@end deffn

@deffn Function gst-event-new-eos  @result{}@tie{} (ret@tie{}@code{<gst-event>})
Create a new EOS event. The eos event can only travel downstream synchronized
with the buffer flow. Elements that receive the EOS event on a pad can return
@code{<gst-flow-unexpected>} as a @code{<gst-flow-return>} when data after the
EOS event arrives.

The EOS event will travel down to the sink elements in the pipeline which will
then post the @code{<gst-message-eos>} on the bus after they have finished
playing any buffered data.

When all sinks have posted an EOS message, an EOS message is forwarded to the
application.

@table @var
@item ret
The new EOS event.

@end table

@end deffn

@deffn Function gst-event-new-flush-start  @result{}@tie{} (ret@tie{}@code{<gst-event>})
Allocate a new flush start event. The flush start event can be sent upstream and
downstream and travels out-of-bounds with the dataflow.

It marks pads as being flushing and will make them return
@code{<gst-flow-wrong-state>} when used for data flow with @code{gst-pad-push},
@code{gst-pad-chain}, @code{gst-pad-alloc-buffer}, @code{gst-pad-get-range} and
@code{gst-pad-pull-range}. Any event (except a @code{<gst-event-flush-stop>})
received on a flushing pad will return @samp{@code{#f}} immediately.

Elements should unlock any blocking functions and exit their streaming functions
as fast as possible when this event is received.

This event is typically generated after a seek to flush out all queued data in
the pipeline so that the new media is played as soon as possible.

@table @var
@item ret
A new flush start event.

@end table

@end deffn

@deffn Function gst-event-new-flush-stop  @result{}@tie{} (ret@tie{}@code{<gst-event>})
Allocate a new flush stop event. The flush stop event can be sent upstream and
downstream and travels out-of-bounds with the dataflow. It is typically sent
after sending a FLUSH_START event to make the pads accept data again.

Elements can process this event synchronized with the dataflow since the
preceeding FLUSH_START event stopped the dataflow.

This event is typically generated to complete a seek and to resume dataflow.

@table @var
@item ret
A new flush stop event.

@end table

@end deffn

@deffn Function gst-event-new-navigation  (structure@tie{}@code{<gst-structure>}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Create a new navigation event from the given description.

@table @var
@item structure
description of the event

@item ret
a new @code{<gst-event>}

@end table

@end deffn

@deffn Function gst-event-new-new-segment  (update@tie{}@code{bool}) (rate@tie{}@code{double}) (format@tie{}@code{<gst-format>}) (start@tie{}@code{int64}) (stop@tie{}@code{int64}) (position@tie{}@code{int64}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Allocate a new newsegment event with the given format/values tripplets

This method calls @code{gst-event-new-new-segment-full} passing a default value
of 1.0 for applied_rate

@table @var
@item update
is this segment an update to a previous one

@item rate
a new rate for playback

@item format
The format of the segment values

@item start
the start value of the segment

@item stop
the stop value of the segment

@item position
stream position

@item ret
A new newsegment event.

@end table

@end deffn

@deffn Function gst-event-new-new-segment-full  (update@tie{}@code{bool}) (rate@tie{}@code{double}) (applied_rate@tie{}@code{double}) (format@tie{}@code{<gst-format>}) (start@tie{}@code{int64}) (stop@tie{}@code{int64}) (position@tie{}@code{int64}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Allocate a new newsegment event with the given format/values triplets.

The newsegment event marks the range of buffers to be processed. All data not
within the segment range is not to be processed. This can be used intelligently
by plugins to apply more efficient methods of skipping unneeded data.

The position value of the segment is used in conjunction with the start value to
convert the buffer timestamps into the stream time. This is usually done in
sinks to report the current stream_time. @var{position} represents the
stream_time of a buffer carrying a timestamp of @var{start}. @var{position}
cannot be -1.

@var{start} cannot be -1, @var{stop} can be -1. If there is a valid @var{stop}
given, it must be greater or equal the @var{start}, including when the indicated
playback @var{rate} is < 0.

The @var{applied-rate} value provides information about any rate adjustment that
has already been made to the timestamps and content on the buffers of the
stream. (@var{rate} * @var{applied-rate}) should always equal the rate that has
been requested for playback. For example, if an element has an input segment
with intended playback @var{rate} of 2.0 and applied_rate of 1.0, it can adjust
incoming timestamps and buffer content by half and output a newsegment event
with @var{rate} of 1.0 and @var{applied-rate} of 2.0

After a newsegment event, the buffer stream time is calculated with:

position + (TIMESTAMP(buf) - start) * ABS (rate * applied_rate)

@table @var
@item update
Whether this segment is an update to a previous one

@item rate
A new rate for playback

@item applied-rate
The rate factor which has already been applied

@item format
The format of the segment values

@item start
The start value of the segment

@item stop
The stop value of the segment

@item position
stream position

@item ret
A new newsegment event.

@end table

Since 0.10.6

@end deffn

@deffn Function gst-event-new-qos  (proportion@tie{}@code{double}) (diff@tie{}@code{unsigned-long-long}) (timestamp@tie{}@code{unsigned-long-long}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Allocate a new qos event with the given values. The QOS event is generated in an
element that wants an upstream element to either reduce or increase its rate
because of high/low CPU load or other resource usage such as network
performance. Typically sinks generate these events for each buffer they receive.

@var{proportion} indicates the real-time performance of the streaming in the
element that generated the QoS event (usually the sink). The value is generally
computed based on more long term statistics about the streams timestamps
compared to the clock. A value < 1.0 indicates that the upstream element is
producing data faster than real-time. A value > 1.0 indicates that the upstream
element is not producing data fast enough. 1.0 is the ideal @var{proportion}
value. The proportion value can safely be used to lower or increase the quality
of the element.

@var{diff} is the difference against the clock in running time of the last
buffer that caused the element to generate the QOS event. A negative value means
that the buffer with @var{timestamp} arrived in time. A positive value indicates
how late the buffer with @var{timestamp} was.

@var{timestamp} is the timestamp of the last buffer that cause the element to
generate the QOS event. It is expressed in running time and thus an ever
increasing value.

The upstream element can use the @var{diff} and @var{timestamp} values to decide
whether to process more buffers. For possitive @var{diff}, all buffers with
timestamp <= @var{timestamp} + @var{diff} will certainly arrive late in the sink
as well.

The application can use general event probes to intercept the QoS event and
implement custom application specific QoS handling.

@table @var
@item proportion
the proportion of the qos message

@item diff
The time difference of the last Clock sync

@item timestamp
The timestamp of the buffer

@item ret
A new QOS event.

@end table

@end deffn

@deffn Function gst-event-new-seek  (rate@tie{}@code{double}) (format@tie{}@code{<gst-format>}) (flags@tie{}@code{<gst-seek-flags>}) (cur_type@tie{}@code{<gst-seek-type>}) (cur@tie{}@code{int64}) (stop_type@tie{}@code{<gst-seek-type>}) (stop@tie{}@code{int64}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Allocate a new seek event with the given parameters.

The seek event configures playback of the pipeline between @var{start} to
@var{stop} at the speed given in @var{rate}, also called a playback segment. The
@var{start} and @var{stop} values are expressed in @var{format}.

A @var{rate} of 1.0 means normal playback rate, 2.0 means double speed.
Negatives values means backwards playback. A value of 0.0 for the rate is not
allowed and should be accomplished instead by PAUSING the pipeline.

A pipeline has a default playback segment configured with a start position of 0,
a stop position of -1 and a rate of 1.0. The currently configured playback
segment can be queried with @code{<gst-query-segment>}.

@var{start-type} and @var{stop-type} specify how to adjust the currently
configured start and stop fields in @var{segment}. Adjustments can be made
relative or absolute to the last configured values. A type of
@code{<gst-seek-type-none>} means that the position should not be updated.

When the rate is positive and @var{start} has been updated, playback will start
from the newly configured start position.

For negative rates, playback will start from the newly configured stop position
(if any). If the stop position if updated, it must be different from -1 for
negative rates.

It is not possible to seek relative to the current playback position, to do
this, PAUSE the pipeline, query the current playback position with
@code{<gst-query-position>} and update the playback segment current position
with a @code{<gst-seek-type-set>} to the desired position.

@table @var
@item rate
The new playback rate

@item format
The format of the seek values

@item flags
The optional seek flags

@item start-type
The type and flags for the new start position

@item start
The value of the new start position

@item stop-type
The type and flags for the new stop position

@item stop
The value of the new stop position

@item ret
A new seek event.

@end table

@end deffn

@deffn Function gst-event-new-tag  (taglist@tie{}@code{<gst-tag-list*>}) @result{}@tie{} (ret@tie{}@code{<gst-event>})
Generates a metadata tag event from the given @var{taglist}.

@table @var
@item taglist
metadata list

@item ret
a new @code{<gst-event>}

@end table

@end deffn

@deffn Function gst-event-parse-buffer-size  (self@tie{}@code{<gst-event>}) (format@tie{}@code{<gst-format*>}) @result{}@tie{} (minsize@tie{}@code{int64}) (maxsize@tie{}@code{int64}) (async@tie{}@code{bool})
@deffnx Method parse-buffer-size
Get the format, minsize, maxsize and async-flag in the buffersize event.

@table @var
@item event
The event to query

@item format
A pointer to store the format in

@item minsize
A pointer to store the minsize in

@item maxsize
A pointer to store the maxsize in

@item async
A pointer to store the async-flag in

@end table

@end deffn

@deffn Function gst-event-parse-new-segment  (self@tie{}@code{<gst-event>}) (format@tie{}@code{<gst-format*>}) @result{}@tie{} (update@tie{}@code{bool}) (rate@tie{}@code{double}) (start@tie{}@code{int64}) (stop@tie{}@code{int64}) (position@tie{}@code{int64})
@deffnx Method parse-new-segment
Get the update flag, rate, format, start, stop and position in the newsegment
event. In general, @code{gst-event-parse-new-segment-full} should be used
instead of this, to also retrieve the applied_rate value of the segment. See
@code{gst-event-new-new-segment-full} for a full description of the newsegment
event.

@table @var
@item event
The event to query

@item update
A pointer to the update flag of the segment

@item rate
A pointer to the rate of the segment

@item format
A pointer to the format of the newsegment values

@item start
A pointer to store the start value in

@item stop
A pointer to store the stop value in

@item position
A pointer to store the stream time in

@end table

@end deffn

@deffn Function gst-event-parse-new-segment-full  (self@tie{}@code{<gst-event>}) (format@tie{}@code{<gst-format*>}) @result{}@tie{} (update@tie{}@code{bool}) (rate@tie{}@code{double}) (applied_rate@tie{}@code{double}) (start@tie{}@code{int64}) (stop@tie{}@code{int64}) (position@tie{}@code{int64})
@deffnx Method parse-new-segment-full
Get the update, rate, applied_rate, format, start, stop and position in the
newsegment event. See @code{gst-event-new-new-segment-full} for a full
description of the newsegment event.

@table @var
@item event
The event to query

@item update
A pointer to the update flag of the segment

@item rate
A pointer to the rate of the segment

@item applied-rate
A pointer to the applied_rate of the segment

@item format
A pointer to the format of the newsegment values

@item start
A pointer to store the start value in

@item stop
A pointer to store the stop value in

@item position
A pointer to store the stream time in

@end table

Since 0.10.6

@end deffn

@deffn Function gst-event-parse-qos  (self@tie{}@code{<gst-event>}) (diff@tie{}@code{<gst-clock-time-diff*>}) (timestamp@tie{}@code{<gst-clock-time*>}) @result{}@tie{} (proportion@tie{}@code{double})
@deffnx Method parse-qos
Get the proportion, diff and timestamp in the qos event. See
@code{gst-event-new-qos} for more information about the different QoS values.

@table @var
@item event
The event to query

@item proportion
A pointer to store the proportion in

@item diff
A pointer to store the diff in

@item timestamp
A pointer to store the timestamp in

@end table

@end deffn

@deffn Function gst-event-parse-seek  (self@tie{}@code{<gst-event>}) (format@tie{}@code{<gst-format*>}) (flags@tie{}@code{<gst-seek-flags*>}) (cur_type@tie{}@code{<gst-seek-type*>}) (stop_type@tie{}@code{<gst-seek-type*>}) @result{}@tie{} (rate@tie{}@code{double}) (cur@tie{}@code{int64}) (stop@tie{}@code{int64})
@deffnx Method parse-seek
Parses a seek @var{event} and stores the results in the given result locations.

@table @var
@item event
a seek event

@item rate
result location for the rate

@item format
result location for the stream format

@item flags
result location for the @code{<gst-seek-flags>}

@item start-type
result location for the @code{<gst-seek-type>} of the start position

@item start
result location for the start postion expressed in @var{format}

@item stop-type
result location for the @code{<gst-seek-type>} of the stop position

@item stop
result location for the stop postion expressed in @var{format}

@end table

@end deffn

@deffn Function gst-event-parse-tag  (self@tie{}@code{<gst-event>}) (taglist@tie{}@code{<gst-tag-list**>})
@deffnx Method parse-tag
Parses a tag @var{event} and stores the results in the given @var{taglist}
location.

@table @var
@item event
a tag event

@item taglist
pointer to metadata list

@end table

@end deffn

@deffn Function gst-event-type-get-flags  (self@tie{}@code{<gst-event-type*>}) @result{}@tie{} (ret@tie{}@code{<gst-event-type-flags>})
Gets the @code{<gst-event-type-flags>} associated with @var{type}.

@table @var
@item type
a @code{<gst-event-type>}

@item ret
a @code{<gst-event-type-flags>}.

@end table

@end deffn

@deffn Function gst-event-type-get-name  (self@tie{}@code{<gst-event-type*>}) @result{}@tie{} (ret@tie{}@code{mchars})
Get a printable name for the given event type. Do not modify or free.

@table @var
@item type
the event type

@item ret
a reference to the static name of the event.

@end table

@end deffn

@deffn Function gst-event-type-to-quark  (self@tie{}@code{<gst-event-type*>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
Get the unique quark for the given event type.

@table @var
@item type
the event type

@item ret
the quark associated with the event type

@end table

@end deffn


@c %end of fragment
