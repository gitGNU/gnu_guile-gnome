
@c %start of fragment

@deffn Function clutter-score-new  @result{}@tie{} (ret@tie{}@code{<clutter-score>})
@samp{clutter_score_new} is deprecated and should not be used in
newly-written code.

Creates a new @code{<clutter-score>}. A @code{<clutter-score>} is an
object that can hold multiple @code{<clutter-timeline>}s in a sequential
order.

@table @var
@item ret
the newly created @code{<clutter-score>}. Use @code{g-object-unref} when
done.

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-set-loop  (self@tie{}@code{<clutter-score>}) (loop@tie{}@code{bool})
@deffnx Method set-loop
@samp{clutter_score_set_loop} is deprecated and should not be used in
newly-written code.

Sets whether @var{score} should loop. A looping @code{<clutter-score>}
will start from its initial state after the ::complete signal has been
fired.

@table @var
@item score
a @code{<clutter-score>}

@item loop
@samp{@code{#t}} for enable looping

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-get-loop  (self@tie{}@code{<clutter-score>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method get-loop
@samp{clutter_score_get_loop} is deprecated and should not be used in
newly-written code.

Gets whether @var{score} is looping

@table @var
@item score
a @code{<clutter-score>}

@item ret
@samp{@code{#t}} if the score is looping

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-append  (self@tie{}@code{<clutter-score>}) (parent@tie{}@code{<clutter-timeline>}) (timeline@tie{}@code{<clutter-timeline>}) @result{}@tie{} (ret@tie{}@code{unsigned-long})
@deffnx Method append
@samp{clutter_score_append} is deprecated and should not be used in
newly-written code.

Appends a timeline to another one existing in the score; the newly
appended timeline will be started when @var{parent} is complete.

If @var{parent} is @samp{@code{#f}}, the new @code{<clutter-timeline>}
will be started when @code{clutter-score-start} is called.

@code{<clutter-score>} will take a reference on @var{timeline}.

@table @var
@item score
a @code{<clutter-score>}

@item parent
a @code{<clutter-timeline>} in the score, or @samp{@code{#f}}.

@item timeline
a @code{<clutter-timeline>}

@item ret
the id of the @code{<clutter-timeline>} inside the score, or 0 on
failure. The returned id can be used with @code{clutter-score-remove} or
@code{clutter-score-get-timeline}.

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-append-at-marker  (self@tie{}@code{<clutter-score>}) (parent@tie{}@code{<clutter-timeline>}) (marker_name@tie{}@code{mchars}) (timeline@tie{}@code{<clutter-timeline>}) @result{}@tie{} (ret@tie{}@code{unsigned-long})
@deffnx Method append-at-marker
@samp{clutter_score_append_at_marker} is deprecated and should not be
used in newly-written code.

Appends @var{timeline} at the given @var{marker-name} on the
@var{parent}@code{<clutter-timeline>}.

If you want to append @var{timeline} at the end of @var{parent}, use
@code{clutter-score-append}.

The @code{<clutter-score>} will take a reference on @var{timeline}.

@table @var
@item score
a @code{<clutter-score>}

@item parent
the parent @code{<clutter-timeline>}

@item marker-name
the name of the marker to use

@item timeline
the @code{<clutter-timeline>} to append

@item ret
the id of the @code{<clutter-timeline>} inside the score, or 0 on
failure. The returned id can be used with @code{clutter-score-remove} or
@code{clutter-score-get-timeline}.

@end table

Since 0.8

@end deffn

@deffn Function clutter-score-remove  (self@tie{}@code{<clutter-score>}) (id_@tie{}@code{unsigned-long})
@deffnx Method remove
@samp{clutter_score_remove} is deprecated and should not be used in
newly-written code.

Removes the @code{<clutter-timeline>} with the given id inside
@var{score}. If the timeline has other timelines attached to it, those
are removed as well.

@table @var
@item score
a @code{<clutter-score>}

@item id
the id of the timeline to remove

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-remove-all  (self@tie{}@code{<clutter-score>})
@deffnx Method remove-all
@samp{clutter_score_remove_all} is deprecated and should not be used in
newly-written code.

Removes all the timelines inside @var{score}.

@table @var
@item score
a @code{<clutter-score>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-get-timeline  (self@tie{}@code{<clutter-score>}) (id_@tie{}@code{unsigned-long}) @result{}@tie{} (ret@tie{}@code{<clutter-timeline>})
@deffnx Method get-timeline
@samp{clutter_score_get_timeline} is deprecated and should not be used
in newly-written code.

Retrieves the @code{<clutter-timeline>} for @var{id} inside @var{score}.

@table @var
@item score
a @code{<clutter-score>}

@item id
the id of the timeline

@item ret
the requested timeline, or @samp{@code{#f}}. This function does not
increase the reference count on the returned @code{<clutter-timeline>}.

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-list-timelines  (self@tie{}@code{<clutter-score>}) @result{}@tie{} (ret@tie{}@code{gslist-of})
@deffnx Method list-timelines
@samp{clutter_score_list_timelines} is deprecated and should not be used
in newly-written code.

Retrieves a list of all the @code{<clutter-timelines>} managed by
@var{score}.

@table @var
@item score
a @code{<clutter-score>}

@item ret
a @code{<gs-list>} containing all the timelines in the score. This
function does not increase the reference count of the returned
timelines. Use @code{g-slist-free} on the returned list to deallocate
its resources.

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-start  (self@tie{}@code{<clutter-score>})
@deffnx Method start
@samp{clutter_score_start} is deprecated and should not be used in
newly-written code.

Starts the score.

@table @var
@item score
A @code{<clutter-score>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-pause  (self@tie{}@code{<clutter-score>})
@deffnx Method pause
@samp{clutter_score_pause} is deprecated and should not be used in
newly-written code.

Pauses a playing score @var{score}.

@table @var
@item score
a @code{<clutter-score>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-stop  (self@tie{}@code{<clutter-score>})
@deffnx Method stop
@samp{clutter_score_stop} is deprecated and should not be used in
newly-written code.

Stops and rewinds a playing @code{<clutter-score>} instance.

@table @var
@item score
A @code{<clutter-score>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-is-playing  (self@tie{}@code{<clutter-score>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method is-playing
@samp{clutter_score_is_playing} is deprecated and should not be used in
newly-written code.

Query state of a @code{<clutter-score>} instance.

@table @var
@item score
A @code{<clutter-score>}

@item ret
@samp{@code{#t}} if score is currently playing

@end table

Since 0.6

@end deffn

@deffn Function clutter-score-rewind  (self@tie{}@code{<clutter-score>})
@deffnx Method rewind
@samp{clutter_score_rewind} is deprecated and should not be used in
newly-written code.

Rewinds a @code{<clutter-score>} to its initial state.

@table @var
@item score
A @code{<clutter-score>}

@end table

Since 0.6

@end deffn


@c %end of fragment
