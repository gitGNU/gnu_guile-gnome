
@c %start of fragment

@deftp Class <gdk-display>
Derives from @code{<gobject>}.

This @code{<gobject>} class defines no properties, other than those defined by
its superclasses.

@end deftp

@defop Signal <gdk-display> closed  (arg0@tie{}@code{<gboolean>})
The ::closed signal is emitted when the connection to the windowing system for
@var{display} is closed.

Since 2.2

@end defop

@deffn Function gdk-display-open  (display_name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{<gdk-display>})
Opens a display.

@table @var
@item display-name
the name of the display to open

@item ret
a @code{<gdk-display>}, or @samp{@code{#f}} if the display could not be opened.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-default  @result{}@tie{} (ret@tie{}@code{<gdk-display>})
Gets the default @code{<gdk-display>}. This is a convenience function for:

@example 

  gdk_display_manager_get_default_display (gdk_display_manager_get ())
@end example

@table @var
@item ret
a @code{<gdk-display>}, or @samp{@code{#f}} if there is no default display.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-name  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{mchars})
@deffnx Method get-name
Gets the name of the display.

@table @var
@item display
a @code{<gdk-display>}

@item ret
a string representing the display name. This string is owned by GDK and should
not be modified or freed.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-n-screens  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{int})
@deffnx Method get-n-screens
Gets the number of screen managed by the @var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item ret
number of screens.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-screen  (self@tie{}@code{<gdk-display>}) (screen_num@tie{}@code{int}) @result{}@tie{} (ret@tie{}@code{<gdk-screen>})
@deffnx Method get-screen
Returns a screen object for one of the screens of the display.

@table @var
@item display
a @code{<gdk-display>}

@item screen-num
the screen number

@item ret
the @code{<gdk-screen>} object

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-default-screen  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{<gdk-screen>})
@deffnx Method get-default-screen
Get the default @code{<gdk-screen>} for @var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item ret
the default @code{<gdk-screen>} object for @var{display}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-pointer-ungrab  (self@tie{}@code{<gdk-display>}) (time_@tie{}@code{unsigned-int32})
@deffnx Method pointer-ungrab
Release any pointer grab.

@table @var
@item display
a @code{<gdk-display>}.

@item time
a timestap (e.g. @samp{GDK_CURRENT_TIME}).

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-keyboard-ungrab  (self@tie{}@code{<gdk-display>}) (time_@tie{}@code{unsigned-int32})
@deffnx Method keyboard-ungrab
Release any keyboard grab

@table @var
@item display
a @code{<gdk-display>}.

@item time
a timestap (e.g @code{<gdk-current-time>}).

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-pointer-is-grabbed  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method pointer-is-grabbed
Test if the pointer is grabbed.

@table @var
@item display
a @code{<gdk-display>}

@item ret
@samp{@code{#t}} if an active X pointer grab is in effect

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-beep  (self@tie{}@code{<gdk-display>})
@deffnx Method beep
Emits a short beep on @var{display}

@table @var
@item display
a @code{<gdk-display>}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-sync  (self@tie{}@code{<gdk-display>})
@deffnx Method sync
Flushes any requests queued for the windowing system and waits until all
requests have been handled. This is often used for making sure that the display
is synchronized with the current state of the program. Calling
@code{gdk-display-sync} before @code{gdk-error-trap-pop} makes sure that any
errors generated from earlier requests are handled before the error trap is
removed.

This is most useful for X11. On windowing systems where requests are handled
synchronously, this function will do nothing.

@table @var
@item display
a @code{<gdk-display>}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-flush  (self@tie{}@code{<gdk-display>})
@deffnx Method flush
Flushes any requests queued for the windowing system; this happens automatically
when the main loop blocks waiting for new events, but if your application is
drawing without returning control to the main loop, you may need to call this
function explicitely. A common case where this function needs to be called is
when an application is executing drawing commands from a thread other than the
thread where the main loop is running.

This is most useful for X11. On windowing systems where requests are handled
synchronously, this function will do nothing.

@table @var
@item display
a @code{<gdk-display>}

@end table

Since 2.4

@end deffn

@deffn Function gdk-display-close  (self@tie{}@code{<gdk-display>})
@deffnx Method close
Closes the connection to the windowing system for the given display, and cleans
up associated resources.

@table @var
@item display
a @code{<gdk-display>}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-list-devices  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{glist-of})
@deffnx Method list-devices
Returns the list of available input devices attached to @var{display}. The list
is statically allocated and should not be freed.

@table @var
@item display
a @code{<gdk-display>}

@item ret
a list of @code{<gdk-device>}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-event  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{<gdk-event>})
@deffnx Method get-event
Gets the next @code{<gdk-event>} to be processed for @var{display}, fetching
events from the windowing system if necessary.

@table @var
@item display
a @code{<gdk-display>}

@item ret
the next @code{<gdk-event>} to be processed, or @samp{@code{#f}} if no events
are pending. The returned @code{<gdk-event>} should be freed with
@code{gdk-event-free}.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-peek-event  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{<gdk-event>})
@deffnx Method peek-event
Gets a copy of the first @code{<gdk-event>} in the @var{display}'s event queue,
without removing the event from the queue. (Note that this function will not get
more events from the windowing system. It only checks the events that have
already been moved to the GDK event queue.)

@table @var
@item display
a @code{<gdk-display>}

@item ret
a copy of the first @code{<gdk-event>} on the event queue, or @samp{@code{#f}}
if no events are in the queue. The returned @code{<gdk-event>} should be freed
with @code{gdk-event-free}.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-put-event  (self@tie{}@code{<gdk-display>}) (event@tie{}@code{<gdk-event>})
@deffnx Method put-event
Appends a copy of the given event onto the front of the event queue for
@var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item event
a @code{<gdk-event>}.

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-set-double-click-time  (self@tie{}@code{<gdk-display>}) (msec@tie{}@code{unsigned-int})
@deffnx Method set-double-click-time
Sets the double click time (two clicks within this time interval count as a
double click and result in a @code{<gdk-2button-press>} event). Applications
should @emph{not} set this, it is a global user-configured setting.

@table @var
@item display
a @code{<gdk-display>}

@item msec
double click time in milliseconds (thousandths of a second)

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-pointer  (self@tie{}@code{<gdk-display>}) (screen@tie{}@code{<gdk-screen**>}) (mask@tie{}@code{<gdk-modifier-type*>}) @result{}@tie{} (x@tie{}@code{int}) (y@tie{}@code{int})
@deffnx Method get-pointer
Gets the current location of the pointer and the current modifier mask for a
given display.

@table @var
@item display
a @code{<gdk-display>}

@item screen
location to store the screen that the cursor is on, or @samp{@code{#f}}.

@item x
location to store root window X coordinate of pointer, or @samp{@code{#f}}.

@item y
location to store root window Y coordinate of pointer, or @samp{@code{#f}}.

@item mask
location to store current modifier mask, or @samp{@code{#f}}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-get-window-at-pointer  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{<gdk-window*>}) (win_x@tie{}@code{int}) (win_y@tie{}@code{int})
@deffnx Method get-window-at-pointer
Obtains the window underneath the mouse pointer, returning the location of that
window in @var{win-x}, @var{win-y} for @var{screen}. Returns @samp{@code{#f}} if
the window under the mouse pointer is not known to GDK (for example, belongs to
another application).

@table @var
@item display
a @code{<gdk-display>}

@item win-x
return location for origin of the window under the pointer

@item win-y
return location for origin of the window under the pointer

@item ret
the window under the mouse pointer, or @samp{@code{#f}}

@end table

Since 2.2

@end deffn

@deffn Function gdk-display-warp-pointer  (self@tie{}@code{<gdk-display>}) (screen@tie{}@code{<gdk-screen>}) (x@tie{}@code{int}) (y@tie{}@code{int})
@deffnx Method warp-pointer
Warps the pointer of @var{display} to the point @var{x},@var{y} on the screen
@var{screen}, unless the pointer is confined to a window by a grab, in which
case it will be moved as far as allowed by the grab. Warping the pointer creates
events as if the user had moved the mouse instantaneously to the destination.

Note that the pointer should normally be under the control of the user. This
function was added to cover some rare use cases like keyboard navigation support
for the color picker in the @code{<gtk-color-selection-dialog>}.

@table @var
@item display
a @code{<gdk-display>}

@item screen
the screen of @var{display} to warp the pointer to

@item x
the x coordinate of the destination

@item y
the y coordinate of the destination

@end table

Since 2.8

@end deffn

@deffn Function gdk-display-supports-cursor-color  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method supports-cursor-color
Returns @samp{@code{#t}} if multicolored cursors are supported on @var{display}.
Otherwise, cursors have only a forground and a background color.

@table @var
@item display
a @code{<gdk-display>}

@item ret
whether cursors can have multiple colors.

@end table

Since 2.4

@end deffn

@deffn Function gdk-display-supports-cursor-alpha  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method supports-cursor-alpha
Returns @samp{@code{#t}} if cursors can use an 8bit alpha channel on
@var{display}. Otherwise, cursors are restricted to bilevel alpha (i.e. a mask).

@table @var
@item display
a @code{<gdk-display>}

@item ret
whether cursors can have alpha channels.

@end table

Since 2.4

@end deffn

@deffn Function gdk-display-get-default-cursor-size  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
@deffnx Method get-default-cursor-size
Returns the default size to use for cursors on @var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item ret
the default cursor size.

@end table

Since 2.4

@end deffn

@deffn Function gdk-display-get-maximal-cursor-size  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (width@tie{}@code{unsigned-int}) (height@tie{}@code{unsigned-int})
@deffnx Method get-maximal-cursor-size
Gets the maximal size to use for cursors on @var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item width
the return location for the maximal cursor width

@item height
the return location for the maximal cursor height

@end table

Since 2.4

@end deffn

@deffn Function gdk-display-get-default-group  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{<gdk-window*>})
@deffnx Method get-default-group
Returns the default group leader window for all toplevel windows on
@var{display}. This window is implicitly created by GDK. See
@code{gdk-window-set-group}.

@table @var
@item display
a @code{<gdk-display>}

@item ret
The default group leader window for @var{display}

@end table

Since 2.4

@end deffn

@deffn Function gdk-display-supports-shapes  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method supports-shapes
Returns @samp{@code{#t}} if @code{gdk-window-shape-combine-mask} can be used to
create shaped windows on @var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item ret
@samp{@code{#t}} if shaped windows are supported

@end table

Since 2.10

@end deffn

@deffn Function gdk-display-supports-input-shapes  (self@tie{}@code{<gdk-display>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method supports-input-shapes
Returns @samp{@code{#t}} if @code{gdk-window-input-shape-combine-mask} can be
used to modify the input shape of windows on @var{display}.

@table @var
@item display
a @code{<gdk-display>}

@item ret
@samp{@code{#t}} if windows with modified input shape are supported

@end table

Since 2.10

@end deffn


@c %end of fragment
