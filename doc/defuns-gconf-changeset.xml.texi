
@c %start of fragment

@deffn Function gconf-engine-commit-change-set  (self@tie{}@code{<g-conf-engine*>}) (cs@tie{}@code{<g-conf-change-set*>}) (remove_committed@tie{}@code{bool}) @result{}@tie{} (ret@tie{}@code{bool})
Applies the changes in the change set to the @code{<g-conf-engine>} passed as
the first argument. If @var{remove-committed} is , then any
successfully-committed changes are removed from the change set. If
@var{remove-committed} is , the @code{<g-conf-change-set>} is left unmodified.

If any set or unset operation results in an error, then processing terminates
and the error is returned in @var{err} (unless @var{err} was ). If
@var{remove-committed} was , then all the changes committed before the error
occurred will have been removed from the set. If any error occurs, is returned.

@table @var
@item conf
a @code{<g-conf-engine>}.

@item cs
a @code{<g-conf-change-set>}.

@item remove-committed
whether to remove successfully-committed changes from the set

@item err
the return location for an allocated @code{<g-error>}, or to ignore errors.

@item ret
on success, if an error occurs.

@end table

@end deffn

@deffn Function gconf-engine-reverse-change-set  (self@tie{}@code{<g-conf-engine*>}) (cs@tie{}@code{<g-conf-change-set*>}) @result{}@tie{} (ret@tie{}@code{<g-conf-change-set*>})
Creates a change set that would reverse @var{cs}. That is, for each change in
@var{cs}, save the current state of that key in the returned change set.

@table @var
@item conf
a @code{<g-conf-engine>}.

@item cs
the @code{<g-conf-change-set>} to be reverted.

@item err
the return location for an allocated @code{<g-error>}, or to ignore errors.

@item ret
the modified @code{<g-conf-change-set>}.

@end table

@end deffn

@deffn Function gconf-change-set-new  @result{}@tie{} (ret@tie{}@code{<g-conf-change-set*>})
Creates a new, empty @code{<g-conf-change-set>}. The caller assumes one
reference count, and must call @code{gconf-change-set-unref} eventually.

@table @var
@item ret
a new @code{<g-conf-change-set>}.

@end table

@end deffn

@deffn Function gconf-change-set-clear  (self@tie{}@code{<g-conf-change-set*>})
Clears all changes from a @code{<g-conf-change-set>}, so that committing the
change set would have no effect.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@end table

@end deffn

@deffn Function gconf-change-set-size  (self@tie{}@code{<g-conf-change-set*>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
Returns the size of the changeset, a @code{<guint>} value.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item ret
the size, a @code{<guint>} value.

@end table

@end deffn

@deffn Function gconf-change-set-remove  (self@tie{}@code{<g-conf-change-set*>}) (key@tie{}@code{mchars})
Removes a change from a @code{<g-conf-change-set>}. The key given as the
@var{key} argument will not be modified if this change set is committed. If
@var{key} is not in the change set, this function has no effect.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item key
key to remove from the change set.

@end table

@end deffn

@deffn Function gconf-change-set-check-value  (self@tie{}@code{<g-conf-change-set*>}) (key@tie{}@code{mchars}) (value_retloc@tie{}@code{<g-conf-value**>}) @result{}@tie{} (ret@tie{}@code{bool})
Looks up the hash table associated with the @code{<g-conf-change-set>} for the
key @var{key}. If the key is found , the value is set in value_retloc.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item key
the key to be searched in the changeset.

@item value-retloc
a @code{<g-conf-value>} ** to hold the key, if found.

@item ret
on finding the key, if key is not found.

@end table

@end deffn

@deffn Function gconf-change-set-set  (self@tie{}@code{<g-conf-change-set*>}) (key@tie{}@code{mchars}) (value@tie{}@code{<g-conf-value>})
Adds a "set" operation to a change set. This function is similar to
@code{gconf-engine-set}, except that no errors can occur (errors occur later,
when you try to commit the change set).

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item key
the key to change.

@item value
the value to change the key to.

@end table

@end deffn

@deffn Function gconf-change-set-set-nocopy  (self@tie{}@code{<g-conf-change-set*>}) (key@tie{}@code{mchars}) (value@tie{}@code{<g-conf-value>})
Like @code{gconf-change-set-set}, except that the @code{<g-conf-change-set>}
takes ownership of the @code{<g-conf-value>}. You should not use the value
again. It will be destroyed when the change is removed from the
@code{<g-conf-change-set>}, the change is modified, or the
@code{<g-conf-change-set>} is destroyed.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item key
the key to change.

@item value
the new value of @var{key}.

@end table

@end deffn

@deffn Function gconf-change-set-unset  (self@tie{}@code{<g-conf-change-set*>}) (key@tie{}@code{mchars})
Adds an "unset" operation to a @code{<g-conf-change-set>}. This function
schedules a @code{gconf-engine-unset}.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item key
the key to unset.

@end table

@end deffn

@deffn Function gconf-change-set-set-user-data  (self@tie{}@code{<g-conf-change-set*>}) (data@tie{}@code{<gpointer>}) (dnotify@tie{}@code{<g-destroy-notify>})
Sets the user_data and the destroy notification function fields of the
@code{<g-conf-change-set>}.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item data
a @code{<gpointer>}.

@item dnotify
a pointer to the function to be called during destroy.

@end table

@end deffn

@deffn Function gconf-change-set-get-user-data  (self@tie{}@code{<g-conf-change-set*>}) @result{}@tie{} (ret@tie{}@code{<gpointer>})
Returns the user_data field of the @code{<g-conf-change-set>}.

@table @var
@item cs
a @code{<g-conf-change-set>}.

@item ret
a pointer to the user_data.

@end table

@end deffn


@c %end of fragment
