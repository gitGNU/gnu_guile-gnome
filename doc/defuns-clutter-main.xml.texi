
@c %start of fragment

@deffn Function clutter-main 
Starts the Clutter mainloop.

@end deffn

@deffn Function clutter-main-quit 
Terminates the Clutter mainloop.

@end deffn

@deffn Function clutter-main-level  @result{}@tie{} (ret@tie{}@code{int})
Retrieves the depth of the Clutter mainloop.

@table @var
@item ret
The level of the mainloop.

@end table

@end deffn

@deffn Function clutter-get-debug-enabled  @result{}@tie{} (ret@tie{}@code{bool})
Check if clutter has debugging turned on.

@table @var
@item ret
TRUE if debugging is turned on, FALSE otherwise.

@end table

@end deffn

@deffn Function clutter-get-show-fps  @result{}@tie{} (ret@tie{}@code{bool})
Returns whether Clutter should print out the frames per second on the console.
You can enable this setting either using the @samp{CLUTTER_SHOW_FPS} environment
variable or passing the @samp{--clutter-show-fps} command line argument. *

@table @var
@item ret
@samp{@code{#t}} if Clutter should show the FPS.

@end table

Since 0.4

@end deffn

@deffn Function clutter-get-timestamp  @result{}@tie{} (ret@tie{}@code{unsigned-long})
Returns the approximate number of microseconds passed since clutter was
intialised.

@table @var
@item ret
Number of microseconds since @code{clutter-init} was called.

@end table

@end deffn

@deffn Function clutter-get-actor-by-gid  (id@tie{}@code{unsigned-int32}) @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
Retrieves the @code{<clutter-actor>} with @var{id}.

@table @var
@item id
a @code{<clutter-actor>} ID.

@item ret
the actor with the passed id or @samp{@code{#f}}. The returned actor does not
have its reference count increased.

@end table

Since 0.6

@end deffn

@deffn Function clutter-set-default-frame-rate  (frames_per_sec@tie{}@code{unsigned-int})
Sets the default frame rate to be used when creating @code{<clutter-timeline>}s

@table @var
@item frames-per-sec
the new default frame rate

@end table

Since 0.6

@end deffn

@deffn Function clutter-get-default-frame-rate  @result{}@tie{} (ret@tie{}@code{unsigned-int})
Retrieves the default frame rate used when creating @code{<clutter-timeline>}s.

This value is also used to compute the default frequency of motion events.

@table @var
@item ret
the default frame rate

@end table

Since 0.6

@end deffn

@deffn Function clutter-set-motion-events-enabled  (enable@tie{}@code{bool})
Sets whether per-actor motion events should be enabled or not (the default is to
enable them).

If @var{enable} is @samp{@code{#f}} the following events will not work:

@itemize 
@item
@item
@item
@end itemize

ClutterActor::motion-event, unless on the @code{<clutter-stage>}

ClutterActor::enter-event

ClutterActor::leave-event

@table @var
@item enable
@samp{@code{#t}} to enable per-actor motion events

@end table

Since 0.6

@end deffn

@deffn Function clutter-get-motion-events-enabled  @result{}@tie{} (ret@tie{}@code{bool})
Gets whether the per-actor motion events are enabled.

@table @var
@item ret
@samp{@code{#t}} if the motion events are enabled

@end table

Since 0.6

@end deffn

@deffn Function clutter-set-motion-events-frequency  (frequency@tie{}@code{unsigned-int})
Sets the motion events frequency. Setting this to a non-zero value will override
the default setting, so it should be rarely used.

Motion events are delivered from the default backend to the stage and are used
to generate the enter/leave events pair. This might lead to a performance
penalty due to the way the actors are identified. Using this function is
possible to reduce the frequency of the motion events delivery to the stage.

@table @var
@item frequency
the number of motion events per second, or 0 for the default value

@end table

Since 0.6

@end deffn

@deffn Function clutter-get-motion-events-frequency  @result{}@tie{} (ret@tie{}@code{unsigned-int})
Retrieves the number of motion events per second that are delivered to the
stage.

See @code{clutter-set-motion-events-frequency}.

@table @var
@item ret
the number of motion events per second

@end table

Since 0.6

@end deffn

@deffn Function clutter-clear-glyph-cache 
Clears the internal cache of glyphs used by the Pango renderer. This will free
up some memory and GL texture resources. The cache will be automatically
refilled as more text is drawn.

Since 0.8

@end deffn

@deffn Function clutter-set-use-mipmapped-text  (value@tie{}@code{bool})
Sets whether subsequent text rendering operations will use mipmapped textures or
not. Using mipmapped textures will improve the quality for scaled down text but
will use more texture memory.

@table @var
@item value
@samp{@code{#t}} to enable mipmapping or @samp{@code{#f}} to disable.

@end table

Since 0.8

@end deffn

@deffn Function clutter-get-use-mipmapped-text  @result{}@tie{} (ret@tie{}@code{bool})
Gets whether mipmapped textures are used in text operations. See
@code{clutter-set-use-mipmapped-text}.

@table @var
@item ret
@samp{@code{#t}} if text operations should use mipmapped textures

@end table

Since 0.8

@end deffn

@deffn Function clutter-get-keyboard-grab  @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
Queries the current keyboard grab of clutter.

@table @var
@item ret
the actor currently holding the keyboard grab, or NULL if there is no grab.

@end table

Since 0.6

@end deffn

@deffn Function clutter-get-pointer-grab  @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
Queries the current pointer grab of clutter.

@table @var
@item ret
the actor currently holding the pointer grab, or NULL if there is no grab.

@end table

Since 0.6

@end deffn

@deffn Function clutter-grab-keyboard  (actor@tie{}@code{<clutter-actor>})
Grabs keyboard events, after the grab is done keyboard events ("key-press-event"
and "key-release-event") are delivered to this actor directly. The source set in
the event will be the actor that would have received the event if the keyboard
grab was not in effect.

@table @var
@item actor
a @code{<clutter-actor>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-grab-pointer  (actor@tie{}@code{<clutter-actor>})
Grabs pointer events, after the grab is done all pointer related events (press,
motion, release, enter, leave and scroll) are delivered to this actor directly.
The source set in the event will be the actor that would have received the event
if the pointer grab was not in effect.

@table @var
@item actor
a @code{<clutter-actor>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-ungrab-keyboard 
Removes an existing grab of the keyboard.

Since 0.6

@end deffn

@deffn Function clutter-ungrab-pointer 
Removes an existing grab of the pointer.

Since 0.6

@end deffn

@deffn Function clutter-do-event  (event@tie{}@code{<clutter-event>})
Processes an event. This function should never be called by applications.

@table @var
@item event
a @code{<clutter-event>}.

@end table

Since 0.4

@end deffn


@c %end of fragment
