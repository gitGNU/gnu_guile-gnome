;;;; -*- scheme -*-
;;;; guile-gnome
;;;; Copyright (C) 2004 Jan Nieuwenhuizen <janneke@gnu.org>
;;;;                    Andy Wingo <wingo at pobox dot com>

;;;; This program is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU General Public License as
;;;; published by the Free Software Foundation; either version 2 of
;;;; the License, or (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, contact:
;;;;
;;;; Free Software Foundation           Voice:  +1-617-542-5942
;;;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;;;; Boston, MA  02111-1307,  USA       gnu@gnu.org


(define-boxed PathDef
  (c-name "GnomeCanvasPathDef")
  (gtype-id "GNOME_TYPE_CANVAS_PATH_DEF"))

;; I'm not sure this wrapping for affine funtctions is the Right Way,
;; but it works.  Maybe we should have a plain affine maker: double[6]
;; list_to_affine (SCM) or have affine_absolute take a SCM list
;; directly?
(define-method affine_absolute
  (of-object "GnomeCanvasItem")
  (c-name "_wrap_gnome_canvas_item_affine_absolute")
  (overrides "gnome_canvas_item_affine_absolute")
  (return-type "void")
  (parameters
    '("double" "x1")
    '("double" "y2")
    '("double" "x2")
    '("double" "y2")
    '("double" "x3")
    '("double" "y3")))

(define-method affine_relative
  (of-object "GnomeCanvasItem")
  (c-name "_wrap_gnome_canvas_item_affine_relative")
  (overrides "gnome_canvas_item_affine_relative")
  (return-type "void")
  (parameters
    '("double" "x1")
    '("double" "y2")
    '("double" "x2")
    '("double" "y2")
    '("double" "x3")
    '("double" "y3")))

(define-function
  gnome_canvas_new_aa
  (is-constructor-of GnomeCanvas)
  (c-name "gnome_canvas_new_aa")
  (overrides "gnome_canvas_new_aa")
  (return-type "GtkWidget*"))

(define-function
  gnome_canvas_path_def_concat
  (c-name "gnome_canvas_path_def_concat")
  (overrides "gnome_canvas_path_def_concat")
  (return-type "GnomeCanvasPathDef*")
  (parameters
    '("const-GSList*-of-GnomeCanvasPathDef*" "list")))

(define-method
  get_scroll_region
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_scroll_region")
  (overrides "gnome_canvas_get_scroll_region")
  (return-type "none")
  (parameters
    '("double*" "x1")
    '("double*" "y1")
    '("double*" "x2")
    '("double*" "y2")))

(define-method
  split
  (of-object "GnomeCanvasPathDef")
  (c-name "gnome_canvas_path_def_split")
  (overrides "gnome_canvas_path_def_split")
  (return-type "GSList*-of-GnomeCanvasPathDef*"))

(ignore-glob
 ;; if you need these, use gtype-from-name or gtype-class->type
 "*_get_type"
 "_*"
 "*_ref"
 "*_unref"
 "*_copy"
 "*_free"
 "*_newv"
 "*_setv"
 "*_foreach"
 "*_affine*"
 "*_valist"
 "*_update_svp*" ;; use of ArtVSP**
 )

(ignore
 "gnome_canvas_item_construct"  ;; use of va-list
 "gnome_canvas_points_new" ;; use (make <gnome-canvas-points> #:value #(x y z))
 ;; ignore functions that deal in libart types
 "gnome_canvas_path_def_bpath"
 "gnome_canvas_path_def_currentpoint"
 "gnome_canvas_path_def_last_bpath"
 "gnome_canvas_path_def_first_bpath"

 "gnome_canvas_cap_gdk_to_art"
 "gnome_canvas_join_gdk_to_art"
 "gnome_canvas_request_redraw_svp"
 "gnome_canvas_request_redraw_uta"

 "gnome_canvas_path_def_new_from_bpath" ; ArtBpath*
 "gnome_canvas_path_def_new_from_static_bpath" ; ArtBpath*
 "gnome_canvas_path_def_new_from_foreign_bpath" ; ArtBpath*
 "gnome_canvas_item_request_redraw_svp" ; ArtSVP*
 "gnome_canvas_buf_ensure_buf" ; GnomeCanvasBuf*

 "gnome_canvas_render_svp"

 "gnome_canvas_item_i2c_affine"
 "gnome_canvas_item_i2w_affine"
 "gnome_canvas_item_w2c_affine"
 )
