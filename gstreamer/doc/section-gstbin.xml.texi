
@c %start of fragment

@node GstBin
@chapter GstBin
Base class and element that can contain other elements

@section Overview
@code{<gst-bin>} is an element that can contain other @code{<gst-element>},
allowing them to be managed as a group. Pads from the child elements can be
ghosted to the bin, see @code{<gst-ghost-pad>}. This makes the bin look like any
other elements and enables creation of higher-level abstraction elements.

A new @code{<gst-bin>} is created with @code{gst-bin-new}. Use a
@code{<gst-pipeline>} instead if you want to create a toplevel bin because a
normal bin doesn't have a bus or handle clock distribution of its own.

After the bin has been created you will typically add elements to it with
@code{gst-bin-add}. You can remove elements with @code{gst-bin-remove}.

An element can be retrieved from a bin with @code{gst-bin-get-by-name}, using
the elements name. @code{gst-bin-get-by-name-recurse-up} is mainly used for
internal purposes and will query the parent bins when the element is not found
in the current bin.

An iterator of elements in a bin can be retrieved with
@code{gst-bin-iterate-elements}. Various other iterators exist to retrieve the
elements in a bin.

@code{gst-object-unref} is used to drop your reference to the bin.

The element-added signal is fired whenever a new element is added to the bin.
Likewise the element-removed signal is fired whenever an element is removed from
the bin.

@section Notes
A @code{<gst-bin>} internally intercepts every @code{<gst-message>} posted by
its children and implements the following default behaviour for each of them:

@table @var
@item GST_MESSAGE_SEGMENT_START

@c %start of fragment


@c %end of fragment
@item GST_MESSAGE_SEGMENT_DONE

@c %start of fragment


@c %end of fragment
@item GST_MESSAGE_DURATION

@c %start of fragment


@c %end of fragment
@item GST_MESSAGE_CLOCK_LOST

@c %start of fragment


@c %end of fragment
@item GST_MESSAGE_CLOCK_PROVIDE

@c %start of fragment


@c %end of fragment
@item OTHERS

@c %start of fragment


@c %end of fragment
@end table

This message is only posted by sinks in the PLAYING state. If all sinks posted
the EOS message, this bin will post and EOS message upwards.

just collected and never forwarded upwards. The messages are used to decide when
all elements have completed playback of their segment.

Is posted by @code{<gst-bin>} when all elements that posted a SEGMENT_START have
posted a SEGMENT_DONE.

Is posted by an element that detected a change in the stream duration. The
default bin behaviour is to clear any cached duration values so that the next
duration query will perform a full duration recalculation. The duration change
is posted to the application so that it can refetch the new duration with a
duration query.

This message is posted by an element when it can no longer provide a clock. The
default bin behaviour is to check if the lost clock was the one provided by the
bin. If so and the bin is currently in the PLAYING state, the message is
forwarded to the bin parent. This message is also generated when a clock
provider is removed from the bin. If this message is received by the
application, it should PAUSE the pipeline and set it back to PLAYING to force a
new clock distribution.

This message is generated when an element can provide a clock. This mostly
happens when a new clock provider is added to the bin. The default behaviour of
the bin is to mark the currently selected clock as dirty, which will perform a
clock recalculation the next time the bin is asked to provide a clock. This
message is never sent tot the application but is forwarded to the parent of the
bin.

posted upwards.

A @code{<gst-bin>} implements the following default behaviour for answering to a
@code{<gst-query:>}

@table @var
@item GST_QUERY_POSITION

@c %start of fragment


@c %end of fragment
@item OTHERS

@c %start of fragment


@c %end of fragment
@end table

If the query has been asked before with the same format and the bin is a
toplevel bin (ie. has no parent), use the cached previous value. If no previous
value was cached, the query is sent to all sink elements in the bin and the
MAXIMUM of all values is returned. If the bin is a toplevel bin the value is
cached. If no sinks are available in the bin, the query fails.

The query is sent to all sink elements in the bin and the MAXIMUM of all values
is returned. If no sinks are available in the bin, the query fails.

the query is forwarded to all sink elements, the result of the first sink that
answers the query successfully is returned. If no sink is in the bin, the query
fails.

A @code{<gst-bin>} will by default forward any event sent to it to all sink
elements. If all the sinks return TRUE, the bin will also return TRUE, else
FALSE is returned. If no sinks are in the bin, the event handler will return
TRUE.

Last reviewed on 2006-04-28 (0.10.6)

@section Usage
@include defuns-gstbin.xml.texi

@c %end of fragment
