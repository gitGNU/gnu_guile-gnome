
@c %start of fragment

@node GstCaps
@chapter GstCaps
Structure describing sets of media formats

@section Overview
Caps (capabilities) are lighweight refcounted objects describing media types.
They are composed of an array of @code{<gst-structure>}.

Caps are exposed on @code{<gst-pad-template>} to describe all possible types a
given pad can handle. They are also stored in the @code{<gst-registry>} along
with a description of the @code{<gst-element>}.

Caps are exposed on the element pads using the @code{gst-pad-get-caps} pad
function. This function describes the possible types that the pad can handle or
produce at runtime.

Caps are also attached to buffers to describe to content of the data pointed to
by the buffer with @code{gst-buffer-set-caps}. Caps attached to a
@code{<gst-buffer>} allow for format negotiation upstream and downstream.

A @code{<gst-caps>} can be constructed with the following code fragment:

@c (title "Creating caps")
@example 

 GstCaps *caps;
 caps = gst_caps_new_simple ("video/x-raw-yuv",
      "format", GST_TYPE_FOURCC, GST_MAKE_FOURCC ('I', '4', '2', '0'),
      "framerate", GST_TYPE_FRACTION, 25, 1,
      "pixel-aspect-ratio", GST_TYPE_FRACTION, 1, 1,
      "width", G_TYPE_INT, 320,
      "height", G_TYPE_INT, 240,
      NULL);
 
@end example

A @code{<gst-caps>} is fixed when it has no properties with ranges or lists. Use
@code{gst-caps-is-fixed} to test for fixed caps. Only fixed caps can be set on a
@code{<gst-pad>} or @code{<gst-buffer>}.

Various methods exist to work with the media types such as subtracting or
intersecting.

Last reviewed on 2007-02-13 (0.10.10)

@section Usage
@include defuns-gstcaps.xml.texi

@c %end of fragment
