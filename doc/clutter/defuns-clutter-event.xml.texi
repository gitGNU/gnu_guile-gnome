
@c %start of fragment

@deffn Function clutter-event-new  (type@tie{}@code{<clutter-event-type>}) @result{}@tie{} (ret@tie{}@code{<clutter-event>})
Creates a new @code{<clutter-event>} of the specified type.

@table @var
@item type
The type of event.

@item ret
A newly allocated @code{<clutter-event>}.

@end table

@end deffn

@deffn Function clutter-event-type  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-event-type>})
@deffnx Method type
Retrieves the type of the event.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a @code{<clutter-event-type>}

@end table

@end deffn

@deffn Function clutter-event-get-coords  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (x@tie{}@code{float}) (y@tie{}@code{float})
@deffnx Method get-coords
Retrieves the coordinates of @var{event} and puts them into @var{x} and
@var{y}.

@table @var
@item event
a @code{<clutter-event>}

@item x
return location for the X coordinate, or @samp{@code{#f}}.

@item y
return location for the Y coordinate, or @samp{@code{#f}}.

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-state  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-modifier-type>})
@deffnx Method get-state
Retrieves the modifier state of the event.

@table @var
@item event
a @code{<clutter-event>}

@item ret
the modifier state parameter, or 0

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-time  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
@deffnx Method get-time
Retrieves the time of the event.

@table @var
@item event
a @code{<clutter-event>}

@item ret
the time of the event, or @samp{CLUTTER_CURRENT_TIME}

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-source  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
@deffnx Method get-source
Retrieves the source @code{<clutter-actor>} the event originated from,
or NULL if the event has no source.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a @code{<clutter-actor>}.

@end table

Since 0.6

@end deffn

@deffn Function clutter-event-get-stage  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-stage>})
@deffnx Method get-stage
Retrieves the source @code{<clutter-stage>} the event originated for, or
@samp{@code{#f}} if the event has no stage.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a @code{<clutter-stage>}.

@end table

Since 0.8

@end deffn

@deffn Function clutter-event-get-flags  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-event-flags>})
@deffnx Method get-flags
Retrieves the @code{<clutter-event-flags>} of @var{event}

@table @var
@item event
a @code{<clutter-event>}

@item ret
the event flags

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get  @result{}@tie{} (ret@tie{}@code{<clutter-event>})
Pops an event off the event queue. Applications should not need to call
this.

@table @var
@item ret
A @code{<clutter-event>} or NULL if queue empty

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-peek  @result{}@tie{} (ret@tie{}@code{<clutter-event>})
Returns a pointer to the first event from the event queue but does not
remove it.

@table @var
@item ret
A @code{<clutter-event>} or NULL if queue empty.

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-put  (self@tie{}@code{<clutter-event>})
@deffnx Method put
Puts a copy of the event on the back of the event queue. The event will
have the @samp{CLUTTER_EVENT_FLAG_SYNTHETIC} flag set. If the source is
set event signals will be emitted for this source and capture/bubbling
for its ancestors. If the source is not set it will be generated by
picking or use the actor that currently has keyboard focus

@table @var
@item event
a @code{<clutter-event>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-events-pending  @result{}@tie{} (ret@tie{}@code{bool})
Checks if events are pending in the event queue.

@table @var
@item ret
TRUE if there are pending events, FALSE otherwise.

@end table

Since 0.4

@end deffn

@deffn Function clutter-event-get-button  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
@deffnx Method get-button
Retrieves the button number of @var{event}

@table @var
@item event
a @code{<clutter-event>} of type @samp{CLUTTER_BUTTON_PRESS} or of type
@samp{CLUTTER_BUTTON_RELEASE}

@item ret
the button number

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get-click-count  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
@deffnx Method get-click-count
Retrieves the number of clicks of @var{event}

@table @var
@item event
a @code{<clutter-event>} of type @samp{CLUTTER_BUTTON_PRESS} or of type
@samp{CLUTTER_BUTTON_RELEASE}

@item ret
the click count

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get-key-symbol  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int})
@deffnx Method get-key-symbol
Retrieves the key symbol of @var{event}

@table @var
@item event
a @code{<clutter-event>} of type @samp{CLUTTER_KEY_PRESS} or of type
@samp{CLUTTER_KEY_RELEASE}

@item ret
the key symbol representing the key

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get-key-code  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int16})
@deffnx Method get-key-code
Retrieves the keycode of the key that caused @var{event}

@table @var
@item event
a @code{<clutter-event>} of type @samp{CLUTTER_KEY_PRESS} or of type
@samp{CLUTTER_KEY_RELEASE}

@item ret
The keycode representing the key

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get-key-unicode  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
@deffnx Method get-key-unicode
Retrieves the unicode value for the key that caused @var{keyev}.

@table @var
@item event
A @code{<clutter-key-event>}

@item ret
The unicode value representing the key

@end table

@end deffn

@deffn Function clutter-keysym-to-unicode  (keyval@tie{}@code{unsigned-int}) @result{}@tie{} (ret@tie{}@code{unsigned-int32})
Convert from a Clutter key symbol to the corresponding ISO10646
(Unicode) character.

@table @var
@item keyval
a key symbol

@item ret
a Unicode character, or 0 if there is no corresponding character.

@end table

@end deffn

@deffn Function clutter-event-get-related  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-actor>})
@deffnx Method get-related
Retrieves the related actor of a crossing event.

@table @var
@item event
a @code{<clutter-event>} of type @samp{CLUTTER_ENTER} or of type
@samp{CLUTTER_LEAVE}

@item ret
the related @code{<clutter-actor>}, or @samp{@code{#f}}.

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-set-device  (self@tie{}@code{<clutter-event>}) (device@tie{}@code{<clutter-input-device*>})
@deffnx Method set-device
Sets the device for @var{event}.

@table @var
@item event
a @code{<clutter-event>}

@item device
a @code{<clutter-input-device>}

@end table

Since 1.6

@end deffn

@deffn Function clutter-event-get-device  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-input-device*>})
@deffnx Method get-device
Retrieves the @code{<clutter-input-device>} for the event.

The @code{<clutter-input-device>} structure is completely opaque and
should be cast to the platform-specific implementation.

@table @var
@item event
a @code{<clutter-event>}

@item ret
the @code{<clutter-input-device>} or @samp{@code{#f}}. The returned
device is owned by the @code{<clutter-event>} and it should not be
unreferenced.

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get-device-id  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{int})
@deffnx Method get-device-id
Retrieves the events device id if set.

@table @var
@item event
a clutter event

@item ret
A unique identifier for the device or -1 if the event has no specific
device set.

@end table

@end deffn

@deffn Function clutter-event-get-device-type  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-input-device-type>})
@deffnx Method get-device-type
Retrieves the type of the device for @var{event}

@table @var
@item event
a @code{<clutter-event>}

@item ret
the @code{<clutter-input-device-type>} for the device, if any is set

@end table

Since 1.0

@end deffn

@deffn Function clutter-event-get-source-device  (self@tie{}@code{<clutter-event>}) @result{}@tie{} (ret@tie{}@code{<clutter-input-device*>})
@deffnx Method get-source-device
Retrieves the hardware device that originated the event.

If you need the virtual device, use @code{clutter-event-get-device}.

If no hardware device originated this event, this function will return
the same device as @code{clutter-event-get-device}.

@table @var
@item event
a @code{<clutter-event>}

@item ret
a pointer to a @code{<clutter-input-device>} or @samp{@code{#f}}.

@end table

Since 1.6

@end deffn

@deffn Function clutter-get-current-event-time  @result{}@tie{} (ret@tie{}@code{unsigned-int32})
Retrieves the timestamp of the last event, if there is an event or if
the event has a timestamp.

@table @var
@item ret
the event timestamp, or @samp{CLUTTER_CURRENT_TIME}

@end table

Since 1.0

@end deffn

@deffn Function clutter-get-current-event  @result{}@tie{} (ret@tie{}@code{<clutter-event>})
If an event is currently being processed, return that event. This
function is intended to be used to access event state that might not be
exposed by higher-level widgets. For example, to get the key modifier
state from a Button 'clicked' event.

@table @var
@item ret
The current ClutterEvent, or @samp{@code{#f}} if none.

@end table

Since 1.2

@end deffn


@c %end of fragment
