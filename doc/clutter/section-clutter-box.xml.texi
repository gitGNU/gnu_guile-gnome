
@c %start of fragment

@node ClutterBox
@chapter ClutterBox
A Generic layout container

@section Overview
@code{<clutter-box>} is a @code{<clutter-actor>} sub-class implementing
the @code{<clutter-container>} interface. A Box delegates the whole size
requisition and size allocation to a @code{<clutter-layout-manager>}
instance.

@c (example (@ (id "example-clutter-box")))
@c (title "Using ClutterBox")
The following code shows how to create a @code{<clutter-box>} with a
@code{<clutter-layout-manager>} sub-class, and how to add children to it
via @code{clutter-box-pack}.

@example 

 ClutterActor *box;
 ClutterLayoutManager *layout;

 /&#x002A; Create the layout manager first &#x002A;/
 layout = clutter_box_layout_new ();
 clutter_box_layout_set_homogeneous (CLUTTER_BOX_LAYOUT (layout), TRUE);
 clutter_box_layout_set_spacing (CLUTTER_BOX_LAYOUT (layout), 12);

 /&#x002A; Then create the ClutterBox actor. The Box will take
  &#x002A; ownership of the ClutterLayoutManager instance by sinking
  &#x002A; its floating reference
  &#x002A;/
 box = clutter_box_new (layout);

 /&#x002A; Now add children to the Box using the variadic arguments
  &#x002A; function clutter_box_pack() to set layout properties
  &#x002A;/
 clutter_box_pack (CLUTTER_BOX (box), actor,
                   "x-align", CLUTTER_BOX_ALIGNMENT_CENTER,
                   "y-align", CLUTTER_BOX_ALIGNMENT_END,
                   "expand", TRUE,
                   NULL);
  
@end example

@code{<clutter-box>}'s @code{clutter-box-pack} wraps the generic
@code{clutter-container-add-actor} function, but it also allows setting
layout properties while adding the new child to the box.

@code{<clutter-box>} is available since Clutter 1.2

@section Usage
@include defuns-clutter-box.xml.texi

@c %end of fragment
