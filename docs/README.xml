<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
  <!ENTITY % local.common.attrib "xml:base CDATA #IMPLIED">
  <!ENTITY % ents SYSTEM "gst-guile.ent">
  %ents;
]>

<article id="gst-guile">
<articleinfo>
  <title>Gst-Guile &version;: A Guile Interface to GStreamer</title>
  <publisher><publishername>The GStreamer Development Team</publishername></publisher>
  <pubdate>&pubdate;</pubdate>
  <copyright><year>2003</year><holder>Andy Wingo</holder></copyright>
  <titleabbrev>gst-guile</titleabbrev>
  <authorgroup>
    <author>
      <firstname>Andy</firstname>
      <surname>Wingo</surname>
      <email>wingo pobox com</email>
    </author>
  </authorgroup>
  <abstract>
    <para>Introductory information for the GStreamer Guile bindings.</para>
    <para><ulink url="http://www.gstreamer.net/bindings/guile/"/></para>
  </abstract>
  <revhistory>
     <revision>
        <revnumber>0.1.0</revnumber>
        <date>2003-08-15</date>
        <authorinitials>apw</authorinitials>
        <revremark>Initial version.</revremark>
     </revision>
  </revhistory>
</articleinfo>

<!--=====================================================================-->

<section id="about">
<title>About</title>
<para>

<application>gst-guile</application>: the <ulink
url="http://www.gnu.org/software/guile/">Guile</ulink> bindings for the <ulink
url="http://www.gstreamer.net/">GStreamer</ulink> project. These bindings
provide access to almost all of the GStreamer C API through an object oriented
Guile API.

</para>
</section>

<!--=====================================================================-->

<xi:include href="NEWS.xml#news" xmlns:xi="http://www.w3.org/2001/XInclude"/>

<!--=====================================================================-->

<section id="installation">
<title>Installation</title>

<!--=================-->

<section id="requirements">
<title>Requirements</title>
<itemizedlist>
<listitem><para>
Guile 1.6.4 or higher (<ulink url="http://www.gnu.org/software/guile/"/>)
</para></listitem>
<listitem><para>
GStreamer 0.6.x or 0.7.x (<ulink url="http://www.gstreamer.net/"/>)
</para></listitem>
<listitem><para>
guile-gobject 0.5.3 (<ulink url="http://www.gnu.org/software/guile-gtk/"/>)
</para></listitem>
</itemizedlist>
</section>

<!--=================-->

<section id="building">
<title>Building and Installation</title>

<para>
For build and install information please refer to the "INSTALL" file.
Installation is optional, gst-guile can be used from the build directory. The
quick instructions: build and install guile-gobject and GStreamer then build
gst-guile: </para>

<para>
<screen>
 $ ./configure &amp;&amp; make
</screen>
</para>

</section>

<!--=================-->

<section id="using">
<title>Using</title>
<para>
If you install the package, you should be all set. If not, you'll need to
override some paths, which can be done for you with the <code>dev-environ</code>
script at the top of the tarball.
</para>

<para>
Try running examples, as shown below:
</para>

<para>
<screen>
 $ ./dev-environ guile -s examples/gstreamer vorbisplay.scm &lt;an Ogg Vorbis file&gt;
</screen>
</para>

</section>

<!--=================-->

</section>

<!--=====================================================================-->

<section id="programming">
<title>Programming</title>

<!--=================-->

<section id="general-api">
<title>General API</title>
<para>

The gst-guile bindings are directly generated from the GStreamer headers. Look
at the GStreamer documentation at <ulink url="http://www.gstreamer.net/docs/"/>
for general API and programming issues. In most cases the GStreamer classes and
boxed types map directly to Guile classes. The function-based GObject methods
also map onto Guile methods.

</para>
</section>

<!--=================-->

<section id="divergence-from-c-api">
<title>Divergence From C API</title>

<para>Write me!</para>

<!--
<itemizedlist>

 <listitem><para><function>gst_props_entry_get_type</function> is accessed
 through <function>PropsEntry.get_props_type</function>().  This is due to the
 <function>_get_type</function> function extention being normally used for
 <function>GType</function> access and is inaccessable
 otherwise.</para></listitem>

 <listitem><para>Special <link linkend="pipeline-iteration">pipeline
 iteration</link> support through the following functions:</para>

  <itemizedlist>

   <listitem><para><function>add_iterate_bin</function>(<parameter
   class="function">bin</parameter>) -&gt; <returnvalue>id</returnvalue>: used
   to iterate a bin with a C idle loop callback instead of a Guile
   callback.</para></listitem>

   <listitem><para><function>remove_iterate_bin</function>(<parameter
   class="function">id</parameter>): used to remove the
   <function>add_iterate_bin</function> idle loop callback
   id.</para></listitem>

   <listitem><para><function>iterate_bin_all</function>(<parameter
   class="function">bin</parameter>): releases locks, calls
   <function>gst_bin_iterate</function> until it returns 0, reacquires locks
   and completes</para></listitem>

  </itemizedlist>
 </listitem>

 <listitem><para><link linkend="guile-elements">Guile Elements</link> support through the following currently horribly inefficient functions:</para>

  <itemizedlist>

   <listitem><para><function>Buffer.get_data</function>() -&gt;
   <returnvalue>string</returnvalue>: converts buffer data to a string and
   returns it.</para></listitem>

   <listitem><para><function>Buffer.set_data</function>(<parameter
   class="function">string</parameter>): sets the buffer data from a
   string.</para></listitem>

  </itemizedlist>
 </listitem>
</itemizedlist>
-->

</section>

<!--=================-->

<section id="examples">
<title>Examples</title>

<para>The best documentation right now are the examples in <filename
class="directory">./examples/gstreamer/</filename>.  Read them.</para>

</section>

<!--=================-->
<!--
<section id="threads">
<title>Threads</title>

<para>aThreading is a tricky subject for gst-guile.  There are a few lock you
need to be aware of:</para>

<section id="gil">
<title>GIL</title>

<para>The CGuile interpreter is single threaded.  Code execution in the
interpreter is protected by a Global Interpreter Lock (GIL).  This means that C
code can run in other threads in parallel but only one thread will be running
Guile code at any one point.  Most of this is handled internally by means of
locking and unlocking the GIL at appropriate times.  Callback code and other
various code paths between Guile and C *should* be setup to do proper GIL
handling.</para>
  
<para>However, it is possible that you may encounter a situation where proper
locking is not done.  This is most likely due to calling a wrapper function
that follows a sequence like this:</para>

<orderedlist>
<listitem><para>Guile calls wrapper function</para></listitem>
<listitem><para>wrapper function calls C GStreamer function</para></listitem>
<listitem><para>C GStreamer function calls side effect code</para></listitem>
<listitem><para>side effect code calls callback</para></listitem>
<listitem><para>callback tries to acquire Guile GIL but it's already locked</para></listitem>
<listitem><para>deadlocked...</para></listitem>
</orderedlist>

<para>This has been fixed for commonly called functions that have side effects
which are likely to re-enter the interpreter.  It just involves lock/unlock
around the call to the C gst function.  But doing it for every function could
have performance issues and, more importantly, is not an automated
process.</para>

<para>Please file a <link linkend="bugs">bug</link> if you have problems
related to this and need other functions to be specially handled.</para>

</section>

<section id="gdk-lock">
<title>Gdk Lock</title>

<para>If you are using PyGTK you will have to deal with Gdk locking.  Make sure
you're holding the Gdk lock while executing Gdk/Gtk calls.  See PyGTK
documentation and FAQ list for more information.</para>

</section>

</section>
-->
<!--=================-->

<!--
<section id="pipeline-iteration">
<title>Pipeline Iteration</title>

<para>There are a number of ways to iterate pipelines.
<filename>./examples/gstreamer/bps.py</filename> is a small test program to
measure the performance in buffers per second of these various techniques.
Please see the example for how to use these techniques.</para>

<itemizedlist>
<listitem><para><function>Bin.iterate</function>() in Guile from the gtk idle loop</para></listitem>
<listitem><para><function>gst_bin_iterate</function>() in C from gtk idle loop</para></listitem>
<listitem><para><function>Bin.iterate</function>() in a Guile loop</para></listitem>
<listitem><para><function>gst_bin_iterate</function>() in a C loop</para></listitem>
</itemizedlist>

<para>The method you chose depends on your application.  The idle loop methods
are slightly slower yet more flexible.  Probably useful for interactive GUI
applications.</para>

<para>The basic loop methods are faster but probably more use for
non-interactive applications.  A variation on these loops would be to also
check for a stop condition which may provide performance increase and some
level of control.</para>

</section>
-->
<!--=================-->

<section id="guile-elements">
<title id="guile-elements.title">Guile Elements</title>

<para> It is possible to write Guile subclasses of GstElement. See
<filename>./examples/gstreamer/sinesrc.scm</filename> for an example.</para>

</section>

<!--=================-->

</section>

<!--=====================================================================-->

<section id="bugs">
<title>Bugs</title>
<para>
<emphasis>Please</emphasis> submit gst-guile bugs, patches, or suggestions to GNOME Bugzilla (<ulink url="http://bugzilla.gnome.org/"/>). Product: GStreamer, Component: gst-guile.  Or alternatively send a message to the gstreamer-devel list or the maintainer.  Thank you.
</para>
</section>

<!--=====================================================================-->

<xi:include href="TODO.xml#todo" xmlns:xi="http://www.w3.org/2001/XInclude"/>

<!--=====================================================================-->

<xi:include href="AUTHORS.xml#authors" xmlns:xi="http://www.w3.org/2001/XInclude"/>

<!--=====================================================================-->

</article>
