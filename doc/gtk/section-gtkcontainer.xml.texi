
@c %start of fragment

@node GtkContainer
@chapter GtkContainer
Base class for widgets which contain other widgets

@section Overview
A GTK+ user interface is constructed by nesting widgets inside widgets.
Container widgets are the inner nodes in the resulting tree of widgets: they
contain other widgets. So, for example, you might have a @code{<gtk-window>}
containing a @code{<gtk-frame>} containing a GtkLabel. If you wanted an image
instead of a textual label inside the frame, you might replace the
@code{<gtk-label>} widget with a @code{<gtk-image>} widget.

There are two major kinds of container widgets in GTK+. Both are subclasses of
the abstract @code{<gtk-container>} base class.

The first type of container widget has a single child widget and derives from
@code{<gtk-bin>}. These containers are @dfn{decorators}, which add some kind of
functionality to the child. For example, a @code{<gtk-button>} makes its child
into a clickable button; a @code{<gtk-frame>} draws a frame around its child and
a @code{<gtk-window>} places its child widget inside a top-level window.

The second type of container can have more than one child; its purpose is to
manage @dfn{layout}. This means that these containers assign sizes and positions
to their children. For example, a @code{<gtk-hbox>} arranges its children in a
horizontal row, and a @code{<gtk-table>} arranges the widgets it contains in a
two-dimensional grid.

To fulfill its task, a layout container must negotiate the size requirements
with its parent and its children. This negotiation is carried out in two phases,
@dfn{size requisition} and @dfn{size allocation}.

@section Size Requisition
The size requisition of a widget is it's desired width and height. This is
represented by a @code{<gtk-requisition>}.

How a widget determines its desired size depends on the widget. A
@code{<gtk-label>}, for example, requests enough space to display all its text.
Container widgets generally base their size request on the requisitions of their
children.

The size requisition phase of the widget layout process operates top-down. It
starts at a top-level widget, typically a @code{<gtk-window>}. The top-level
widget asks its child for its size requisition by calling
@code{gtk-widget-size-request}. To determine its requisition, the child asks its
own children for their requisitions and so on. Finally, the top-level widget
will get a requisition back from its child.

@section Size Allocation
When the top-level widget has determined how much space its child would like to
have, the second phase of the size negotiation, size allocation, begins.
Depending on its configuration (see @code{gtk-window-set-resizable}), the
top-level widget may be able to expand in order to satisfy the size request or
it may have to ignore the size request and keep its fixed size. It then tells
its child widget how much space it gets by calling
@code{gtk-widget-size-allocate}. The child widget divides the space among its
children and tells each child how much space it got, and so on. Under normal
circumstances, a @code{<gtk-window>} will always give its child the amount of
space the child requested.

A child's size allocation is represented by a @code{<gtk-allocation>}. This
struct contains not only a width and height, but also a position (i.e. X and Y
coordinates), so that containers can tell their children not only how much space
they have gotten, but also where they are positioned inside the space available
to the container.

Widgets are required to honor the size allocation they receive; a size request
is only a request, and widgets must be able to cope with any size.

@section Child properties
introduces @dfn{child properties} - these are object properties that are not
specific to either the container or the contained widget, but rather to their
relation. Typical examples of child properties are the position or pack-type of
a widget which is contained in a @code{<gtk-box>}.

Use @code{gtk-container-class-install-child-property} to install child
properties for a container class and
@code{gtk-container-class-find-child-property} or
@code{gtk-container-class-list-child-properties} to get information about
existing child properties.

To set the value of a child property, use
@code{gtk-container-child-set-property}, @code{gtk-container-child-set} or
@code{gtk-container-child-set-valist}. To obtain the value of a child property,
use @code{gtk-container-child-get-property}, @code{gtk-container-child-get} or
@code{gtk-container-child-get-valist}. To emit notification about child property
changes, use @code{gtk-widget-child-notify}.

@section Usage
@include defuns-gtkcontainer.xml.texi

@c %end of fragment
