2004-04-03  Andreas Rottmann  <a.rottmann@gmx.at>

	* defs-support.scm (type-lookup): Recognize "[]" in type strings
	and treat it like a pointer.

2004-03-28  Andreas Rottmann  <a.rottmann@gmx.at>

	* defs-support.scm (load-defs): The glob:* functions are not
	existant anymore in SLIB3, and were aliased to filename:* anyway.

2004-02-22  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (s_scm_gobject_get_data) 
	(s_scm_gobject_set_data_x): Use SCM_UNBOUND to indicate an unbound
	slot.

2004-02-12  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.c (guile_gobject_log_handler):
	Handle a NULL for log_domain.

	* primitives.scm (gparam-spec-type-args): Add a pair for
	GParamValueArray, but there's probably more work to do before you
	can make the param in scheme.

	* guile-gnome-gobject-primitives.h: GuileGClosure struct moved to
	the .c file to make it private.

	* guile-gnome-gobject-primitives.c (scm_c_debug_print): Removed.
	(scm_c_get_enum): Removed.
	(scm_c_make_genum): Removed.

	* guile-gnome-gobject-primitives.h: No more exporting (as C api)
	gparam-primitive-create-pspec-struct.

	* guile-gnome-gobject-primitives.c (s_scm_gvalue_primitive_set):
	Accept object and interface types as well.
	(s_scm_gtype_instance_primitive_to_value): Replaced by
	gvalue-primitive-new then gvalue-primitive-set.
	(s_scm_gvalue_primitive_set): Also handle gboxed-scm.
	(s_scm_gvalue_primitive_get): Handle gboxed-scm.
	(s_scm_gboxed_scm_primitive_new): Removed, now redundant.
	(s_scm_gboxed_scm_primitive_to_scm): Same.
	(s_scm_gtype_is_basic_p): Changed name to include -is and remove
	-primitive, like the standard GLib functions. Documented what a
	basic type is.
	(s_scm_gtype_is_basic_p): Boxed SCM is a basic type.
	(s_scm_gtype_is_valued_p): New function. Predicate that's true
	when you can make a GValue with (make class :value val).
	(scm_gvalue_array_primitive_new): Remove, just use
	gvalue-primitive-new.
	(scm_gvalue_array_primitive_append): Removed. There are no value
	array manipulation procedures any more. Use gvalue-primitive-set
	with a list as the argument.

	* primitives.scm (gflags->element-list): Replace
	gflags-primitive-bit-set?.

	* guile-gnome-gobject-primitives.c
	(s_scm_gvalue_primitive_set_enum): Functionality moved to
	gvalue-primitive-set.
	(s_scm_gvalue_primitive_set): Accept enum and flags types.
	(s_scm_gvalue_primitive_set_flags): Removed, like set-enum.
	(s_scm_gflags_primitive_bit_set_p): Removed, it's the same as
	(positive? (logand value bit)).

	* guile-gnome-gobject-primitives.h (scm_gtype_instance_primitive):
	Undefined function, somehow in the API? Removed.
	(scm_sys_gtype_instance_primitive_destroy_x): Since we export it
	to scheme, we can export it to C.

	* guile-gnome-gobject-primitives.c (genum_type_get_values):
	Changed name, from genum_primitive_get_values.
	(s_scm_gflags_type_get_values): Same.
	(scm_init_gnome_gobject_primitives): Organized and documented
	export list. The source file could also use such a reorganization.
	(s_scm_gtype_primitive_create_basic_instance): Removed, it does
	the same thing as gvalue-primitive-new.

	* guile-gnome-gobject-primitives.h (scm_tc16_gvalue_array): Gone.

	* guile-gnome-gobject-primitives.c
	(scm_gvalue_array_primitive_new): Just allocate GValueArray as a
	standard boxed type.
	(scm_gvalue_array_print): Removed, use just normal GValue
	printing.
	(scm_gvalue_array_free): Removed, no more tc16_gvalue_array.

2004-02-08  Andy Wingo  <wingo@pobox.com>

	* primitives.scm (genum->value): New public function.
	(genum->value-table): Removed. Use genum-class->value-table from
	gobject.scm.

	* guile-gnome-gobject-primitives.c (scm_c_make_gvalue): Add
	some more debugging.

	* glib-support.h: Add copyright notice. Still need to change all
	these to FSF.

2004-01-29  Andy Wingo  <wingo@pobox.com>

	* defs-support.scm (load-defs): Parse a (callee-owned) option in
	parameter definitions.

	* gw-gobject-spec.scm (GValue wrapping): Support 'callee-owned
	values.

	* gw-spec-utils.scm (gobject:gwrap-boxed): Support 'callee-owned
	arguments (call g_value_dup_boxed instead of _get_boxed).

2004-01-28  Andy Wingo  <wingo@pobox.com>

	* gw-gobject-spec.scm (ws): Check for a NULL return for GValues.

2004-01-14  Andy Wingo  <wingo@pobox.com>

	* primitives.scm (<gtype-instance-class>): There's no special
	get-n-set here any more, that's done with qdata. See gobject.scm
	for more details.

	* gw-spec-utils.scm (gobject:gwrap-object): Don't ref returned
	objects here, only unref them if we own them. This complements the
	change in make_gtype_instance.
	(gobject:gwrap-interface): Same.

	* guile-gnome-gobject.c (s_scm_gobject_set_data_x,
	s_scm_gobject_get_data): New functions implementing object
	properties using qdata so the state persists for all wrappers.
	(scm_c_gobject_get_property): Use scm_c_gtype_instance_to_scm to
	get the object -- will retrieve a cached object.
	(scm_c_gobject_set_property): Same.
	(remove_object_quark, free_object_quark): Removed.
	(s_scm_sys_function_to_method_public): Set the generic's name. A
	bit slower, but necessary for debugging.

	* guile-gnome-gobject-primitives.c (s_scm_gclosure_primitive_new):
	Make free_closure the invalidate notifier, not the finalize
	notifier.
	(s_scm_gclosure_primitive_new): Don't actually hold a ref on the
	closure by using g_value_set_static_boxed. This is to compensate
	for an over-conservative GC.
	(everywhere): Add some more debugging printouts (not enabled by
	default).
	(scm_gtype_instance_free): Remove vestigial finalize_func code,
	set the SMOB's data to NULL, and remove cached wrapper info. Can
	be called multiple times.
	(s_scm_sys_gtype_instance_primitive_destroy_x): New function,
	analogous to gtk_object_destroy, called by gtk.scm in response to
	the ::destroy signal.
	(line 710): A couple of pages of comment on the design of the
	GObject wrapper.
	(scm_c_make_gtype_instance): Check for a cached wrapper before
	sinking object. Cache the primitive wrapper separately from the
	GOOPS wrapper. Actually ref the object, in accordance with the
	design doc. Ref params too.
	(s_scm_gobject_primitive_get_properties): Don't ref the param
	here, it's done in make_gtype_instance.
	(s_scm_gparam_primitive_create): Remove floating reference, still
	holding the one from make_gtype_instance.
	(s_scm_gobject_primitive_create_instance): Remove extra ref on
	object, as we own the one given by g_object_new. Cache the
	wrapper.
	(s_scm_gvalue_primitive_get): Don't ref the objects or params
	here, it's done in make_gtype_instance.

2004-01-13  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (scm_c_scm_to_gtype_instance): Error if
	the SMOB's data is NULL (meaning the object has been destroyed).
	(scm_c_gtype_instance_to_scm): Cache return values as qdata on the
	objects. The qdata is removed when the SMOB is freed.
	(s_scm_sys_gtype_instance_value_to_scm): New function. An
	optimization so that callbacks can use existing object wrappers.

	* gw-utils.scm: Remove re-export-bindings in favor of
	re-export-module. Add a copyright notice.

2004-01-22  Andreas Rottmann  <a.rottmann@gmx.at>

	* guile-gnome-gobject-primitives.c
	(s_scm_gvalue_array_primitive_new)
	(s_scm_gvalue_array_primitive_append): Don't wrap SCM_DEFINE
	invocation too much, since it seems to confuse older snarfers.

2003-12-30  Andreas Rottmann  <a.rottmann@gmx.at>

	* guile-gnome-gobject-primitives.c (scm_c_make_gtype_name) 
	(s_scm_gtype_primitive_get_signals): Plugged memory leaks.

2003-12-13  Andreas Rottmann  <a.rottmann@gmx.at>

	* gw-glib-spec.scm (GSList): Initialize the c-var in the
	scm->c-ccg with NULL.

2003-12-09  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (scm_c_gtype_instance_instance_init):
	Switch on the type from the class, not the instance, as the
	instance's type changes in different phases of initialization.
	Check to see if we have a servant already before making another
	one. Fixes some bugs in doubly-derived gobject classes.

	* guile-gnome-gobject-primitives.c (scm_c_make_gtype_instance):
	Sink objects after checking to see if we have a wrapper.

2003-12-03  Andy Wingo  <wingo@pobox.com>

	* gw-glib-spec.scm: Fixed some longstanding bugs, embarassingly
	enough related to the size of fundamental types. Also added gshort
	and gushort as types.

2003-11-22  Andreas Rottmann  <a.rottmann@gmx.at>

	* glib-support.h: Added #include guards.
	* glib-support.c: Quick-fixed to work with Guile 1.7.
	
	* guile-support.h (scm_gc_free): Fixed parameter list.
	* guile-gnome-gobject-primitives.c (scm_gvalue_free): Fix 
	scm_gc_free() invocation.

2003-11-18  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.c
	(s_scm_gboxed_scm_primitive_to_scm): If the boxed value is NULL,
	we return SCM_UNSPECIFIED to prevent a segfault when the value is
	printed.
	(s_scm_gvalue_primitive_set): If we don't know how to handle the
	GValue, signal a wrong type arg on the GValue, not the value we are
	trying to set.

2003-11-09  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.c (s_scm_especify_metaclass_x):
	New function. Makes the metaclass of an existing GTypeClass more
	specific, hence the novel new word `especify'. Exists to hack
	around GOOPS' lack of class methods.

2003-11-06  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (s_scm_sys_function_to_method_public):
	Don't set the name keyword when making the generic, it's faster
	according to Andreas.

2003-11-01  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.[ch] (scm_c_gvalue_to_scm): This one is const
	now.

	* guile-gnome-gobject-primitives.c (%scm-gclosure-marshal): Add
	some hacky prototypes to allow us to use scm_c_gvalue_to_scm in
	the marshaller.

2003-10-26  Andy Wingo  <wingo@pobox.com>

	* gw-glib-spec.scm (gslist-of): Fix some const pointer warnings.

	* gw-spec-utils.scm (gobject:gwrap-class): Use slot-ref, not
	slot-ref-using-class.

	* guile-gnome-gobject-primitives.c (slot_definition_using_name):
	Removed.

	* primitives.scm (define-with-docs): Renamed from
	define-public-with-docs, doesn't export the binding any more
	(let's just use the :export option when defining the module).
	(gruntime-debug): Removed.
	(%gruntime-debug): Removed.

	* guile-gnome-gobject.c (scm_gobject_register_type): Removed. Just
	use (define foo (gtype-from-name name)).
	(scm_c_gtype_instance_class_init): Don't call the
	gobject:class-init, just initialize after you define your class.
	This prevents custom initialization of scheme classes further
	subclassed in C, but that's a corner case that is maybe better
	left out.
	(scm_sys_gobject_get_refcount): Only define if DEBUG_REFCOUNTING
	is defined.
	(scm_c_gtype_instance_instance_init): Only call
	gtype-instance:initialize (was :instance-init), not a specific one
	for gobject.

2003-10-25  Andy Wingo  <wingo@pobox.com>

	* primitives.scm (<gtype-instance-class>): A new metaclass
	descending from <gtype-class>. <gtype-instance> is now an instance
	of this class.
	(compute-get-n-set): For <gtype-instance-class>, overrides
	#:instance allocation to set properties on the <%gtype-instance>
	smob.

	* guile-gnome-gobject.c (scm_gtype_eq_p): Removed. Just use eq?.

2003-10-25  Andreas Rottmann  <a.rottmann@gmx.at>

	* guile-gnome-gobject-primitives.c
	(s_scm_gparam_primitive_create_pspec_struct,
	s_scm_gparam_primitive_create): GValue support for param specs.
	* guile-gnome-gobject-primitives.h (SCM_G_IS_PARAM_SPEC_VALUE_ARRAY): 
	New macro.

2003-10-23  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (%gobject-get-property): Use scm->gvalue
	to process the return from gobject:get-property.

2003-10-22  Andreas Rottmann  <a.rottmann@gmx.at>

	* guile-gnome-gobject-primitives.c,
	guile-gnome-gobject-primitives.h,
	guile-gnome-gobject.c: Implement GValue array support.
	
	* guile-gnome-gobject-primitives.c (scm_c_make_gvalue)
	(scm_gvalue_free): Replaced deprecated scm_must_malloc/free
	invokations with scm_gc_malloc/free.

	* guile-support.h (SCM_VECTOR_REF, SCM_VECTOR_SET): New compat
	macros, to be used instead of SCM_VELTS().
	(scm_gc_malloc, scm_gc_free): New compat macros, to be used instead
	of scm_must_malloc/free.
	(scm_gc_unregister_collectable_memory)
	(scm_gc_register_collectable_memory): New compat macros.

2003-10-22  Andy Wingo  <wingo@pobox.com>

	* primitives.scm: The big changes! There's no more
	<gtype-class-meta>.
	(<set-once-class>): New metaclass implementing set-once slots.
	(<gtype-class>): Now a metaclass. Its metaclass is
	<set-once-class>, so it has set-once slots for gtype and
	gtype-class. All gtype classes are now instances of this
	metaclass.
	(<gtype-instance>): New class, has a set-once slot for the
	gtype-instance. Instance of <gtype-class>. Parent class of all
	instantiatable types (like <gobject>).

	* gw-gobject-spec.scm: New wrappers for gtype-is-classed? and
	gtype-is-instantiatable?.

	* guile-gnome-gobject.h (SCM_GOBJECTP): Use new SUBCLASSP macro.
	(SCM_GOBJECT_CLASSP): Use SUBCLASSP macro.
	(SCM_VALIDATE_GOBJECT_CLASS_GET_TYPE): Get the gtype by a
	slot-ref, not a class-slot-ref.

	* guile-gnome-gobject-primitives.h (SCM_GPARAM_SPEC_P): Allow
	SCM_BOOL_F for owner-type.
	(SCM_GTYPE_CLASS_SUBCLASSP): New macro.

	* guile-gnome-gobject-primitives.c
	(s_scm_sys_gtype_bind_to_class): Re-set the 'signals slot on
	implemented interfaces after g_type_class_ref()ing an implementor.
	Hackery, but that's the GObject system for you!
	(scm_gtype_class_print): Print gtype-class smobs with a %.
	(s_scm_sys_gtype_bind_to_class): Set the gtype and gtype-class
	slots using slot-set!, in accordance with the new hierarchy. Also
	loop through the implemented interfaces to re-set 'gsignals,
	because they aren't there until after a g_type_class_ref () on an
	implementor.
	(s_scm_sys_get_struct_slot): Work on any instance.
	(s_scm_sys_set_struct_slot): Same.
	(s_scm_gtype_primitive_get_signals): Rename from
	gobject-primitive-get-signals, because it works on interfaces too.
	(s_scm_gtype_instance_primitive_signal_emit): Renamed.
	(s_scm_gtype_instance_primitive_signal_connect): Renamed.

	* generics.scm (all functions): Updated to the new class
	hierarchy.

	* guile-gnome-gobject.h (SCM_VALIDATE_GOBJECT_CLASS_COPY): Renamed
	to SCM_VALIDATE_GOBJECT_CLASS_GET_GTYPE, since that's what it
	actually does.

2003-10-21  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.c
	(scm_pre_init_gnome_gobject_primitives): Make the smob for
	GTypeClass called "%gtype-class" to avoid conflicts between the
	GOOPS smob class and the real wrapper class.

	* gw-gobject-spec.scm: New wrapped function: gtype-is-classed?.

	* guile-gnome-gobject-primitives.c (scm_gtype_interfaces): New
	function, returns the interfaces implemented by a type.
	(scm_gtype_primitive_get_signals): Renamed from
	gobject-primitive-get-signals, although no code change is
	required.

2003-10-16  Andy Wingo  <wingo@pobox.com>

	* gw-spec-utils.scm: Export gobject:gwrap-helper-with-class.

2003-10-15  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (scm_c_gtype_instance_instance_init): Only
	call the instance-inits with one argument, the object.

2003-10-13  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (scm_c_gvalue_to_scm): Copy the incoming
	GValue so that we have our own.

2003-10-12  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (scm_c_scm_to_gvalue): New function, calls
	scm->gvalue.
	(scm_c_gvalue_to_scm): New function, calls gvalue->scm.

	* gw-spec-utils.scm (gobject:gwrap-interface): Wrap interfaces
	properly, now that we use them.

2003-10-11  Andy Wingo  <wingo@pobox.com>

	* defs-support.scm (load-defs): Ignore .defs entries where there
	is a (varargs ...) line.

	* guile-gnome-gobject.c (s_scm_sys_function_to_method_public):
	Some cleanups. Use the same coding style as the rest of the file.
	Use static variables to reference the-root-module and module-add!.
	Don't check to see if objects are actually classes, that's done by
	g-wrap now. We still have to make a new closure for the procedure,
	due to a bug in Guile 1.6.4.

2003-10-07  Kevin Ryde  <user42@zip.com.au>

	* guile-gnome-gobject.c (scm_sys_function_to_method_public): Don't put
	variable declarations in the middle of the function, that's a c99-ism.

2003-10-01  Andy Wingo  <wingo@pobox.com>

	* gw-spec-utils.scm: General cleanups all around...
	(GStudlyCapsExpand): New function, based on StudlyCapsExpand from
	slib's strcase.scm (public domain). Given a C type name, returns
	the appropriate scheme type name. Normally a lower case letter
	preceded by one capital letter forces a hyphenation before the
	capital letter: GSource => g-source, GtkIMContext =>
	gtk-im-context. However, a lower case letter preceded by exactly
	two capital letters that is not at the beginning of the string is
	treated specially: GtkHBox => gtk-hbox
	(like the C api).
	(glib:type-cname->symbol-alist): New alist of overrides for
	converting C type names to scheme names.
	(glib:type-cname->symbol): uses GStudlyCapsExpand, mapping
	underscores to hyphens. GSource* => <g-source*>.
	(print-info): Gives more feedback when the bindings are being
	created. This uses slib's printf.
	(gwrap-helper): New argument HOW-WRAPPED. If not false, will cause
	gwrap-helper to call print-info for the type.
	(gwrap-helper-with-class): New argument HOW-WRAPPED, passed on to
	gwrap-helper. Cleanups.
	(gobject:gwrap-*): Pass appropriate values for HOW-WRAPPED.

	* gw-gobject-spec.scm: use the new glib:type-cname->symbol-alist
	to override scheme names for <gobject>, <gvalue>, <gclosure>, and
	<gparam>. When wrapping g-source-set-closure, use the new name for
	GSource (<g-source*>).

	* defs-support.scm (register-type): Removed last argument relating
	to information printing -- that's done in gw-spec-utils now.
	(load-defs): When checking to see if a method has a bad name,
	don't ignore asterisks at the end of the type name. Thus we avoid
	creating methods for opaque pointers.

2003-07-27  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.[ch] (G_TYPE_BOXED_SCM): renamed
	from G_TYPE_GBOXED_SCM. There have been other changes recently
	that I haven't been putting in the changelogs...

2003-08-26  Andreas Rottmann  <a.rottmann@gmx.at>

	* gw-utils.scm (function->method-public)
	(functions->methods-public): Unecessary now, removed.
	
	* defs-support.scm (load-defs): Make sym_of_object and
	sym_generic_name static.
	(load-defs): Create generic functions immediatly instead of
	setting the of-object procedure property.

	* guile-gnome-gobject.c, guile-gnome-gobject.h
	(scm_sys_function_to_method_public): New function.
	
	* defs-support.scm (recursive-type-find): Fixed behavior for empty
	type-hashes.
	
	* defs-support.scm, gw-spec-utils.scm: Support for enums/flags
	without gtype-id.

	* Makefile.am (GUILE_FLAGS): New variable.

2003-06-21  Andy Wingo  <wingo@pobox.com>

	* gw-spec-utils.scm (gobject:gwrap-class): New function.

2003-06-19  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject.c (scm_c_gtype_instance_instance_init): Call
	scm_c_make_gtype_instance to get the primitive GTypeInstance
	wrapper for the servant. That way we really only have one
	primitive wrapper, however many high level wrappers there are.
	Seems to fix some flaky bugs as well, as a side effect.

2003-06-14  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.c (scm_c_make_gtype_instance):
	Cache the primitive gtype instance smob.

2003-06-07  Andy Wingo  <wingo@pobox.com>

	* primitives.scm (gparam-spec:args): Fix to actually return the
	full list of args. Zip up the returned list with descriptive
	keywords.

2003-05-30  Andy Wingo  <wingo@pobox.com>

	* defs-support.scm (type-lookup): Without an explicit value for
	ownership, we only assume that we own non-const strings. Other
	things represented by pointers are treated conservatively. This is
	so that a function returning a GObject* has its return
	g_object_ref'd; non-const is not the same as caller-owned.

2003-05-26  Andy Wingo  <wingo@pobox.com>

	* defs-support.scm (load-defs): Add support for null-ok in defs
	files, e.g. '("GdkWindow*" "window" (null-ok)).

	* gw-spec-utils.scm: Only allow NULL values for objects, pointers,
	boxeds, and interfaces if 'null-ok appears in the typespec.

	* gw-gobject-spec.scm: Added input checks for generic GValue type
	wrapper. Only allow NULL for closures if 'null-ok appears in the
	typespec.

2003-05-08  Andy Wingo  <wingo@pobox.com>

	* guile-gnome-gobject-primitives.[ch]: Added and exported log handler
	for g_logv messages. I don't thing it returns, however, which can
	cause recursion... dunno what to do about that.

	* gw-gobject-spec.scm: wrap closures and g-source-set-closure.

	* gw-glib-spec.scm: wrap main loops and some things from gutils.h.
	Steal GList/GSList wrapper from g-wrap.

	* defs-support.scm: prettify output, log opaque types and bad
	methods to a file. We now wrap opaque types as <gw:wct>. Add
	support for GList*-of-GtkWindow*. Support new commands "ignore",
	"ignore-glob", and function attribute "overrides".

2003-05-03  Andy Wingo  <wingo@pobox.com>

	* gobject.scm: Cleanups. Also changed a few
	gtype-instance-primitive function calls with (slot-ref obj
	'gtype-instance). With the new directory structure, gobject.scm
	moves into gnome/.

	* primitives.scm: Don't hold extra data in the slot-definition,
	it's needed by the latest guile 1.6. Change the old slot
	allocation for gtype and gtype-instance to rely on a new kind of
	allocation, #:set-once. Adapt to the new method of library
	initialization with g-wrap.

	* gw-utils.scm: New file. Provides utility syntax
	re-export-bindings and functions->methods-public.

	* gw-spec-utils.scm: New file. Provides utility functions for spec
	files, such as gobject:wrap-object, gobject:wrap-enum, and the
	like.

	* defs-support.scm: New file. Provides support for natively
	loading .defs-style api definitions into g-wrap wrapsets.

	* gw-glib-spec.scm: New file. Will eventually wrap glib functions,
	but for now just provides type wrappings for other wrapsets.

	* gnome-gobject.gwp: Deleted. Functionality moved to
	gw-gobject-spec.scm.
	
	* gw-gobject-spec.scm: New file. Wraps functions to initialize
	gnome-gobject, as well as wrapping some fundamental types for
	g-wrap.

	* generics.scm: New file. Provides generic functions for
	gobject.scm.

	* guile-gnome-gobject.c: Added diagnostic macros to debug
	allocation problems. Adapted to new slot allocation for 'gtype and
	'gtype-instance. Return a a goops object of class (gtype->class
	[type of gtypeinstance]) in scm_c_gtype_instance_to_scm. Exported
	(to C) scm_sym_gtype_to_class, the symbol for gtype->class.
	Adapted to new initialization via g-wrap.
	
	* guile-gnome-gobject-primitives.c: Muck about with refcounting.
	Provide guile_gobject_register_sinkfunc(), much like what pygtk
	does, to deal with GTK_OBJECT_FLOATING. Provide getters and
	setters for #:set-once allocation and adapt accordingly for 'gtype
	and 'gtype-instance. Refcounting is still not in a coherent state,
	needs a bit of work.
	
2002-11-08  Ariel Rios <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gobject_primitive_signal_emit): Rewrite the function
	being more clever, more readable and hey! it works.

	* gobject.scm (gobject-signal-emit): Do some cleanup.
	
	
2002-08-01  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gparam_primitive_create_pspec_struct): Some cleanup

2002-08-01  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gparam_primitive_create): Use the
	new macros thus doing the right thing (TM)

	* guile-gnome-gobject-primitives.h (SCM_G_IS_PARAM_SPEC_BOOLEAN) 
	(SCM_G_IS_PARAM_SPEC_STRING, SCM_G_IS_PARAM_SPEC_OBJECT) 
	(SCM_G_IS_PARAM_SPEC_BOXED, SCM_G_IS_PARAM_SPEC_CHAR) 
	(SCM_G_IS_PARAM_SPEC_UCHAR, SCM_G_IS_PARAM_SPEC_INT) 
	(SCM_G_IS_PARAM_SPEC_UINT, SCM_G_IS_PARAM_SPEC_LONG) 
	(SCM_G_IS_PARAM_SPEC_ULONG, SCM_G_IS_PARAM_SPEC_FLOAT) 
	(SCM_G_IS_PARAM_SPEC_DOUBLE, SCM_G_IS_PARAM_SPEC_POINTER) 
	(SCM_G_IS_PARAM_SPEC_ENUM, SCM_G_IS_PARAM_SPEC_FLAGS): New macros

2002-07-30  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject.c (scm_init_gnome_gobject): Some cleanup of
	unused code.

2002-07-30  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject.c (scm_init_gnome_gobject): Do the right thing.

2002-07-30  Ariel Rios  <ariel@gnu.org>

        * guile-gnome-gobject.c : Add string.h to make compiler happy
	
	* guile-gnome-gobject-primitives.c: Ditto

	* guile-support.c: Ditto 

2002-04-13  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gparam_primitive_create_pspec_struct): 
	s/g_param_get_*/g_param_spec_get. 

2002-01-23  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gparam_primitive_create): 
	All fixes done. It compiles again. Need to check the fundamental
	stuff.

2002-01-23  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gparam_primitive_create): 
	More clean ups. Almost done.

2002-01-23  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (s_scm_gparam_primitive_create_pspec_struct): 
	Functions now compiles. Still some work to do in some functions ahead.
	

2002-01-23  Ariel Rios  <ariel@gnu.org>

        * guile-gnome-gobject-primitives.c:  glib-object.h
	
	* guile-gnome-gobject-primitives.h: Ditto.

	* guile-gnome-gobject.c (scm_init_gnome_gobject): Do not use
	G_TYPE_FUNDAMENTAL_LAST and other deprecated stuff, this
	hack is a workaround and it is not guaranteed to work yet.
	We now only include glib-object.h
		
2001-09-21  Ariel Rios  <ariel@gnu.org>

	* guile-gnome-gobject-primitives.c (gboxed_scm_get_type): Use correct of
	arguments required by recent glib changes.
	(s_scm_gparam_primitive_create_pspec_struct): Do not access GParamSpec 
	fields directly.
	(s_scm_gparam_primitive_create): Correct number of arguments passed to
	SCM_ASSERT

2001-09-09  Martin Baulig  <baulig@suse.de>

	* gobject.scm (gobject-class-find-property): New public function.

2001-09-09  Martin Baulig  <baulig@suse.de>

	* gobject.scm (vector-map): New private utility function.
	(<gparam>): Removed the `pspec-struct' slot.
	(<gparam-pointer> <gparam-string> <gparam-object> <gparam-boxed>): Added.
	(<gparam-enum> <gparam-flags>): Added.
	(gparam->pspec-struct): New public function.
	(allocate-instance <gtype-class>): Moved <gparam> and <gobject> initialization
	into (initialize <gtype-class>), only do the actual allocating here.

	* guile-gnome-gobject-primitives.c (scm_c_debug_print): New utility function.
	(SCM_DEBUG_PRINT): New utility macro.
	(gparam-primitive->pspec-struct): Moved the functionality of this function into
	`gparam-primitive-create-pspec-struct' (not exported), store the pspec-struct as
	qdata in the param and return it.
	(SCM_ERROR_NOT_YET_IMPLEMENTED): Added `what' argument.

	* guile-gnome-gobject.c (gtype?): New function.
	(gparam->value-type): New function.

2001-09-08  Martin Baulig  <baulig@suse.de>

	* foo.[ch]: Removed.

2001-09-08  Martin Baulig  <baulig@suse.de>

	* gobject.scm (gtype-instance:class-init, gtype-instance:instance-init
	gobject:class-init gobject:instance-init gobject-class:install-property
	gobject:set-property gobject:get-property): Moved here from primitives.scm.
	(<gparam>): Added `pspec-struct' slot.
	(<gobject>): The `gobject-properties' vector now contains <gparam> objects.
	(make-gparam-instance): Added #:pspec-struct keyword to create a <gparam>
	object from a pspec-struct.
	(gobject:get-property, gobject:set-property): This now gets a <gparam> object
	as argument, not a pspec-struct.
	(gobject-class-install-property): Removed, implemented in C.	

	* guile-gnome-gobject-primitives.c (scm_c_gtype_lookup_class): New function.
	(scm_c_gtype_instance_bind_to_instance): New function.
	(gtype-primitive-register-static): Moved to guile-gnome-gobject.c and renamed
	to gtype-register-static.
	(gobject-class-primitive-install-property): Moved to guile-gnome-gobject.c and
	renamed to gobject-class-install-property.
	(scm_gparam_spec_vtable): Added "param-type" field.

	* guile-gnome-gobject.c (gtype-register-static): Moved here.
	(gobject-class-install-property): Moved here.

2001-09-07  Martin Baulig  <baulig@suse.de>

	* guile-support.[ch]: New files. This stuff may be moved into
	guile at a future time.

2001-09-07  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c (scm_add_slot_closure): Removed.

2001-09-06  Martin Baulig  <baulig@suse.de>

	* gobject.scm
	(<gparam-char> <gparam-uchar> <gparam-boolean> <gparam-int> <gparam-uint>
	<gparam-long> <gparam-ulong> <gparam-float> <gparam-double>): New classes.
	(gobject-class-install-property): New public function.
	(allocate-instance (<gtype-class>)): Added support for <gparam> subclasses.

	* guile-gnome-gobject-primitives.c (gparam-primitive-create):
	This now takes 4 args like (gobject-primitive-create-instance).

2001-09-05  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c (gparam-spec?): New func.
	(gobject-class-primitive-install-property): New function.
	Added support for properties.
	(scm_gtype_instance_free): Don't free the instance if we have a
	finalize func.

	* primitives.scm (gobject:set-property gobject:get-property):
	New generic functions.

	* gobject.scm (gobject:set-property gobject:get-property):
	Provide default implementation.

2001-09-05  Martin Baulig  <baulig@suse.de>

	* primitives.scm (gparam-spec:name gparam-spec:nick gparam-spec:blurb
	gparam-spec:flags gparam-spec:value-type gparam-spec:owner-type
	gparam-spec:args): New accessor functions.

	* guile-gnome-gobject-primitives.c
	(gobject-primitive-get-properties): Only return direct properties, not the
	ones from our parent types.

	* gobject.scm (gtype->class): Register parent classes if necessary.
	gsignal:id gsignal:name gsignal:interface-type gsignal:return-type
	gsignal:param-types gparam-spec:name gparam-spec:nick gparam-spec:blurb
	gparam-spec:flags gparam-spec:value-type gparam-spec:owner-type
	gparam-spec:args): Re-export them (from (gnome gobject primitives)).
	(gobject-class-get-property-names): New convenience function.

	* guile-gnome-gobject.c (scm_c_gtype_instance_is_a_p): New function.
	(scm_c_scm_to_gtype_instance, scm_c_gtype_instance_to_scm): New functions.

2001-09-03  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c
	(scm_c_register_gtype): Unmangle the type with G_TYPE_FLAG_RESERVED_ID_BIT.

2001-09-03  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c (gtype-primitive-create-instance):
	Renamed to gobject-primitive-create-instance; its last argument is
	now a vector containing the properties.

	* gobject.scm: When creating new <gobject> instances, interpret all
	arguments as GObject properties.

2001-09-03  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c
	(gobject:class-init, gobject:instance-init): When deriving
	GObject's, use `gobject:class-init' and `gobject-instance-init'
	instead of `gtype-instance:class-init' and
	`gtype-instance:instance-init'.

	* guile-gnome-gobject.c (gtype-fundamental?): New function.
	This isn't really necessary, but it's faster to do this in C.

	* primitives.scm (define-public-with-docs): New macro.
	(define-generic-with-docs): New macro.

	* gobject.scm: Documentation .....

2001-09-03  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c
	(gsignal-primitive-create): Actually pass the `param-types'
	vector to g_signal_newv().

	* gobject.scm (make-value-from-scm): Throw an exception if
	we got the unspecified value, but a non-void type.

2001-09-03  Martin Baulig  <baulig@suse.de>

	Another batch of larger changes:

	- improved gsignal support.
	- we can now derive GObject's in scheme.

	More detailed, but a bit uncomplete list:

	* gobject.scm (gtype->class): For each class we create,
	use its parent class as metaclass.
	(<gboxed-scm>): New type. This is a GBoxed type to hold
	a scheme value.
	(gvalue->scm): Moved here from primitives.scm and export it.
	(gtype-instance:class-init): New generic function.
	(gtype-instance:instance-init): New generic function.
	(gobject-class-define-signal): New public macro.

	* guile-gnome-gobject-primitives.[ch]
	(gvalue-primitive-get-basic): Renamed to gvalue-primitive-get.
	(gvalue-primitive-set-basic): Renamed to gvalue-primitive-set.
	(gtype-instance-primitive-type): Renamed to gtype-instance-primitive->type.
	(gtype-instance-primitive-to-value): New function.
	(scm_init_gnome_gobject_primitives): Don't export the "gsignal-*"
	symbols, except "gsignal-struct-vtable".
	(G_TYPE_GBOXED_SCM): New GBoxed type to hold a scheme value.
	(gboxed-scm-primitive-new): New function.
	(gboxed-scm-primitive->scm): New function.
	(gsignal-primitive-create): New function.
	(gtype-class->type): Removed. This is now implemented in scheme
	and correctly handles the case if you create a GOOPS subclass of
	a class.

	* guile-gnome-gobject.[ch] (gtype->method-name): New function.

	* primitives.scm
	(gsignal:id, gsignal:name, gsignal:return-type,
	gsignal:instance-type, gsignal:parameter-types):
	New accessor functions.

2001-09-01  Martin Baulig  <baulig@suse.de>

	* primitives.scm (<gtype>): Removed, replaced with a smob.
	(gobject-error): Renamed to gruntime-error.

	* guile-gnome-gobject-primitives.[ch]: Removed the <gtype> class
	and added new scm_tc16_gtype smob.

	* gobject.scm (gtype->class): Use <gtype-class> as metaclass
	and changed all <gtype-class-meta> to <gtype-class>.

	* guile-gnome-gobject.c: Call the GType's "gtype:<type-name>"
	instead of "gtype-type-<type-name>".

2001-09-01  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c (scm_gtype_primitive_register_static): New function.

	* guile-gnome-gobject-primitives.h (SCM_VALIDATE_FLOAT_COPY): Make this actually work.

2001-09-01  Martin Baulig  <baulig@suse.de>

	Added support for GParamSpec.

	* gobject.scm (gobject-get-property, gobject-set-property): New functions.

	* guile-gnome-gobject-primitives.c (scm_gparam_spec_struct_vtable): New struct type.
	(scm_gtype_instance_primitive_to_instance): Renamed to scm_gtype_instance_primitive().
	(scm_gtype_instance_primitive_type): New function.
	(scm_gobject_primitive_signal_emit, scm_gobject_primitive_signal_connect): Take a
	scm_tc16_gtype_instance smob, not a <gobject> object.
	(scm_gparam_primitive_to_pspec_struct): New function.
	(scm_gparam_primitive_create): New function.
	(s_scm_gobject_primitive_get_properties): New function.
	(scm_gobject_primitive_get_property): New function.
	(scm_gobject_primitive_set_property): New function.

	* foo.[ch]: Added properties.

2001-08-31  Martin Baulig  <baulig@suse.de>

	* gobject.scm (gobject-signal-connect-data): Use the new <gclosure> object.
	(gsignal-handler-block gsignal-handler-unblock gsignal-handler-disconnect
	gsignal-handler-connected?): New functions.

	* guile-gnome-gobject-primitives.c
	(GuileGTypeInstance): Killed, use GTypeInstance directly.
	(scm_gtype_instance_primitive_to_instance): New func.
	(scm_gsignal_primitive_handler_block): New func.
	(scm_gsignal_primitive_handler_unblock): New func.
	(scm_gsignal_primitive_handler_disconnect): New func.
	(scm_gsignal_primitive_handler_connected_p): New func.

2001-08-31  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c
	(scm_gvalue_primitive_to_type): Removed, we already have scm_gvalue_to_type.

2001-08-31  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject-primitives.c
	(scm_tc16_gclosure_smob): Removed.
	(scm_gclosure_primitive_invoke): Correctly GC protect the
	GuileGClosure's `func' field.
	
2001-08-31  Martin Baulig  <baulig@suse.de>

	* gobject.scm (<gclosure>): Implement this as a GOOPS class,
	not as a GValue.
	(gclosure-invoke): New generic function.

	* guile-gnome-gobject-primitives.c
	(scm_tc16_gclosure): Renamed to `scm_tc16_gclosure_smob'.
	(scm_gclosure_primitive_invoke): Added return_type argument.
	(scm_gvalue_primitive_to_type): New function.

2001-08-31  Martin Baulig  <baulig@suse.de>

	* gobject.scm (gtype-instance-write): Added method for
	`(type <gtype>) (obj <gvalue>) file)' - creates the class using
	(gtype->class type) and then calls the normal gtype-instance-write.

	* guile-gnome-gobject-primitives.c (scm_gvalue_print): If the class
	doesn't exist yet, use the type as first argument of gtype-instance-write.

2001-08-27  Martin Baulig  <baulig@suse.de>

	* primitives.scm (gflags->element-list): New primitive function.
	(gflags->symbol-list gflags->name-list gflags->value-list): New functions.

2001-08-27  Martin Baulig  <baulig@suse.de>

	* primitives.scm, guile-gnome-gobject-primitives.[ch]: Moved some of the
	internal stuff into a new `(gnome gobject primitives)' module and exported
	most of the methods.

2001-08-25  Martin Baulig  <baulig@suse.de>

	- added basic support for signals.

2001-08-23  Martin Baulig  <baulig@suse.de>

	- added basic gclosure support.

	- added gchararray.

	- added support for flags.

	- added genum-register-static.

	- added gchar, guchar, gint, guint, glong, gulong, gfloat and gdouble.

	- added support for enums.

2001-08-21  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject.c (scm_gtype_children): New func.
	(scm_init_gnome_gobject): Register all fundamental and derived types.

2001-08-21  Martin Baulig  <baulig@suse.de>

	* guile-gnome-gobject.c (scm_sys_gobject_scheme_dir): New func.
	(scm_gobject_register_type): New func.

	* Makefile.am: Create and install documentation.

