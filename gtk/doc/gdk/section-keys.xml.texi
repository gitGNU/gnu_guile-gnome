
@c %start of fragment

@node Key Values
@chapter Key Values
Functions for manipulating keyboard codes

@section Overview
Key values are the codes which are sent whenever a key is pressed or released.
They appear in the field of the @code{<gdk-event-key>} structure, which is
passed to signal handlers for the "key-press-event" and "key-release-event"
signals. The complete list of key values can be found in the
@file{<gdk/gdkkeysyms.h>} header file. @file{<gdk/gdkkeysyms.h>} is not included
in @file{<gtk/gtk.h>}, it must be included independently, because the file is
quite large.

Key values can be converted into a string representation using
@code{gdk-keyval-name}. The reverse function, converting a string to a key
value, is provided by @code{gdk-keyval-from-name}.

The case of key values can be determined using @code{gdk-keyval-is-upper} and
@code{gdk-keyval-is-lower}. Key values can be converted to upper or lower case
using @code{gdk-keyval-to-upper} and @code{gdk-keyval-to-lower}.

When it makes sense, key values can be converted to and from Unicode characters
with @code{gdk-keyval-to-unicode} and @code{gdk-unicode-to-keyval}.

One @code{<gdk-keymap>} object exists for each user display.
@code{gdk-keymap-get-default} returns the @code{<gdk-keymap>} for the default
display; to obtain keymaps for other displays, use
@code{gdk-keymap-get-for-display}. A keymap is a mapping from
@code{<gdk-keymap-key>} to key values. You can think of a
@code{<gdk-keymap-key>} as a representation of a symbol printed on a physical
keyboard key. That is, it contains three pieces of information. First, it
contains the hardware keycode; this is an identifying number for a physical key.
Second, it contains the @dfn{level} of the key. The level indicates which symbol
on the key will be used, in a vertical direction. So on a standard US keyboard,
the key with the number "1" on it also has the exclamation point ("!") character
on it. The level indicates whether to use the "1" or the "!" symbol. The letter
keys are considered to have a lowercase letter at level 0, and an uppercase
letter at level 1, though only the uppercase letter is printed. Third, the
@code{<gdk-keymap-key>} contains a group; groups are not used on standard US
keyboards, but are used in many other countries. On a keyboard with groups,
there can be 3 or 4 symbols printed on a single key. The group indicates
movement in a horizontal direction. Usually groups are used for two different
languages. In group 0, a key might have two English characters, and in group 1
it might have two Hebrew characters. The Hebrew characters will be printed on
the key next to the English characters.

In order to use a keymap to interpret a key event, it's necessary to first
convert the keyboard state into an effective group and level. This is done via a
set of rules that varies widely according to type of keyboard and user
configuration. The function @code{gdk-keymap-translate-keyboard-state} accepts a
keyboard state -- consisting of hardware keycode pressed, active modifiers, and
active group -- applies the appropriate rules, and returns the group/level to be
used to index the keymap, along with the modifiers which did not affect the
group and level. i.e. it returns "unconsumed modifiers." The keyboard group may
differ from the effective group used for keymap lookups because some keys don't
have multiple groups - e.g. the Enter key is always in group 0 regardless of
keyboard state.

Note that @code{gdk-keymap-translate-keyboard-state} also returns the keyval,
i.e. it goes ahead and performs the keymap lookup in addition to telling you
which effective group/level values were used for the lookup.
@code{<gdk-event-key>} already contains this keyval, however, so you don't
normally need to call @code{gdk-keymap-translate-keyboard-state} just to get the
keyval.

@section Usage
@include defuns-keys.xml.texi

@c %end of fragment
