
@c %start of fragment

@node GtkUIManager
@chapter GtkUIManager
Constructing menus and toolbars from an XML description

@section Overview
A @code{<gtk-ui-manager>} constructs a user interface (menus and toolbars) from
one or more UI definitions, which reference actions from one or more action
groups.

@section UI Definitions
The UI definitions are specified in an XML format which can be roughly described
by the following DTD. There are some additional restrictions beyond those
specified in the DTD, e.g. every toolitem must have a toolbar in its anchestry
and every menuitem must have a menubar or popup in its anchestry. Since a
@code{<g-markup>} parser is used to parse the UI description, it must not only
be valid XML, but valid @code{<g-markup>}.

@example 

<!ELEMENT ui          (menubar|toolbar|popup|accelerator)* >
<!ELEMENT menubar     (menuitem|separator|placeholder|menu)* >
<!ELEMENT menu        (menuitem|separator|placeholder|menu)* >
<!ELEMENT popup       (menuitem|separator|placeholder|menu)* >
<!ELEMENT toolbar     (toolitem|separator|placeholder)* >
<!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >
<!ELEMENT menuitem     EMPTY >
<!ELEMENT toolitem     (menu?) >
<!ELEMENT separator    EMPTY >
<!ELEMENT accelerator  EMPTY >
<!ATTLIST menubar      name                  &#x0023;IMPLIED 
                       action                &#x0023;IMPLIED >
<!ATTLIST toolbar      name                  &#x0023;IMPLIED 
                       action                &#x0023;IMPLIED >
<!ATTLIST popup        name                  &#x0023;IMPLIED 
                       action                &#x0023;IMPLIED >
<!ATTLIST placeholder  name                  &#x0023;IMPLIED
                       action                &#x0023;IMPLIED >
<!ATTLIST separator    name                  &#x0023;IMPLIED
                       action                &#x0023;IMPLIED
                       expand   (true|false) &#x0023;IMPLIED >
<!ATTLIST menu         name                  &#x0023;IMPLIED
                       action                &#x0023;REQUIRED
                       position (top|bot)    &#x0023;IMPLIED >
<!ATTLIST menuitem     name                  &#x0023;IMPLIED
                       action                &#x0023;REQUIRED
                       position (top|bot)    &#x0023;IMPLIED >
<!ATTLIST toolitem     name                  &#x0023;IMPLIED
                       action                &#x0023;REQUIRED
                       position (top|bot)    &#x0023;IMPLIED >
<!ATTLIST accelerator  name                  &#x0023;IMPLIED
                       action                &#x0023;REQUIRED >
@end example

If a name is not specified, it defaults to the action. If an action is not
specified either, the element name is used. The name and action attributes must
not contain '/' characters after parsing (since that would mess up path lookup)
and must be usable as XML attributes when enclosed in doublequotes, thus they
must not '"' characters or references to the &quot; entity.

@example 

<ui>
  <menubar>
    <menu name="FileMenu" action="FileMenuAction">
      <menuitem name="New" action="New2Action" />
      <placeholder name="FileMenuAdditions" />
    </menu>
    <menu name="JustifyMenu" action="JustifyMenuAction">
      <menuitem name="Left" action="justify-left"/>
      <menuitem name="Centre" action="justify-center"/>
      <menuitem name="Right" action="justify-right"/>
      <menuitem name="Fill" action="justify-fill"/>
    </menu>
  </menubar>
  <toolbar action="toolbar1">
    <placeholder name="JustifyToolItems">
      <separator/>
      <toolitem name="Left" action="justify-left"/>
      <toolitem name="Centre" action="justify-center"/>
      <toolitem name="Right" action="justify-right"/>
      <toolitem name="Fill" action="justify-fill"/>
      <separator/>
    </placeholder>
  </toolbar>
</ui>
@end example

The constructed widget hierarchy is very similar to the element tree of the XML,
with the exception that placeholders are merged into their parents. The
correspondence of XML elements to widgets should be almost obvious:

@table @var
@item toolbar

@c %start of fragment


@c %end of fragment
@item popup

@c %start of fragment


@c %end of fragment
@item menu

@c %start of fragment


@c %end of fragment
@item menuitem

@c %start of fragment


@c %end of fragment
@item toolitem

@c %start of fragment


@c %end of fragment
@item separator

@c %start of fragment


@c %end of fragment
@item accelerator

@c %start of fragment


@c %end of fragment
@end table

a @code{<gtk-menu-bar>}

a @code{<gtk-toolbar>}

a toplevel @code{<gtk-menu>}

a @code{<gtk-menu>} attached to a menuitem

a @code{<gtk-menu-item>} subclass, the exact type depends on the action

a @code{<gtk-tool-item>} subclass, the exact type depends on the action. Note
that toolitem elements may contain a menu element, but only if their associated
action specifies a @code{<gtk-menu-tool-button>} as proxy.

a @code{<gtk-separator-menu-item>} or @code{<gtk-separator-tool-item>}

a keyboard accelerator

The "position" attribute determines where a constructed widget is positioned
wrt. to its siblings in the partially constructed tree. If it is "top", the
widget is prepended, otherwise it is appended.

@section UI Merging
The most remarkable feature of @code{<gtk-ui-manager>} is that it can overlay a
set of menuitems and toolitems over another one, and demerge them later.

Merging is done based on the names of the XML elements. Each element is
identified by a path which consists of the names of its anchestors, separated by
slashes. For example, the menuitem named "Left" in the example above has the
path @samp{/ui/menubar/JustifyMenu/Left} and the toolitem with the same name has
path @samp{/ui/toolbar1/JustifyToolItems/Left}.

@section Accelerators
Every action has an accelerator path. Accelerators are installed together with
menuitem proxies, but they can also be explicitly added with <accelerator>
elements in the UI definition. This makes it possible to have accelerators for
actions even if they have no visible proxies.

@section Smart Separators
The separators created by @code{<gtk-ui-manager>} are "smart", i.e. they do not
show up in the UI unless they end up between two visible menu or tool items.
Separators which are located at the very beginning or end of the menu or toolbar
containing them, or multiple separators next to each other, are hidden. This is
a useful feature, since the merging of UI elements from multiple sources can
make it hard or impossible to determine in advance whether a separator will end
up in such an unfortunate position.

For separators in toolbars, you can set @samp{expand="true"} to turn them from a
small, visible separator to an expanding, invisible one. Toolitems following an
expanding separator are effectively right-aligned.

@section Empty Menus
Submenus pose similar problems to separators inconnection with merging. It is
impossible to know in advance whether they will end up empty after merging.
@code{<gtk-ui-manager>} offers two ways to treat empty submenus: The behaviour
is chosen based on the "hide_if_empty" property of the action to which the
submenu is associated.

make them disappear by hiding the menu item they're attached to

add an insensitive "Empty" item

@section Usage
@include defuns-gtkuimanager.xml.texi

@c %end of fragment
