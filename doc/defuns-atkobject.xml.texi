
@c %start of fragment

@deftp Class <atk-object>
This @code{<gobject>} class defines the following properties:

@table @code
@item accessible-name
Object instance's name formatted for assistive technology access@item accessible-description
Description of an object, formatted for assistive technology access@item accessible-parent
Is used to notify that the parent has changed@item accessible-value
Is used to notify that the value has changed@item accessible-role
The accessible role of this object@item accessible-component-layer
The accessible layer of this object@item accessible-component-mdi-zorder
The accessible MDI value of this object@item accessible-table-caption
Is used to notify that the table caption has changed; this property should not be used. accessible-table-caption-object should be used instead@item accessible-table-column-description
Is used to notify that the table column description has changed@item accessible-table-column-header
Is used to notify that the table column header has changed@item accessible-table-row-description
Is used to notify that the table row description has changed@item accessible-table-row-header
Is used to notify that the table row header has changed@item accessible-table-summary
Is used to notify that the table summary has changed@item accessible-table-caption-object
Is used to notify that the table caption has changed@item accessible-hypertext-nlinks
The number of links which the current AtkHypertext has@end table

@end deftp

@defop Signal <atk-object> children-changed  (arg0@tie{}@code{<guint>}) (arg1@tie{}@code{<gpointer>})
The signal "children-changed" is emitted when a child is added or removed form
an object. It supports two details: "add" and "remove"

@end defop

@defop Signal <atk-object> focus-event  (arg0@tie{}@code{<gboolean>})
The signal "focus-event" is emitted when an object gains or loses focus.

@end defop

@defop Signal <atk-object> property-change  (arg0@tie{}@code{<gpointer>})
The signal "property-change" is emitted when an object's property value changes.
The detail identifies the name of the property whose value has changed.

@end defop

@defop Signal <atk-object> state-change  (arg0@tie{}@code{<gchararray>}) (arg1@tie{}@code{<gboolean>})
The "state-change" signal is emitted when an object's state changes. The detail
value identifies the state type which has changed.

@end defop

@defop Signal <atk-object> visible-data-changed 
The "visible-data-changed" signal is emitted when the visual appearance of the
object changed.

@end defop

@defop Signal <atk-object> active-descendant-changed  (arg0@tie{}@code{<gpointer>})
The "active-descendant-changed" signal is emitted by an object which has the
state ATK_STATE_MANAGES_DESCENDANTS when the focus object in the object changes.
For instance, a table will emit the signal when the cell in the table which has
focus changes.

@end defop

@deffn Function atk-implementor-ref-accessible  (self@tie{}@code{<atk-implementor*>}) @result{}@tie{} (ret@tie{}@code{<atk-object>})
Gets a reference to an object's @code{<atk-object>} implementation, if the
object implements @code{<atk-object-iface>}

@table @var
@item implementor
The @code{<gobject>} instance which should implement
@code{<atk-implementor-iface>} if a non-null return value is required.

@item ret
a reference to an object's @code{<atk-object>} implementation

@end table

@end deffn

@deffn Function atk-object-get-name  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{mchars})
@deffnx Method get-name
Gets the accessible name of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
a character string representing the accessible name of the object.

@end table

@end deffn

@deffn Function atk-object-get-description  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{mchars})
@deffnx Method get-description
Gets the accessible description of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
a character string representing the accessible description of the accessible.

@end table

@end deffn

@deffn Function atk-object-get-parent  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{<atk-object>})
@deffnx Method get-parent
Gets the accessible parent of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
a @code{<atk-object>} representing the accessible parent of the accessible

@end table

@end deffn

@deffn Function atk-object-ref-accessible-child  (self@tie{}@code{<atk-object>}) (i@tie{}@code{int}) @result{}@tie{} (ret@tie{}@code{<atk-object>})
@deffnx Method ref-accessible-child
Gets a reference to the specified accessible child of the object. The accessible
children are 0-based so the first accessible child is at index 0, the second at
index 1 and so on.

@table @var
@item accessible
an @code{<atk-object>}

@item i
a gint representing the position of the child, starting from 0

@item ret
an @code{<atk-object>} representing the specified accessible child of the
accessible.

@end table

@end deffn

@deffn Function atk-object-ref-relation-set  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{<atk-relation-set>})
@deffnx Method ref-relation-set
Gets the @code{<atk-relation-set>} associated with the object.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
an @code{<atk-relation-set>} representing the relation set of the object.

@end table

@end deffn

@deffn Function atk-object-get-layer  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{<atk-layer>})
@deffnx Method get-layer
@samp{atk_object_get_layer} is deprecated and should not be used in
newly-written code. Use atk_component_get_layer instead.

Gets the layer of the accessible.

Returns:

@table @var
@item accessible
an @code{<atk-object>}

@item ret
an @code{<atk-layer>} which is the layer of the accessible

@end table

@end deffn

@deffn Function atk-object-get-mdi-zorder  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{int})
@deffnx Method get-mdi-zorder
@samp{atk_object_get_mdi_zorder} is deprecated and should not be used in
newly-written code. Use atk_component_get_mdi_zorder instead.

Gets the zorder of the accessible. The value G_MININT will be returned if the
layer of the accessible is not ATK_LAYER_MDI.

Returns:

@table @var
@item accessible
an @code{<atk-object>}

@item ret
a gint which is the zorder of the accessible, i.e. the depth at which the
component is shown in relation to other components in the same container.

@end table

@end deffn

@deffn Function atk-object-get-role  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{<atk-role>})
@deffnx Method get-role
Gets the role of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
an @code{<atk-role>} which is the role of the accessible

@end table

@end deffn

@deffn Function atk-object-ref-state-set  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{<atk-state-set>})
@deffnx Method ref-state-set
Gets a reference to the state set of the accessible; the caller must unreference
it when it is no longer needed.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
a reference to an @code{<atk-state-set>} which is the state set of the
accessible

@end table

@end deffn

@deffn Function atk-object-get-index-in-parent  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{int})
@deffnx Method get-index-in-parent
Gets the 0-based index of this accessible in its parent; returns -1 if the
accessible does not have an accessible parent.

@table @var
@item accessible
an @code{<atk-object>}

@item ret
an integer which is the index of the accessible in its parent

@end table

@end deffn

@deffn Function atk-object-set-name  (self@tie{}@code{<atk-object>}) (name@tie{}@code{mchars})
@deffnx Method set-name
Sets the accessible name of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item name
a character string to be set as the accessible name

@end table

@end deffn

@deffn Function atk-object-set-description  (self@tie{}@code{<atk-object>}) (description@tie{}@code{mchars})
@deffnx Method set-description
Sets the accessible description of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item description
a character string to be set as the accessible description

@end table

@end deffn

@deffn Function atk-object-set-parent  (self@tie{}@code{<atk-object>}) (parent@tie{}@code{<atk-object>})
@deffnx Method set-parent
Sets the accessible parent of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item parent
an @code{<atk-object>} to be set as the accessible parent

@end table

@end deffn

@deffn Function atk-object-set-role  (self@tie{}@code{<atk-object>}) (role@tie{}@code{<atk-role>})
@deffnx Method set-role
Sets the role of the accessible.

@table @var
@item accessible
an @code{<atk-object>}

@item role
an @code{<atk-role>} to be set as the role

@end table

@end deffn

@deffn Function atk-object-notify-state-change  (self@tie{}@code{<atk-object>}) (state@tie{}@code{unsigned-int64}) (value@tie{}@code{bool})
@deffnx Method notify-state-change
Emits a state-change signal for the specified state.

@table @var
@item accessible
an @code{<atk-object>}

@item state
an @code{<atk-state>} whose state is changed

@item value
a gboolean which indicates whether the state is being set on or off

@end table

@end deffn

@deffn Function atk-object-initialize  (self@tie{}@code{<atk-object>}) (data@tie{}@code{<gpointer>})
@deffnx Method initialize
This function is called when implementing subclasses of @code{<atk-object>}. It
does initialization required for the new object. It is intended that this
function should called only in the ...@code{-new} functions used to create an
instance of a subclass of @code{<atk-object>}

@table @var
@item accessible
a @code{<atk-object>}

@item data
a @code{<gpointer>} which identifies the object for which the AtkObject was
created.

@end table

@end deffn

@deffn Function atk-object-add-relationship  (self@tie{}@code{<atk-object>}) (relationship@tie{}@code{<atk-relation-type>}) (target@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method add-relationship
Adds a relationship of the specified type with the specified target.

@table @var
@item object
The @code{<atk-object>} to which an AtkRelation is to be added.

@item relationship
The @code{<atk-relation-type>} of the relation

@item target
The @code{<atk-object>} which is to be the target of the relation.

@item ret
TRUE if the relationship is added.

@end table

@end deffn

@deffn Function atk-object-remove-relationship  (self@tie{}@code{<atk-object>}) (relationship@tie{}@code{<atk-relation-type>}) (target@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method remove-relationship
Removes a relationship of the specified type with the specified target.

@table @var
@item object
The @code{<atk-object>} from which an AtkRelation is to be removed.

@item relationship
The @code{<atk-relation-type>} of the relation

@item target
The @code{<atk-object>} which is the target of the relation to be removed.

@item ret
TRUE if the relationship is removed.

@end table

@end deffn

@deffn Function atk-object-get-attributes  (self@tie{}@code{<atk-object>}) @result{}@tie{} (ret@tie{}@code{<atk-attribute-set*>})
@deffnx Method get-attributes
Get a list of properties applied to this object as a whole, as an
@code{<atk-attribute-set>} consisting of name-value pairs. As such these
attributes may be considered weakly-typed properties or annotations, as distinct
from strongly-typed object data available via other get/set methods. Not all
objects have explicit "name-value pair" @code{<atk-attribute-set>} properties.

Returns:

@table @var
@item accessible
An @code{<atk-object>}.

@item ret
an @code{<atk-attribute-set>} consisting of all explicit properties/annotations
applied to the object, or an empty set if the object has no name-value pair
attributes assigned to it.

@end table

Since ATK 1.12

@end deffn

@deffn Function atk-role-get-name  (role@tie{}@code{<atk-role>}) @result{}@tie{} (ret@tie{}@code{mchars})
Gets the description string describing the @code{<atk-role>}@var{role}.

@table @var
@item role
The @code{<atk-role>} whose name is required

@item ret
the string describing the AtkRole

@end table

@end deffn

@deffn Function atk-role-get-localized-name  (role@tie{}@code{<atk-role>}) @result{}@tie{} (ret@tie{}@code{mchars})
Gets the localized description string describing the
@code{<atk-role>}@var{role}.

@table @var
@item role
The @code{<atk-role>} whose localized name is required

@item ret
the localized string describing the AtkRole

@end table

@end deffn

@deffn Function atk-role-for-name  (name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{<atk-role>})
Get the @code{<atk-role>} type corresponding to a rolew name.

@table @var
@item name
a string which is the (non-localized) name of an ATK role.

@item ret
the @code{<atk-role>} enumerated type corresponding to the specified name, or
@code{<atk-role-invalid>} if no matching role is found.

@end table

@end deffn


@c %end of fragment
