;; -*- scheme -*-

;; This file was generated from the old, hand-tuned gtk.defs and
;; gtk-types.defs using the defs-diff and diff-to-overrides programs in
;; the tools/ directory. I imagine the boxed and interface types cannot
;; be expressed otherwise, but it's a very verbose format for telling
;; which procedures are oddly-named constructors, which ones have some
;; default, (null-ok), and GList-of arguments. It does work though.

(define-boxed
  IconSet
  (in-module "Gtk")
  (c-name "GtkIconSet")
  (gtype-id "GTK_TYPE_ICON_SET"))

(define-boxed
  IconSource
  (in-module "Gtk")
  (c-name "GtkIconSource")
  (gtype-id "GTK_TYPE_ICON_SOURCE")
  (copy-func "gtk_icon_source_copy")
  (release-func "gtk_icon_source_free"))

(define-boxed
  Requisition
  (in-module "Gtk")
  (c-name "GtkRequisition")
  (gtype-id "GTK_TYPE_REQUISITION")
  (fields '("gint" "width") '("gint" "height")))

(define-boxed
  SelectionData
  (in-module "Gtk")
  (c-name "GtkSelectionData")
  (gtype-id "GTK_TYPE_SELECTION_DATA")
  (copy-func "gtk_selection_data_copy")
  (release-func "gtk_selection_data_free")
  (fields
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("GdkAtom" "type")
    '("gint" "format")
    '("guchar*" "data")))

(define-boxed
  TextAttributes
  (in-module "Gtk")
  (c-name "GtkTextAttributes")
  (gtype-id "GTK_TYPE_TEXT_ATTRIBUTES"))

(define-boxed
  TextIter
  (in-module "Gtk")
  (c-name "GtkTextIter")
  (gtype-id "GTK_TYPE_TEXT_ITER")
  (copy-func "gtk_text_iter_copy")
  (release-func "gtk_text_iter_free"))

(define-boxed
  TreeIter
  (in-module "Gtk")
  (c-name "GtkTreeIter")
  (gtype-id "GTK_TYPE_TREE_ITER")
  (copy-func "gtk_tree_iter_copy")
  (release-func "gtk_tree_iter_free"))

(define-interface
  CellEditable
  (in-module "Gtk")
  (c-name "GtkCellEditable")
  (gtype-id "GTK_TYPE_CELL_EDITABLE"))

(define-interface
  Editable
  (in-module "Gtk")
  (c-name "GtkEditable")
  (gtype-id "GTK_TYPE_EDITABLE"))

(define-interface
  TreeDragDest
  (in-module "Gtk")
  (c-name "GtkTreeDragDest")
  (gtype-id "GTK_TYPE_TREE_DRAG_DEST"))

(define-interface
  TreeDragSource
  (in-module "Gtk")
  (c-name "GtkTreeDragSource")
  (gtype-id "GTK_TYPE_TREE_DRAG_SOURCE"))

(define-interface
  TreeModel
  (in-module "Gtk")
  (c-name "GtkTreeModel")
  (gtype-id "GTK_TYPE_TREE_MODEL"))

(define-interface
  TreeSortable
  (in-module "Gtk")
  (c-name "GtkTreeSortable")
  (gtype-id "GTK_TYPE_TREE_SORTABLE"))

(define-interface FileChooser
  (in-module "Gtk")
  (c-name "GtkFileChooser")
  (gtype-id "GTK_TYPE_FILE_CHOOSER"))

;; functions follow

(define-function
  gtk_accel_group_new
  (is-constructor-of GtkAccelGroup)
  (c-name "gtk_accel_group_new")
  (overrides "gtk_accel_group_new")
  (is-constructor-of "GtkAccelGroup")
  (return-type "GtkAccelGroup*"))

(define-function
  gtk_accel_groups_from_object
  (c-name "gtk_accel_groups_from_object")
  (overrides "gtk_accel_groups_from_object")
  (return-type "GSList*-of-GtkAccelGroup*")
  (parameters '("GObject*" "object")))

(define-function
  gtk_adjustment_new
  (c-name "gtk_adjustment_new")
  (overrides "gtk_adjustment_new")
  (is-constructor-of "GtkAdjustment")
  (return-type "GtkObject*")
  (parameters
    '("gdouble" "value" (default "0.0"))
    '("gdouble" "lower" (default "0.0"))
    '("gdouble" "upper" (default "0.0"))
    '("gdouble" "step_increment" (default "0.0"))
    '("gdouble" "page_increment" (default "0.0"))
    '("gdouble" "page_size" (default "0.0"))))

(define-function
  gtk_alignment_new
  (c-name "gtk_alignment_new")
  (overrides "gtk_alignment_new")
  (is-constructor-of "GtkAlignment")
  (return-type "GtkWidget*")
  (parameters
    '("gfloat" "xalign" (default "0.0"))
    '("gfloat" "yalign" (default "0.0"))
    '("gfloat" "xscale" (default "0.0"))
    '("gfloat" "yscale" (default "0.0"))))

(define-function
  gtk_aspect_frame_new
  (c-name "gtk_aspect_frame_new")
  (overrides "gtk_aspect_frame_new")
  (is-constructor-of "GtkAspectFrame")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*"
      "label"
      (null-ok)
      (default "NULL"))
    '("gfloat" "xalign" (default "0.5"))
    '("gfloat" "yalign" (default "0.5"))
    '("gfloat" "ratio" (default "1"))
    '("gboolean" "obey_child" (default "TRUE"))))

(define-function
  gtk_binding_entry_add_signall
  (c-name "gtk_binding_entry_add_signall")
  (overrides "gtk_binding_entry_add_signall")
  (return-type "none")
  (parameters
    '("GtkBindingSet*" "binding_set")
    '("guint" "keyval")
    '("GdkModifierType" "modifiers")
    '("const-gchar*" "signal_name")
    '("GSList*-of-GtkBindingArg*" "binding_args")))

(define-function
  gtk_button_new_from_stock
  (c-name "gtk_button_new_from_stock")
  (overrides "gtk_button_new_from_stock")
  (is-constructor-of "GtkButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "stock_id")))

(define-function
  gtk_button_new_with_label
  (c-name "gtk_button_new_with_label")
  (overrides "gtk_button_new_with_label")
  (is-constructor-of "GtkButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_button_new_with_mnemonic
  (c-name "gtk_button_new_with_mnemonic")
  (overrides "gtk_button_new_with_mnemonic")
  (is-constructor-of "GtkButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_check_button_new_with_label
  (c-name "gtk_check_button_new_with_label")
  (overrides "gtk_check_button_new_with_label")
  (is-constructor-of "GtkCheckButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_check_button_new_with_mnemonic
  (c-name "gtk_check_button_new_with_mnemonic")
  (overrides "gtk_check_button_new_with_mnemonic")
  (is-constructor-of "GtkCheckButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_check_menu_item_new_with_label
  (c-name "gtk_check_menu_item_new_with_label")
  (overrides "gtk_check_menu_item_new_with_label")
  (is-constructor-of "GtkCheckMenuItem")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_check_menu_item_new_with_mnemonic
  (c-name "gtk_check_menu_item_new_with_mnemonic")
  (overrides
    "gtk_check_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkCheckMenuItem")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_check_version
  (c-name "gtk_check_version")
  (overrides "gtk_check_version")
  (return-type "const-gchar*")
  (parameters
    '("guint" "required_major")
    '("guint" "required_minor")
    '("guint" "required_micro")))

(define-function
  gtk_dialog_new_with_buttons
  (c-name "gtk_dialog_new_with_buttons")
  (overrides "gtk_dialog_new_with_buttons")
  (is-constructor-of "GtkDialog")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*"
      "title"
      (null-ok)
      (default "NULL"))
    '("GtkWindow*"
      "parent"
      (null-ok)
      (default "NULL"))
    '("GtkDialogFlags" "flags" (default "0"))
    '("const-gchar*"
      "first_button_text"
      (null-ok)
      (default "NULL")))
  (varargs #t))

(define-function
  gtk_file_selection_new
  (c-name "gtk_file_selection_new")
  (overrides "gtk_file_selection_new")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*"
      "title"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_frame_new
  (c-name "gtk_frame_new")
  (overrides "gtk_frame_new")
  (is-constructor-of "GtkFrame")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*"
      "label"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_gc_get
  (c-name "gtk_gc_get")
  (overrides "gtk_gc_get")
  (return-type "GdkGC*")
  (parameters
    '("gint" "depth")
    '("GdkColormap*" "colormap")
    '("GdkGCValues*" "values")
    '("GdkGCValuesMask" "values_mask")))

(define-function
  gtk_hbox_new
  (c-name "gtk_hbox_new")
  (overrides "gtk_hbox_new")
  (is-constructor-of "GtkHBox")
  (return-type "GtkWidget*")
  (parameters
    '("gboolean" "homogeneous" (default "FALSE"))
    '("gint" "spacing" (default "0"))))

(define-function
  gtk_hbutton_box_new
  (c-name "gtk_hbutton_box_new")
  (overrides "gtk_hbutton_box_new")
  (is-constructor-of "GtkHButtonBox")
  (return-type "GtkWidget*"))

(define-function
  gtk_hpaned_new
  (c-name "gtk_hpaned_new")
  (overrides "gtk_hpaned_new")
  (is-constructor-of "GtkHPaned")
  (return-type "GtkWidget*"))

(define-function
  gtk_hruler_new
  (c-name "gtk_hruler_new")
  (overrides "gtk_hruler_new")
  (is-constructor-of "GtkHRuler")
  (return-type "GtkWidget*"))

(define-function
  gtk_hscale_new
  (c-name "gtk_hscale_new")
  (overrides "gtk_hscale_new")
  (is-constructor-of "GtkHScale")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "adjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_hscale_new_with_range
  (c-name "gtk_hscale_new_with_range")
  (overrides "gtk_hscale_new_with_range")
  (is-constructor-of "GtkHScale")
  (return-type "GtkWidget*")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")))

(define-function
  gtk_hscrollbar_new
  (c-name "gtk_hscrollbar_new")
  (overrides "gtk_hscrollbar_new")
  (is-constructor-of "GtkHScrollbar")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "adjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_hseparator_new
  (c-name "gtk_hseparator_new")
  (overrides "gtk_hseparator_new")
  (is-constructor-of "GtkHSeparator")
  (return-type "GtkWidget*"))

(define-function
  gtk_icon_set_new_from_pixbuf
  (c-name "gtk_icon_set_new_from_pixbuf")
  (overrides "gtk_icon_set_new_from_pixbuf")
  (return-type "GtkIconSet*")
  (is-constructor-of "GtkIconSet")
  (parameters '("GdkPixbuf*" "pixbuf")))

(define-function
  gtk_icon_size_get_name
  (c-name "gtk_icon_size_get_name")
  (overrides "gtk_icon_size_get_name")
  (return-type "const-gchar*")
  (parameters '("GtkIconSize" "size")))

(define-function
  gtk_im_context_simple_new
  (is-constructor-of "GtkIMContextSimple")
  (c-name "gtk_im_context_simple_new")
  (overrides "gtk_im_context_simple_new")
  (return-type "GtkIMContext*"))

(define-function
  gtk_im_multicontext_new
  (c-name "gtk_im_multicontext_new")
  (overrides "gtk_im_multicontext_new")
  (is-constructor-of "GtkIMMulticontext")
  (return-type "GtkIMContext*"))

(define-function
  gtk_image_menu_item_new_from_stock
  (c-name "gtk_image_menu_item_new_from_stock")
  (overrides "gtk_image_menu_item_new_from_stock")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkAccelGroup*" "accel_group")))

(define-function
  gtk_image_menu_item_new_with_label
  (c-name "gtk_image_menu_item_new_with_label")
  (overrides "gtk_image_menu_item_new_with_label")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_image_menu_item_new_with_mnemonic
  (c-name "gtk_image_menu_item_new_with_mnemonic")
  (overrides
    "gtk_image_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkImageMenuItem")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_image_new_from_animation
  (c-name "gtk_image_new_from_animation")
  (overrides "gtk_image_new_from_animation")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters '("GdkPixbufAnimation*" "animation")))

(define-function
  gtk_image_new_from_file
  (c-name "gtk_image_new_from_file")
  (overrides "gtk_image_new_from_file")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "filename")))

(define-function
  gtk_image_new_from_icon_set
  (c-name "gtk_image_new_from_icon_set")
  (overrides "gtk_image_new_from_icon_set")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters
    '("GtkIconSet*" "icon_set")
    '("GtkIconSize" "size")))

(define-function
  gtk_image_new_from_image
  (c-name "gtk_image_new_from_image")
  (overrides "gtk_image_new_from_image")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters
    '("GdkImage*" "image")
    '("GdkBitmap*" "mask")))

(define-function
  gtk_image_new_from_pixbuf
  (c-name "gtk_image_new_from_pixbuf")
  (overrides "gtk_image_new_from_pixbuf")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters '("GdkPixbuf*" "pixbuf")))

(define-function
  gtk_image_new_from_pixmap
  (c-name "gtk_image_new_from_pixmap")
  (overrides "gtk_image_new_from_pixmap")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")))

(define-function
  gtk_image_new_from_stock
  (c-name "gtk_image_new_from_stock")
  (overrides "gtk_image_new_from_stock")
  (is-constructor-of "GtkImage")
  (return-type "GtkWidget*")
  (parameters
    '("const-gchar*" "stock_id")
    '("GtkIconSize" "size")))

(define-function
  gtk_label_new_with_mnemonic
  (c-name "gtk_label_new_with_mnemonic")
  (overrides "gtk_label_new_with_mnemonic")
  (is-constructor-of "GtkLabel")
  (return-type "GtkWidget*")
  (parameters '("const-char*" "str")))

(define-function
  gtk_layout_new
  (c-name "gtk_layout_new")
  (overrides "gtk_layout_new")
  (is-constructor-of "GtkLayout")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "hadjustment"
      (null-ok)
      (default "NULL"))
    '("GtkAdjustment*"
      "vadjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_list_store_newv
  (c-name "gtk_list_store_newv")
  (overrides "gtk_list_store_newv")
  (is-constructor-of "GtkListStore")
  (return-type "GtkListStore*")
  (parameters
    '("gint" "n_columns")
    '("GType*" "types")))

(define-function
  gtk_main_iteration_do
  (c-name "gtk_main_iteration_do")
  (overrides "gtk_main_iteration_do")
  (return-type "gboolean")
  (parameters
    '("gboolean" "blocking" (default "TRUE"))))

(define-function
  gtk_menu_item_new_with_label
  (c-name "gtk_menu_item_new_with_label")
  (overrides "gtk_menu_item_new_with_label")
  (is-constructor-of "GtkMenuItem")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_menu_item_new_with_mnemonic
  (c-name "gtk_menu_item_new_with_mnemonic")
  (overrides "gtk_menu_item_new_with_mnemonic")
  (is-constructor-of "GtkMenuItem")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_radio_button_new_from_widget
  (is-constructor-of "GtkRadioButton")
  (c-name "gtk_radio_button_new_from_widget")
  (overrides "gtk_radio_button_new_from_widget")
  (return-type "GtkWidget*")
  (parameters '("GtkRadioButton*" "group")))

(define-function
  gtk_radio_button_new_with_label_from_widget
  (is-constructor-of "GtkRadioButton")
  (c-name
    "gtk_radio_button_new_with_label_from_widget")
  (overrides
    "gtk_radio_button_new_with_label_from_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioButton*" "group")
    '("const-gchar*" "label")))

(define-function
  gtk_radio_button_new_with_mnemonic_from_widget
  (is-constructor-of "GtkRadioButton")
  (c-name
    "gtk_radio_button_new_with_mnemonic_from_widget")
  (overrides
    "gtk_radio_button_new_with_mnemonic_from_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioButton*" "group")
    '("const-gchar*" "label")))

(define-function
  gtk_radio_menu_item_new_from_widget
  (is-contructor-of "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_new_from_widget")
  (overrides "gtk_radio_menu_item_new_from_widget")
  (return-type "GtkWidget*")
  (parameters '("GtkRadioMenuItem*" "group")))

(define-function
  gtk_radio_menu_item_new_with_label_from_widget
  (is-contructor-of "GtkRadioMenuItem")
  (c-name
    "gtk_radio_menu_item_new_with_label_from_widget")
  (overrides
    "gtk_radio_menu_item_new_with_label_from_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioMenuItem*" "group")
    '("const-gchar*" "label")))

(define-function
  gtk_radio_menu_item_new_with_mnemonic_from_widget
  (is-contructor-of "GtkRadioMenuItem")
  (c-name
    "gtk_radio_menu_item_new_with_mnemonic_from_widget")
  (overrides
    "gtk_radio_menu_item_new_with_mnemonic_from_widget")
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioMenuItem*" "group")
    '("const-gchar*" "label")))

(define-function
  gtk_rc_scanner_new
  (c-name "gtk_rc_scanner_new")
  (overrides "gtk_rc_scanner_new")
  (is-constructor-of "GScanner")
  (return-type "GScanner*"))

(define-function
  gtk_rc_style_new
  (c-name "gtk_rc_style_new")
  (overrides "gtk_rc_style_new")
  (is-constructor-of "GtkRCStyle")
  (return-type "GtkRcStyle*"))

(define-function
  gtk_scrolled_window_new
  (c-name "gtk_scrolled_window_new")
  (overrides "gtk_scrolled_window_new")
  (is-constructor-of "GtkScrolledWindow")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "hadjustment"
      (null-ok)
      (default "NULL"))
    '("GtkAdjustment*"
      "vadjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_selection_owner_set_for_display
  (c-name "gtk_selection_owner_set_for_display")
  (overrides "gtk_selection_owner_set_for_display")
  (return-type "gboolean")
  (parameters
    '("GdkDisplay*" "display")
    '("GtkWidget*" "widget")
    '("GdkAtom" "selection")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))))

(define-function
  gtk_spin_button_new
  (c-name "gtk_spin_button_new")
  (overrides "gtk_spin_button_new")
  (is-constructor-of "GtkSpinButton")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "adjustment"
      (null-ok)
      (default "NULL"))
    '("gdouble" "climb_rate" (default "0.0"))
    '("guint" "digits" (default "0"))))

(define-function
  gtk_spin_button_new_with_range
  (c-name "gtk_spin_button_new_with_range")
  (overrides "gtk_spin_button_new_with_range")
  (is-constructor-of "GtkSpinButton")
  (return-type "GtkWidget*")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")))

(define-function
  gtk_stock_list_ids
  (c-name "gtk_stock_list_ids")
  (overrides "gtk_stock_list_ids")
  (return-type "GSList*-of-char*"))

(define-function
  gtk_table_new
  (c-name "gtk_table_new")
  (overrides "gtk_table_new")
  (is-constructor-of "GtkTable")
  (return-type "GtkWidget*")
  (parameters
    '("guint" "rows" (default "1"))
    '("guint" "columns" (default "1"))
    '("gboolean" "homogeneous" (default "FALSE"))))

(define-function
  gtk_text_buffer_new
  (c-name "gtk_text_buffer_new")
  (overrides "gtk_text_buffer_new")
  (is-constructor-of "GtkTextBuffer")
  (return-type "GtkTextBuffer*")
  (parameters
    '("GtkTextTagTable*"
      "table"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_text_tag_new
  (c-name "gtk_text_tag_new")
  (overrides "gtk_text_tag_new")
  (is-constructor-of "GtkTextTag")
  (return-type "GtkTextTag*")
  (parameters
    '("const-gchar*"
      "name"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_text_view_new_with_buffer
  (c-name "gtk_text_view_new_with_buffer")
  (overrides "gtk_text_view_new_with_buffer")
  (is-constructor-of "GtkTextView")
  (return-type "GtkWidget*")
  (parameters
    '("GtkTextBuffer*"
      "buffer"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_toggle_button_new_with_label
  (c-name "gtk_toggle_button_new_with_label")
  (overrides "gtk_toggle_button_new_with_label")
  (is-constructor-of "GtkToggleButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_toggle_button_new_with_mnemonic
  (c-name "gtk_toggle_button_new_with_mnemonic")
  (overrides "gtk_toggle_button_new_with_mnemonic")
  (is-constructor-of "GtkToggleButton")
  (return-type "GtkWidget*")
  (parameters '("const-gchar*" "label")))

(define-function
  gtk_tree_model_sort_new_with_model
  (c-name "gtk_tree_model_sort_new_with_model")
  (overrides "gtk_tree_model_sort_new_with_model")
  (is-constructor-of "GtkTreeModelSort")
  (return-type "GtkTreeModel*")
  (parameters '("GtkTreeModel*" "child_model")))

(define-function
  gtk_tree_path_new_from_string
  (c-name "gtk_tree_path_new_from_string")
  (overrides "gtk_tree_path_new_from_string")
  (return-type "GtkTreePath*")
  (parameters
    '("gchar*" "path")
    '("const-gchar*" "path")))

(define-function
  gtk_tree_row_reference_new_proxy
  (c-name "gtk_tree_row_reference_new_proxy")
  (overrides "gtk_tree_row_reference_new_proxy")
  (is-constructor-of "GtkTreeRowReference")
  (return-type "GtkTreeRowReference*")
  (parameters
    '("GObject*" "proxy")
    '("GtkTreeModel*" "model")
    '("GtkTreePath*" "path")))

(define-function
  gtk_tree_store_newv
  (c-name "gtk_tree_store_newv")
  (overrides "gtk_tree_store_newv")
  (is-constructor-of "GtkTreeStore")
  (return-type "GtkTreeStore*")
  (parameters
    '("gint" "n_columns")
    '("GType*" "types")))

(define-function
  gtk_tree_view_column_new_with_attributes
  (c-name
    "gtk_tree_view_column_new_with_attributes")
  (overrides
    "gtk_tree_view_column_new_with_attributes")
  (is-constructor-of "GtkTreeViewColumn")
  (return-type "GtkTreeViewColumn*")
  (parameters
    '("const-gchar*" "title")
    '("GtkCellRenderer*" "cell"))
  (varargs #t))

(define-function
  gtk_tree_view_new_with_model
  (c-name "gtk_tree_view_new_with_model")
  (overrides "gtk_tree_view_new_with_model")
  (is-constructor-of "GtkTreeView")
  (return-type "GtkWidget*")
  (parameters
    '("GtkTreeModel*"
      "model"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_vbox_new
  (c-name "gtk_vbox_new")
  (overrides "gtk_vbox_new")
  (is-constructor-of "GtkVBox")
  (return-type "GtkWidget*")
  (parameters
    '("gboolean" "homogeneous" (default "FALSE"))
    '("gint" "spacing" (default "0"))))

(define-function
  gtk_vbutton_box_new
  (c-name "gtk_vbutton_box_new")
  (overrides "gtk_vbutton_box_new")
  (is-constructor-of "GtkVButtonBox")
  (return-type "GtkWidget*"))

(define-function
  gtk_viewport_new
  (c-name "gtk_viewport_new")
  (overrides "gtk_viewport_new")
  (is-constructor-of "GtkViewport")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "hadjustment"
      (null-ok)
      (default "NULL"))
    '("GtkAdjustment*"
      "vadjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_vpaned_new
  (c-name "gtk_vpaned_new")
  (overrides "gtk_vpaned_new")
  (is-constructor-of "GtkVPaned")
  (return-type "GtkWidget*"))

(define-function
  gtk_vruler_new
  (c-name "gtk_vruler_new")
  (overrides "gtk_vruler_new")
  (is-constructor-of "GtkVRuler")
  (return-type "GtkWidget*"))

(define-function
  gtk_vscale_new
  (c-name "gtk_vscale_new")
  (overrides "gtk_vscale_new")
  (is-constructor-of "GtkVScale")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "adjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_vscale_new_with_range
  (c-name "gtk_vscale_new_with_range")
  (overrides "gtk_vscale_new_with_range")
  (is-constructor-of "GtkVScale")
  (return-type "GtkWidget*")
  (parameters
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")))

(define-function
  gtk_vscrollbar_get_type
  (c-name "gtk_vscrollbar_get_type")
  (overrides "gtk_vscrollbar_get_type")
  (return-type "GType"))

(define-function
  gtk_vscrollbar_new
  (c-name "gtk_vscrollbar_new")
  (overrides "gtk_vscrollbar_new")
  (is-constructor-of "GtkVScrollbar")
  (return-type "GtkWidget*")
  (parameters
    '("GtkAdjustment*"
      "adjustment"
      (null-ok)
      (default "NULL"))))

(define-function
  gtk_vseparator_new
  (c-name "gtk_vseparator_new")
  (overrides "gtk_vseparator_new")
  (is-constructor-of "GtkVSeparator")
  (return-type "GtkWidget*"))

(define-function
  gtk_window_get_default_icon_list
  (c-name "gtk_window_get_default_icon_list")
  (overrides "gtk_window_get_default_icon_list")
  (return-type "GList*-of-GdkPixbuf*"))

(define-function
  gtk_window_list_toplevels
  (c-name "gtk_window_list_toplevels")
  (overrides "gtk_window_list_toplevels")
  (return-type "GList*-of-GtkWindow*"))

(define-function
  gtk_window_new
  (c-name "gtk_window_new")
  (overrides "gtk_window_new")
  (is-constructor-of "GtkWindow")
  (return-type "GtkWidget*")
  (caller-owns-return #f)
  (parameters
    '("GtkWindowType"
      "type"
      (default "GTK_WINDOW_TOPLEVEL"))))

(define-function
  gtk_window_set_default_icon_list
  (c-name "gtk_window_set_default_icon_list")
  (overrides "gtk_window_set_default_icon_list")
  (return-type "none")
  (parameters '("GList*-of-GdkPixbuf*" "list")))

(define-method
  get_proxies
  (of-object "GtkAction")
  (c-name "gtk_action_get_proxies")
  (overrides "gtk_action_get_proxies")
  (return-type "GSList*-of-GtkWidget*"))

(define-method
  list_actions
  (of-object "GtkActionGroup")
  (c-name "gtk_action_group_list_actions")
  (overrides "gtk_action_group_list_actions")
  (return-type "GList*-of-GtkAction*"))

(define-method
  set
  (of-object "GtkAspectFrame")
  (c-name "gtk_aspect_frame_set")
  (overrides "gtk_aspect_frame_set")
  (return-type "none")
  (parameters
    '("gfloat" "xalign" (default "0.0"))
    '("gfloat" "yalign" (default "0.0"))
    '("gfloat" "ratio" (default "1.0"))
    '("gboolean" "obey_child" (default "1"))))

(define-method
  copy
  (of-object "GtkBorder")
  (c-name "gtk_border_copy")
  (overrides "gtk_border_copy")
  (return-type "GtkBorder*")
  (caller-owns-return #t))

(define-method
  free
  (of-object "GtkBorder")
  (c-name "gtk_border_free")
  (overrides "gtk_border_free")
  (return-type "none"))

(define-method
  pack_end
  (of-object "GtkBox")
  (c-name "gtk_box_pack_end")
  (overrides "gtk_box_pack_end")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "expand" (default "TRUE"))
    '("gboolean" "fill" (default "TRUE"))
    '("guint" "padding" (default "0"))))

(define-method
  pack_start
  (of-object "GtkBox")
  (c-name "gtk_box_pack_start")
  (overrides "gtk_box_pack_start")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "expand" (default "TRUE"))
    '("gboolean" "fill" (default "TRUE"))
    '("guint" "padding" (default "0"))))

(define-method
  get_children
  (of-object "GtkContainer")
  (c-name "gtk_container_get_children")
  (overrides "gtk_container_get_children")
  (return-type "GList*-of-GtkWidget*"))

(define-method
  set_focus_chain
  (of-object "GtkContainer")
  (c-name "gtk_container_set_focus_chain")
  (overrides "gtk_container_set_focus_chain")
  (return-type "none")
  (parameters
    '("GList*-of-GtkWidget*" "focusable_widgets")))

(define-method
  set_gamma
  (of-object "GtkCurve")
  (c-name "gtk_curve_set_gamma")
  (overrides "gtk_curve_set_gamma")
  (return-type "none")
  (parameters '("gfloat" "gamma")))

(define-method
  drag_begin
  (of-object "GtkWidget")
  (c-name "gtk_drag_begin")
  (overrides "gtk_drag_begin")
  (return-type "GdkDragContext*")
  (parameters
    '("GtkTargetList*" "targets")
    '("GdkDragAction" "actions")
    '("gint" "button")
    '("GdkEvent*" "event")))

(define-method
  drag_check_threshold
  (of-object "GtkWidget")
  (c-name "gtk_drag_check_threshold")
  (overrides "gtk_drag_check_threshold")
  (return-type "gboolean")
  (parameters
    '("gint" "start_x")
    '("gint" "start_y")
    '("gint" "current_x")
    '("gint" "current_y")))

(define-method
  drag_dest_find_target
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_find_target")
  (overrides "gtk_drag_dest_find_target")
  (return-type "GdkAtom")
  (parameters
    '("GdkDragContext*" "context")
    '("GtkTargetList*" "target_list")))

(define-method
  drag_dest_get_target_list
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_get_target_list")
  (overrides "gtk_drag_dest_get_target_list")
  (return-type "GtkTargetList*"))

(define-method
  drag_dest_set_proxy
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_set_proxy")
  (overrides "gtk_drag_dest_set_proxy")
  (return-type "none")
  (parameters
    '("GdkWindow*" "proxy_window")
    '("GdkDragProtocol" "protocol")
    '("gboolean" "use_coordinates")))

(define-method
  drag_dest_set_target_list
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_set_target_list")
  (overrides "gtk_drag_dest_set_target_list")
  (return-type "none")
  (parameters '("GtkTargetList*" "target_list")))

(define-method
  drag_dest_unset
  (of-object "GtkWidget")
  (c-name "gtk_drag_dest_unset")
  (overrides "gtk_drag_dest_unset")
  (return-type "none"))

(define-method
  finish
  (of-object "GdkDragContext")
  (c-name "gtk_drag_finish")
  (overrides "gtk_drag_finish")
  (return-type "none")
  (parameters
    '("gboolean" "success")
    '("gboolean" "del")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))))

(define-method
  drag_get_data
  (of-object "GtkWidget")
  (c-name "gtk_drag_get_data")
  (overrides "gtk_drag_get_data")
  (return-type "none")
  (parameters
    '("GdkDragContext*" "context")
    '("GdkAtom" "target")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))))

(define-method
  get_source_widget
  (of-object "GdkDragContext")
  (c-name "gtk_drag_get_source_widget")
  (overrides "gtk_drag_get_source_widget")
  (return-type "GtkWidget*"))

(define-method
  drag_highlight
  (of-object "GtkWidget")
  (c-name "gtk_drag_highlight")
  (overrides "gtk_drag_highlight")
  (return-type "none"))

(define-method
  set_icon_default
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_default")
  (overrides "gtk_drag_set_icon_default")
  (return-type "none"))

(define-method
  set_icon_pixbuf
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixbuf")
  (overrides "gtk_drag_set_icon_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
    '("gint" "hot_x")
    '("gint" "hot_y")))

(define-method
  set_icon_pixmap
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_pixmap")
  (overrides "gtk_drag_set_icon_pixmap")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask")
    '("gint" "hot_x")
    '("gint" "hot_y")))

(define-method
  set_icon_stock
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_stock")
  (overrides "gtk_drag_set_icon_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id")
    '("gint" "hot_x")
    '("gint" "hot_y")))

(define-method
  set_icon_widget
  (of-object "GdkDragContext")
  (c-name "gtk_drag_set_icon_widget")
  (overrides "gtk_drag_set_icon_widget")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("gint" "hot_x")
    '("gint" "hot_y")))

(define-method
  drag_source_set
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set")
  (overrides "gtk_drag_source_set")
  (return-type "none")
  (parameters
    '("GdkModifierType" "start_button_mask")
    '("const-GtkTargetEntry*" "targets")
    '("gint" "n_targets")
    '("GdkDragAction" "actions")))

(define-method
  drag_source_set_icon
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon")
  (overrides "gtk_drag_source_set_icon")
  (return-type "none")
  (parameters
    '("GdkColormap*" "colormap")
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok) (default "NULL"))))

(define-method
  drag_source_set_icon_pixbuf
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon_pixbuf")
  (overrides "gtk_drag_source_set_icon_pixbuf")
  (return-type "none")
  (parameters '("GdkPixbuf*" "pixbuf")))

(define-method
  drag_source_set_icon_stock
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_set_icon_stock")
  (overrides "gtk_drag_source_set_icon_stock")
  (return-type "none")
  (parameters '("const-gchar*" "stock_id")))

(define-method
  drag_source_unset
  (of-object "GtkWidget")
  (c-name "gtk_drag_source_unset")
  (overrides "gtk_drag_source_unset")
  (return-type "none"))

(define-method
  drag_unhighlight
  (of-object "GtkWidget")
  (c-name "gtk_drag_unhighlight")
  (overrides "gtk_drag_unhighlight")
  (return-type "none"))

(define-method
  delete_action
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_delete_action")
  (overrides "gtk_entry_completion_delete_action")
  (return-type "none")
  (parameters '("gint" "index")))

(define-method
  insert_action_markup
  (of-object "GtkEntryCompletion")
  (c-name
    "gtk_entry_completion_insert_action_markup")
  (overrides
    "gtk_entry_completion_insert_action_markup")
  (return-type "none")
  (parameters
    '("gint" "index")
    '("const-gchar*" "markup")))

(define-method
  insert_action_text
  (of-object "GtkEntryCompletion")
  (c-name
    "gtk_entry_completion_insert_action_text")
  (overrides
    "gtk_entry_completion_insert_action_text")
  (return-type "none")
  (parameters
    '("gint" "index")
    '("const-gchar*" "text")))

(define-method
  get_filenames
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_filenames")
  (overrides "gtk_file_chooser_get_filenames")
  (return-type "GSList*-of-gchar*")
  (caller-owns-return #t))

(define-method
  get_uris
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_get_uris")
  (overrides "gtk_file_chooser_get_uris")
  (return-type "GSList*-of-gchar*")
  (caller-owns-return #t))

(define-method
  list_filters
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_list_filters")
  (overrides "gtk_file_chooser_list_filters")
  (return-type "GSList*-of-GtkFileFilter*"))

(define-method
  list_shortcut_folder_uris
  (of-object "GtkFileChooser")
  (c-name
    "gtk_file_chooser_list_shortcut_folder_uris")
  (overrides
    "gtk_file_chooser_list_shortcut_folder_uris")
  (return-type "GSList*-of-gchar*")
  (caller-owns-return #t))

(define-method
  list_shortcut_folders
  (of-object "GtkFileChooser")
  (c-name "gtk_file_chooser_list_shortcut_folders")
  (overrides
    "gtk_file_chooser_list_shortcut_folders")
  (return-type "GSList*-of-gchar*")
  (caller-owns-return #t))

(define-method
  set_label
  (of-object "GtkFrame")
  (c-name "gtk_frame_set_label")
  (overrides "gtk_frame_set_label")
  (return-type "none")
  (parameters '("const-gchar*" "label" (null-ok))))

(define-method
  grab_add
  (of-object "GtkWidget")
  (c-name "gtk_grab_add")
  (overrides "gtk_grab_add")
  (return-type "none"))

(define-method
  grab_remove
  (of-object "GtkWidget")
  (c-name "gtk_grab_remove")
  (overrides "gtk_grab_remove")
  (return-type "none"))

(define-method
  copy
  (of-object "GtkIconSet")
  (c-name "gtk_icon_set_copy")
  (overrides "gtk_icon_set_copy")
  (return-type "GtkIconSet*")
  (caller-owns-return #t))

(define-method
  copy
  (of-object "GtkIconSource")
  (c-name "gtk_icon_source_copy")
  (overrides "gtk_icon_source_copy")
  (return-type "GtkIconSource*")
  (caller-owns-return #t))

(define-method
  list_icons
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_list_icons")
  (overrides "gtk_icon_theme_list_icons")
  (return-type "GList*-of-gchar*")
  (caller-owns-return #t)
  (parameters '("const-gchar*" "context")))

(define-method
  set_from_file
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_file")
  (overrides "gtk_image_set_from_file")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename" (null-ok))))

(define-method
  set_from_image
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_image")
  (overrides "gtk_image_set_from_image")
  (return-type "none")
  (parameters
    '("GdkImage*" "gdk_image" (null-ok))
    '("GdkBitmap*" "mask" (null-ok))))

(define-method
  set_from_pixbuf
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_pixbuf")
  (overrides "gtk_image_set_from_pixbuf")
  (return-type "none")
  (parameters '("GdkPixbuf*" "pixbuf" (null-ok))))

(define-method
  set_from_pixmap
  (of-object "GtkImage")
  (c-name "gtk_image_set_from_pixmap")
  (overrides "gtk_image_set_from_pixmap")
  (return-type "none")
  (parameters
    '("GdkPixmap*" "pixmap")
    '("GdkBitmap*" "mask" (null-ok))))

(define-method
  set_hadjustment
  (of-object "GtkLayout")
  (c-name "gtk_layout_set_hadjustment")
  (overrides "gtk_layout_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))))

(define-method
  set_vadjustment
  (of-object "GtkLayout")
  (c-name "gtk_layout_set_vadjustment")
  (overrides "gtk_layout_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))))

(define-method
  popup
  (of-object "GtkMenu")
  (c-name "gtk_menu_popup")
  (overrides "gtk_menu_popup")
  (return-type "none")
  (parameters
    '("GtkWidget*" "parent_menu_shell" (null-ok))
    '("GtkWidget*" "parent_menu_item" (null-ok))
    '("GtkMenuPositionFunc" "func")
    '("gpointer" "data")
    '("guint" "button")
    '("guint32" "activate_time")))

(define-method
  set_active
  (of-object "GtkMenu")
  (c-name "gtk_menu_set_active")
  (overrides "gtk_menu_set_active")
  (return-type "none")
  (parameters '("guint" "index")))

(define-method
  paint_arrow
  (of-object "GtkStyle")
  (c-name "gtk_paint_arrow")
  (overrides "gtk_paint_arrow")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("GtkArrowType" "arrow_type")
    '("gboolean" "fill")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_box
  (of-object "GtkStyle")
  (c-name "gtk_paint_box")
  (overrides "gtk_paint_box")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_box_gap
  (of-object "GtkStyle")
  (c-name "gtk_paint_box_gap")
  (overrides "gtk_paint_box_gap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")))

(define-method
  paint_check
  (of-object "GtkStyle")
  (c-name "gtk_paint_check")
  (overrides "gtk_paint_check")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_diamond
  (of-object "GtkStyle")
  (c-name "gtk_paint_diamond")
  (overrides "gtk_paint_diamond")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_expander
  (of-object "GtkStyle")
  (c-name "gtk_paint_expander")
  (overrides "gtk_paint_expander")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("GtkExpanderStyle" "expander_style")))

(define-method
  paint_extension
  (of-object "GtkStyle")
  (c-name "gtk_paint_extension")
  (overrides "gtk_paint_extension")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")))

(define-method
  paint_flat_box
  (of-object "GtkStyle")
  (c-name "gtk_paint_flat_box")
  (overrides "gtk_paint_flat_box")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_focus
  (of-object "GtkStyle")
  (c-name "gtk_paint_focus")
  (overrides "gtk_paint_focus")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_handle
  (of-object "GtkStyle")
  (c-name "gtk_paint_handle")
  (overrides "gtk_paint_handle")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")))

(define-method
  paint_hline
  (of-object "GtkStyle")
  (c-name "gtk_paint_hline")
  (overrides "gtk_paint_hline")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x1")
    '("gint" "x2")
    '("gint" "y")))

(define-method
  paint_layout
  (of-object "GtkStyle")
  (c-name "gtk_paint_layout")
  (overrides "gtk_paint_layout")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("gboolean" "use_text")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("PangoLayout*" "layout")))

(define-method
  paint_option
  (of-object "GtkStyle")
  (c-name "gtk_paint_option")
  (overrides "gtk_paint_option")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_polygon
  (of-object "GtkStyle")
  (c-name "gtk_paint_polygon")
  (overrides "gtk_paint_polygon")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("GdkPoint*" "points")
    '("gint" "npoints")
    '("gboolean" "fill")))

(define-method
  paint_resize_grip
  (of-object "GtkStyle")
  (c-name "gtk_paint_resize_grip")
  (overrides "gtk_paint_resize_grip")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("GdkWindowEdge" "edge")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_shadow
  (of-object "GtkStyle")
  (c-name "gtk_paint_shadow")
  (overrides "gtk_paint_shadow")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_shadow_gap
  (of-object "GtkStyle")
  (c-name "gtk_paint_shadow_gap")
  (overrides "gtk_paint_shadow_gap")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkPositionType" "gap_side")
    '("gint" "gap_x")
    '("gint" "gap_width")))

(define-method
  paint_slider
  (of-object "GtkStyle")
  (c-name "gtk_paint_slider")
  (overrides "gtk_paint_slider")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("GtkOrientation" "orientation")))

(define-method
  paint_tab
  (of-object "GtkStyle")
  (c-name "gtk_paint_tab")
  (overrides "gtk_paint_tab")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GtkShadowType" "shadow_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  paint_vline
  (of-object "GtkStyle")
  (c-name "gtk_paint_vline")
  (overrides "gtk_paint_vline")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("GtkWidget*" "widget" (null-ok))
    '("const-gchar*" "detail" (null-ok))
    '("gint" "y1")
    '("gint" "y2")
    '("gint" "x")))

(define-method
  pack1
  (of-object "GtkPaned")
  (c-name "gtk_paned_pack1")
  (overrides "gtk_paned_pack1")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "resize" (default "FALSE"))
    '("gboolean" "shrink" (default "TRUE"))))

(define-method
  pack2
  (of-object "GtkPaned")
  (c-name "gtk_paned_pack2")
  (overrides "gtk_paned_pack2")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("gboolean" "resize" (default "TRUE"))
    '("gboolean" "shrink" (default "TRUE"))))

(define-method
  propagate_event
  (of-object "GtkWidget")
  (c-name "gtk_propagate_event")
  (overrides "gtk_propagate_event")
  (return-type "none")
  (parameters '("GdkEvent*" "event")))

(define-method
  rc_get_style
  (of-object "GtkWidget")
  (c-name "gtk_rc_get_style")
  (overrides "gtk_rc_get_style")
  (return-type "GtkStyle*"))

(define-method
  copy
  (of-object "GtkRcStyle")
  (c-name "gtk_rc_style_copy")
  (overrides "gtk_rc_style_copy")
  (return-type "GtkRcStyle*")
  (caller-owns-return #t))

(define-method
  copy
  (of-object "GtkRequisition")
  (c-name "gtk_requisition_copy")
  (overrides "gtk_requisition_copy")
  (return-type "GtkRequisition*")
  (caller-owns-return #t))

(define-method
  selection_add_target
  (of-object "GtkWidget")
  (c-name "gtk_selection_add_target")
  (overrides "gtk_selection_add_target")
  (return-type "none")
  (parameters
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("guint" "info")))

(define-method
  selection_add_targets
  (of-object "GtkWidget")
  (c-name "gtk_selection_add_targets")
  (overrides "gtk_selection_add_targets")
  (return-type "none")
  (parameters
    '("GdkAtom" "selection")
    '("const-GtkTargetEntry*" "targets")
    '("guint" "ntargets")))

; (define-method
;   selection_clear
;   (of-object "GtkWidget")
;   (c-name "gtk_selection_clear")
;   (overrides "gtk_selection_clear")
;   (return-type "gboolean")
;   (parameters '("GdkEventSelection*" "event")))

(define-method
  selection_clear_targets
  (of-object "GtkWidget")
  (c-name "gtk_selection_clear_targets")
  (overrides "gtk_selection_clear_targets")
  (return-type "none")
  (parameters '("GdkAtom" "selection")))

(define-method
  selection_convert
  (of-object "GtkWidget")
  (c-name "gtk_selection_convert")
  (overrides "gtk_selection_convert")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection")
    '("GdkAtom" "target")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))))

(define-method
  selection_owner_set
  (of-object "GtkWidget")
  (c-name "gtk_selection_owner_set")
  (overrides "gtk_selection_owner_set")
  (return-type "gboolean")
  (parameters
    '("GdkAtom" "selection")
    '("guint32" "time" (default "GDK_CURRENT_TIME"))))

(define-method
  selection_remove_all
  (of-object "GtkWidget")
  (c-name "gtk_selection_remove_all")
  (overrides "gtk_selection_remove_all")
  (return-type "none"))

(define-method
  configure
  (of-object "GtkSpinButton")
  (c-name "gtk_spin_button_configure")
  (overrides "gtk_spin_button_configure")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
    '("gdouble" "climb_rate")
    '("guint" "digits")))

(define-method
  copy
  (of-object "GtkStockItem")
  (c-name "gtk_stock_item_copy")
  (overrides "gtk_stock_item_copy")
  (return-type "GtkStockItem*")
  (caller-owns-return #t))

(define-method
  apply_default_background
  (of-object "GtkStyle")
  (c-name "gtk_style_apply_default_background")
  (overrides "gtk_style_apply_default_background")
  (return-type "none")
  (parameters
    '("GdkWindow*" "window")
    '("gboolean" "set_bg")
    '("GtkStateType" "state_type")
    '("GdkRectangle*" "area" (null-ok))
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")))

(define-method
  copy
  (of-object "GtkStyle")
  (c-name "gtk_style_copy")
  (overrides "gtk_style_copy")
  (return-type "GtkStyle*")
  (caller-owns-return #t))

(define-method
  attach
  (of-object "GtkTable")
  (c-name "gtk_table_attach")
  (overrides "gtk_table_attach")
  (return-type "none")
  (parameters
    '("GtkWidget*" "child")
    '("guint" "left_attach")
    '("guint" "right_attach")
    '("guint" "top_attach")
    '("guint" "bottom_attach")
    '("GtkAttachOptions"
      "xoptions"
      (default "GTK_EXPAND|GTK_FILL"))
    '("GtkAttachOptions"
      "yoptions"
      (default "GTK_EXPAND|GTK_FILL"))
    '("guint" "xpadding" (default "0"))
    '("guint" "ypadding" (default "0"))))

(define-method
  copy
  (of-object "GtkTextAttributes")
  (c-name "gtk_text_attributes_copy")
  (overrides "gtk_text_attributes_copy")
  (return-type "GtkTextAttributes*")
  (caller-owns-return #t))

(define-method
  create_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_create_mark")
  (overrides "gtk_text_buffer_create_mark")
  (return-type "GtkTextMark*")
  (parameters
    '("const-gchar*" "mark_name" (null-ok))
    '("const-GtkTextIter*" "where")
    '("gboolean" "left_gravity" (default "FALSE"))))

(define-method
  get_slice
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_slice")
  (overrides "gtk_text_buffer_get_slice")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
    '("gboolean"
      "include_hidden_chars"
      (default "TRUE"))))

(define-method
  get_text
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_get_text")
  (overrides "gtk_text_buffer_get_text")
  (return-type "gchar*")
  (parameters
    '("const-GtkTextIter*" "start")
    '("const-GtkTextIter*" "end")
    '("gboolean"
      "include_hidden_chars"
      (default "TRUE"))))

(define-method
  get_widgets
  (of-object "GtkTextChildAnchor")
  (c-name "gtk_text_child_anchor_get_widgets")
  (overrides "gtk_text_child_anchor_get_widgets")
  (return-type "GList*-of-GtkWidget*"))

(define-method
  backward_to_tag_toggle
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_backward_to_tag_toggle")
  (overrides
    "gtk_text_iter_backward_to_tag_toggle")
  (return-type "gboolean")
  (parameters '("GtkTextTag*" "tag" (null-ok))))

(define-method
  begins_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_begins_tag")
  (overrides "gtk_text_iter_begins_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok) (default "NULL"))))

(define-method
  copy
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_copy")
  (overrides "gtk_text_iter_copy")
  (return-type "GtkTextIter*")
  (caller-owns-return #t))

(define-method
  ends_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_ends_tag")
  (overrides "gtk_text_iter_ends_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok) (default "NULL"))))

(define-method
  forward_to_tag_toggle
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_forward_to_tag_toggle")
  (overrides "gtk_text_iter_forward_to_tag_toggle")
  (return-type "gboolean")
  (parameters '("GtkTextTag*" "tag" (null-ok))))

(define-method
  get_marks
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_marks")
  (overrides "gtk_text_iter_get_marks")
  (return-type "GSList*-of-GtkTextMark*"))

(define-method
  get_tags
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_tags")
  (overrides "gtk_text_iter_get_tags")
  (return-type "GSList*-of-GtkTextTag*"))

(define-method
  get_toggled_tags
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_get_toggled_tags")
  (overrides "gtk_text_iter_get_toggled_tags")
  (return-type "GSList*-of-GtkTextTag*")
  (parameters '("gboolean" "toggled_on")))

(define-method
  toggles_tag
  (of-object "GtkTextIter")
  (c-name "gtk_text_iter_toggles_tag")
  (overrides "gtk_text_iter_toggles_tag")
  (return-type "gboolean")
  (parameters
    '("GtkTextTag*" "tag" (null-ok) (default "NULL"))))

(define-method
  scroll_to_iter
  (of-object "GtkTextView")
  (c-name "gtk_text_view_scroll_to_iter")
  (overrides "gtk_text_view_scroll_to_iter")
  (return-type "gboolean")
  (parameters
    '("GtkTextIter*" "iter")
    '("gdouble" "within_margin")
    '("gboolean" "use_align" (default "FALSE"))
    '("gdouble" "xalign" (default "0.5"))
    '("gdouble" "yalign" (default "0.5"))))

(define-method
  scroll_to_mark
  (of-object "GtkTextView")
  (c-name "gtk_text_view_scroll_to_mark")
  (overrides "gtk_text_view_scroll_to_mark")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
    '("gdouble" "within_margin")
    '("gboolean" "use_align" (default "FALSE"))
    '("gdouble" "xalign" (default "0.5"))
    '("gdouble" "yalign" (default "0.5"))))

(define-method
  set_tip
  (of-object "GtkTooltips")
  (c-name "gtk_tooltips_set_tip")
  (overrides "gtk_tooltips_set_tip")
  (return-type "none")
  (parameters
    '("GtkWidget*" "widget")
    '("const-gchar*" "tip_text")
    '("const-gchar*"
      "tip_private"
      (null-ok)
      (default "NULL"))))

(define-method
  tree_get_row_drag_data
  (of-object "GtkSelectionData")
  (c-name "gtk_tree_get_row_drag_data")
  (overrides "gtk_tree_get_row_drag_data")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel**" "tree_model")
    '("GtkTreePath**" "path")))

(define-method
  copy
  (of-object "GtkTreeIter")
  (c-name "gtk_tree_iter_copy")
  (overrides "gtk_tree_iter_copy")
  (return-type "GtkTreeIter*")
  (caller-owns-return #t))

(define-method
  get_column_type
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_column_type")
  (overrides "gtk_tree_model_get_column_type")
  (return-type "GType")
  (parameters '("gint" "index")))

(define-method
  get_path
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_get_path")
  (overrides "gtk_tree_model_get_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
  (parameters '("GtkTreeIter*" "iter")))

(define-method
  iter_n_children
  (of-object "GtkTreeModel")
  (c-name "gtk_tree_model_iter_n_children")
  (overrides "gtk_tree_model_iter_n_children")
  (return-type "gint")
  (parameters '("GtkTreeIter*" "iter" (null-ok))))

(define-method
  convert_child_path_to_path
  (of-object "GtkTreeModelSort")
  (c-name
    "gtk_tree_model_sort_convert_child_path_to_path")
  (overrides
    "gtk_tree_model_sort_convert_child_path_to_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
  (parameters '("GtkTreePath*" "child_path")))

(define-method
  convert_path_to_child_path
  (of-object "GtkTreeModelSort")
  (c-name
    "gtk_tree_model_sort_convert_path_to_child_path")
  (overrides
    "gtk_tree_model_sort_convert_path_to_child_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t)
  (parameters '("GtkTreePath*" "sorted_path")))

(define-method
  append_index
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_append_index")
  (overrides "gtk_tree_path_append_index")
  (return-type "none")
  (parameters '("gint" "index")))

(define-method
  copy
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_copy")
  (overrides "gtk_tree_path_copy")
  (return-type "GtkTreePath*")
  (caller-owns-return #t))

(define-method
  prepend_index
  (of-object "GtkTreePath")
  (c-name "gtk_tree_path_prepend_index")
  (overrides "gtk_tree_path_prepend_index")
  (return-type "none")
  (parameters '("gint" "index")))

(define-method
  get_path
  (of-object "GtkTreeRowReference")
  (c-name "gtk_tree_row_reference_get_path")
  (overrides "gtk_tree_row_reference_get_path")
  (return-type "GtkTreePath*")
  (caller-owns-return #t))

(define-method
  get_selected_rows
  (of-object "GtkTreeSelection")
  (c-name "gtk_tree_selection_get_selected_rows")
  (overrides
    "gtk_tree_selection_get_selected_rows")
  (return-type "GList*-of-GtkTreePath*")
  (parameters '("GtkTreeModel**" "model")))

(define-method
  tree_set_row_drag_data
  (of-object "GtkSelectionData")
  (c-name "gtk_tree_set_row_drag_data")
  (overrides "gtk_tree_set_row_drag_data")
  (return-type "gboolean")
  (parameters
    '("GtkTreeModel*" "tree_model")
    '("GtkTreePath*" "path")))

(define-method
  get_cell_renderers
  (of-object "GtkTreeViewColumn")
  (c-name
    "gtk_tree_view_column_get_cell_renderers")
  (overrides
    "gtk_tree_view_column_get_cell_renderers")
  (return-type "GList*-of-GtkCellRenderer*"))

(define-method
  expand_to_path
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_expand_to_path")
  (overrides "gtk_tree_view_expand_to_path")
  (return-type "none")
  (parameters '("GtkTreePath*" "path")))

(define-method
  get_columns
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_columns")
  (overrides "gtk_tree_view_get_columns")
  (return-type "GList*-of-GtkTreeViewColumn*"))

(define-method
  scroll_to_cell
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_scroll_to_cell")
  (overrides "gtk_tree_view_scroll_to_cell")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*"
      "column"
      (null-ok)
      (default "NULL"))
    '("gboolean" "use_align" (default "FALSE"))
    '("gfloat" "row_align" (default "0.0"))
    '("gfloat" "col_align" (default "0.0"))))

(define-method
  set_cursor
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_cursor")
  (overrides "gtk_tree_view_set_cursor")
  (return-type "none")
  (parameters
    '("GtkTreePath*" "path")
    '("GtkTreeViewColumn*"
      "focus_column"
      (null-ok)
      (default "NULL"))
    '("gboolean" "start_editing" (default "FALSE"))))

(define-method
  set_model
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_model")
  (overrides "gtk_tree_view_set_model")
  (return-type "none")
  (parameters
    '("GtkTreeModel*"
      "model"
      (null-ok)
      (default "NULL"))))

(define-method
  get_action_groups
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_action_groups")
  (overrides "gtk_ui_manager_get_action_groups")
  (return-type "GList*-of-GtkActionGroup*"))

(define-method
  get_toplevels
  (of-object "GtkUIManager")
  (c-name "gtk_ui_manager_get_toplevels")
  (overrides "gtk_ui_manager_get_toplevels")
  (return-type "GSList*-of-GtkWidget*")
  (parameters '("GtkUIManagerItemType" "types")))

(define-method
  set_hadjustment
  (of-object "GtkViewport")
  (c-name "gtk_viewport_set_hadjustment")
  (overrides "gtk_viewport_set_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))))

(define-method
  set_vadjustment
  (of-object "GtkViewport")
  (c-name "gtk_viewport_set_vadjustment")
  (overrides "gtk_viewport_set_vadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))))

(define-method
  add-events
  (of-object "GtkWidget")
  (c-name "gtk_widget_add_events")
  (overrides "gtk_widget_add_events")
  (return-type "void")
  (parameters '("GdkEventMask" "events")))

(define-method
  create_pango_context
  (of-object "GtkWidget")
  (c-name "gtk_widget_create_pango_context")
  (overrides "gtk_widget_create_pango_context")
  (caller-owns-return #t)
  (return-type "PangoContext*"))

(define-method
  set-events
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_events")
  (overrides "gtk_widget_set_events")
  (return-type "void")
  (parameters '("GdkEventMask" "events")))

(define-method
  list_accel_closures
  (of-object "GtkWidget")
  (c-name "gtk_widget_list_accel_closures")
  (overrides "gtk_widget_list_accel_closures")
  (return-type "GList*-of-GClosure*"))

(define-method
  list_mnemonic_labels
  (of-object "GtkWidget")
  (c-name "gtk_widget_list_mnemonic_labels")
  (overrides "gtk_widget_list_mnemonic_labels")
  (return-type "GList*-of-GtkWidget*"))

(define-method
  set_scroll_adjustments
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_scroll_adjustments")
  (overrides "gtk_widget_set_scroll_adjustments")
  (return-type "gboolean")
  (parameters
    '("GtkAdjustment*" "hadjustment" (null-ok))
    '("GtkAdjustment*" "vadjustment" (null-ok))))

(define-method
  set_style
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_style")
  (overrides "gtk_widget_set_style")
  (return-type "none")
  (parameters '("GtkStyle*" "style" (null-ok))))

(define-method
  get_icon_list
  (of-object "GtkWindow")
  (c-name "gtk_window_get_icon_list")
  (overrides "gtk_window_get_icon_list")
  (return-type "GList*-of-GdkPixbuf*"))

(define-method
  set_icon_list
  (of-object "GtkWindow")
  (c-name "gtk_window_set_icon_list")
  (overrides "gtk_window_set_icon_list")
  (return-type "none")
  (parameters '("GList*-of-GdkPixbuf**" "list")))

