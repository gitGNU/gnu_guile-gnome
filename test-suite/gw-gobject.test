#!/bin/sh
exec ${srcdir:-.}/guile-test-env guile -s "$0" "$@"
!#

;; guile-gnome
;; Copyright (C) 2003,2004 Andreas Rottmann

;; This program is free software; you can redistribute it and/or    
;; modify it under the terms of the GNU General Public License as   
;; published by the Free Software Foundation; either version 2 of   
;; the License, or (at your option) any later version.              
;;                                                                  
;; This program is distributed in the hope that it will be useful,  
;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;; GNU General Public License for more details.                     
;;                                                                  
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org


(define-module (test-suite test-gw-gobject)
  #:use-module (oop goops)
  #:use-module (gnome gobject)
  #:use-module (test-suite lib)
  #:use-module (test-suite gw-test-gobject))

(with-test-prefix "<test-obj>"
  (pass-if "creating"
           (is-a? (make <test-obj>) <test-obj>))
  
  (pass-if "creating with parameters"
           (let ((obj (make <test-obj> #:arr '(1 2 3))))
             (is-a? obj <test-obj>)))

  (pass-if "getting the param spec args for the value array property"
           (let ((args (gparam-struct:args
                        (gparam->param-struct
                         (gobject-class-find-property <test-obj> 'arr)))))
             (and (list? args)
                  (= (length args) 1))))

  (pass-if "calling foo"
           (= (foo (make <test-obj>) 65000) 65000)))

;; Local Variables:
;; mode: scheme
;; End:
