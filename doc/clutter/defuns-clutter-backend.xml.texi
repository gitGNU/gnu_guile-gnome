
@c %start of fragment

@deffn Function clutter-get-default-backend  @result{}@tie{} (ret@tie{}@code{<clutter-backend>})
Retrieves the default @code{<clutter-backend>} used by Clutter. The
@code{<clutter-backend>} holds backend-specific configuration options.

@table @var
@item ret
the default backend. You should not ref or unref the returned object.
Applications should rarely need to use this.

@end table

Since 0.4

@end deffn

@deffn Function clutter-backend-get-resolution  (self@tie{}@code{<clutter-backend>}) @result{}@tie{} (ret@tie{}@code{double})
@deffnx Method get-resolution
Gets the resolution for font handling on the screen.

The resolution is a scale factor between points specified in a
@code{<pango-font-description>} and cairo units. The default value is
96.0, meaning that a 10 point font will be 13 units high (10 * 96. / 72.
= 13.3).

Clutter will set the resolution using the current backend when
initializing; the resolution is also stored in the @code{<"font-dpi">}
property.

@table @var
@item backend
a @code{<clutter-backend>}

@item ret
the current resolution, or -1 if no resolution has been set.

@end table

Since 0.4

@end deffn

@deffn Function clutter-backend-set-font-options  (self@tie{}@code{<clutter-backend>}) (options@tie{}@code{cairo-font-options-t})
@deffnx Method set-font-options
Sets the new font options for @var{backend}. The
@code{<clutter-backend>} will copy the @code{<cairo-font-options-t>}.

If @var{options} is @samp{@code{#f}}, the first following call to
@code{clutter-backend-get-font-options} will return the default font
options for @var{backend}.

This function is intended for actors creating a Pango layout using the
PangoCairo API.

@table @var
@item backend
a @code{<clutter-backend>}

@item options
Cairo font options for the backend, or @samp{@code{#f}}

@end table

Since 0.8

@end deffn

@deffn Function clutter-check-windowing-backend  (backend_type@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{bool})
Checks the run-time name of the Clutter windowing system backend, using
the symbolic macros like @samp{CLUTTER_WINDOWING_WIN32} or
@samp{CLUTTER_WINDOWING_X11}.

This function should be used in conjuction with the compile-time macros
inside applications and libraries that are using the platform-specific
windowing system API, to ensure that they are running on the correct
windowing system; for instance:

@example 

&#x0023;ifdef CLUTTER_WINDOWING_X11
  if (clutter_check_windowing_backend (CLUTTER_WINDOWING_X11))
    @{
      /&#x002A; it is safe to use the clutter_x11_* API &#x002A;/
    @}
  else
&#x0023;endif
&#x0023;ifdef CLUTTER_WINDOWING_WIN32
  if (clutter_check_windowing_backend (CLUTTER_WINDOWING_WIN32))
    @{
      /&#x002A; it is safe to use the clutter_win32_* API &#x002A;/
    @}
  else
&#x0023;endif
    g_error ("Unknown Clutter backend.");
@end example

@table @var
@item backend-type
the name of the backend to check

@item ret
@samp{@code{#t}} if the current Clutter windowing system backend is the
one checked, and @samp{@code{#f}} otherwise

@end table

Since 1.10

@end deffn


@c %end of fragment
