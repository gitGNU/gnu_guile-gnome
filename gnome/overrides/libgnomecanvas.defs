;;;; -*- scheme -*-
;;;; guile-gnome
;;;; Copyright (C) 2004 Jan Nieuwenhuizen <janneke@gnu.org>
;;;;                    Andy Wingo <wingo at pobox dot com>

;;;; This program is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU General Public License as
;;;; published by the Free Software Foundation; either version 2 of
;;;; the License, or (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, contact:
;;;;
;;;; Free Software Foundation           Voice:  +1-617-542-5942
;;;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;;;; Boston, MA  02111-1307,  USA       gnu@gnu.org


;; I'm not sure this wrapping for affine funtctions is the Right Way,
;; but it works.  Maybe we should have a plain affine maker: double[6]
;; list_to_affine (SCM) or have affine_absolute take a SCM list
;; directly?
(define-method affine_absolute
  (of-object "GnomeCanvasItem")
  (c-name "_wrap_gnome_canvas_item_affine_absolute")
  (overrides "gnome_canvas_item_affine_absolute")
  (return-type "void")
  (parameters
    '("double" "x1")
    '("double" "y2")
    '("double" "x2")
    '("double" "y2")
    '("double" "x3")
    '("double" "y3")))

(define-method affine_relative
  (of-object "GnomeCanvasItem")
  (c-name "_wrap_gnome_canvas_item_affine_relative")
  (overrides "gnome_canvas_item_affine_relative")
  (return-type "void")
  (parameters
    '("double" "x1")
    '("double" "y2")
    '("double" "x2")
    '("double" "y2")
    '("double" "x3")
    '("double" "y3")))

(define-boxed
  CanvasPoints
  (in-module "Gnome")
  (c-name "GnomeCanvasPoints")
  (gtype-id "GNOME_TYPE_CANVAS_POINTS")
  (copy-func "guile_gnome_canvas_points_copy")
  (release-func "gnome_canvas_points_free")
;;  (fields '("double*" "coords") '("int" "num_points") '("int" "ref_count"))
  )

(define-method
  copy
  (of-object "GnomeCanvasPoints")
  (c-name "guile_gnome_canvas_points_copy")
;;  (overrides "gtk_tree_iter_copy")
  (return-type "GnomeCanvasPoints*")
  (caller-owns-return #t))

(define-function gnome_canvas_points_new
  (c-name "_wrap_gnome_canvas_points_new")
  (overrides "gnome_canvas_points_new")
  (is-constructor-of CanvasPoints)
;;  (return-type "GnomeCanvasPoints*")
  (return-type "SCM")
  (leave-guile-mode #f)
  (parameters
   '("SCM" "points")))

(ignore-glob
 ;; if you need these, use gtype-from-name or gtype-class->type
 "*_get_type"
 "_*"
 "*_ref"
 "*_unref"
 "*_copy"
 "*_free"
 "*_newv"
 "*_setv"
 "*_foreach"
 "*_affine*"
 "*_valist"
 "*_update_svp*" ;; use of ArtVSP**
 )

(ignore
 "gnome_canvas_item_construct"  ;; use of va-list
 
 ;; ignore functions that deal in libart types
 "gnome_canvas_cap_gdk_to_art"
 "gnome_canvas_join_gdk_to_art"
 "gnome_canvas_request_redraw_svp"
 "gnome_canvas_request_redraw_uta"
 )
