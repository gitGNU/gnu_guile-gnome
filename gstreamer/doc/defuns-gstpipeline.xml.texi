
@c %start of fragment

@deftp Class <gst-pipeline>
This @code{<gobject>} class defines the following properties:

@table @code
@item delay
Expected delay needed for elements to spin up to PLAYING in nanoseconds

@item auto-flush-bus
Whether to automatically flush the pipeline's bus when going from READY into
NULL state

@end table

@end deftp

@deffn Function gst-pipeline-new  (name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{<gst-element>})
Create a new pipeline with the given name.

@table @var
@item name
name of new pipeline

@item ret
newly created GstPipeline MT safe.

@end table

@end deffn

@deffn Function gst-pipeline-get-bus  (self@tie{}@code{<gst-pipeline>}) @result{}@tie{} (ret@tie{}@code{<gst-bus>})
@deffnx Method get-bus
Gets the @code{<gst-bus>} of @var{pipeline}.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item ret
a @code{<gst-bus>}, unref after usage. MT safe.

@end table

@end deffn

@deffn Function gst-pipeline-set-clock  (self@tie{}@code{<gst-pipeline>}) (clock@tie{}@code{<gst-clock>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method set-clock
Set the clock for @var{pipeline}. The clock will be distributed to all the
elements managed by the pipeline.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item clock
the clock to set

@item ret
TRUE if the clock could be set on the pipeline. FALSE if some element did not
accept the clock. MT safe.

@end table

@end deffn

@deffn Function gst-pipeline-get-clock  (self@tie{}@code{<gst-pipeline>}) @result{}@tie{} (ret@tie{}@code{<gst-clock>})
@deffnx Method get-clock
Gets the current clock used by @var{pipeline}.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item ret
a @code{<gst-clock>}, unref after usage.

@end table

@end deffn

@deffn Function gst-pipeline-use-clock  (self@tie{}@code{<gst-pipeline>}) (clock@tie{}@code{<gst-clock>})
@deffnx Method use-clock
Force @var{pipeline} to use the given @var{clock}. The pipeline will always use
the given clock even if new clock providers are added to this pipeline.

If @var{clock} is NULL all clocking will be disabled which will make the
pipeline run as fast as possible.

MT safe.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item clock
the clock to use

@end table

@end deffn

@deffn Function gst-pipeline-auto-clock  (self@tie{}@code{<gst-pipeline>})
@deffnx Method auto-clock
Let @var{pipeline} select a clock automatically. This is the default behaviour.

Use this function if you previous forced a fixed clock with
@code{gst-pipeline-use-clock} and want to restore the default pipeline clock
selection algorithm.

MT safe.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@end table

@end deffn

@deffn Function gst-pipeline-set-new-stream-time  (self@tie{}@code{<gst-pipeline>}) (time@tie{}@code{unsigned-long-long})
@deffnx Method set-new-stream-time
Set the new stream time of @var{pipeline} to @var{time}. The stream time is used
to set the base time on the elements (see @code{gst-element-set-base-time}) in
the PAUSED->PLAYING state transition.

Setting @var{time} to @code{<gst-clock-time-none>} will disable the pipeline's
management of element base time. The application will then be responsible for
performing base time distribution. This is sometimes useful if you want to
synchronize capture from multiple pipelines, and you can also ensure that the
pipelines have the same clock.

MT safe.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item time
the new stream time to set

@end table

@end deffn

@deffn Function gst-pipeline-get-last-stream-time  (self@tie{}@code{<gst-pipeline>}) @result{}@tie{} (ret@tie{}@code{unsigned-long-long})
@deffnx Method get-last-stream-time
Gets the last stream time of @var{pipeline}. If the pipeline is PLAYING, the
returned time is the stream time used to configure the element's base time in
the PAUSED->PLAYING state. If the pipeline is PAUSED, the returned time is the
stream time when the pipeline was paused.

This function returns @code{<gst-clock-time-none>} if the pipeline was
configured to not handle the management of the element's base time (see
@code{gst-pipeline-set-new-stream-time}).

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item ret
a @code{<gst-clock-time>}. MT safe.

@end table

@end deffn

@deffn Function gst-pipeline-set-auto-flush-bus  (self@tie{}@code{<gst-pipeline>}) (auto_flush@tie{}@code{bool})
@deffnx Method set-auto-flush-bus
Usually, when a pipeline goes from READY to NULL state, it automatically flushes
all pending messages on the bus, which is done for refcounting purposes, to
break circular references.

This means that applications that update state using (async) bus messages (e.g.
do certain things when a pipeline goes from PAUSED to READY) might not get to
see messages when the pipeline is shut down, because they might be flushed
before they can be dispatched in the main thread. This behaviour can be disabled
using this function.

It is important that all messages on the bus are handled when the automatic
flushing is disabled else memory leaks will be introduced.

MT safe.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item auto-flush
whether or not to automatically flush the bus when the pipeline goes from READY
to NULL state

@end table

Since 0.10.4

@end deffn

@deffn Function gst-pipeline-get-auto-flush-bus  (self@tie{}@code{<gst-pipeline>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method get-auto-flush-bus
Check if @var{pipeline} will automatically flush messages when going to the NULL
state.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item ret
whether the pipeline will automatically flush its bus when going from READY to
NULL state or not. MT safe.

@end table

Since 0.10.4

@end deffn

@deffn Function gst-pipeline-set-delay  (self@tie{}@code{<gst-pipeline>}) (delay@tie{}@code{unsigned-long-long})
@deffnx Method set-delay
Set the expected delay needed for all elements to perform the PAUSED to PLAYING
state change. @var{delay} will be added to the base time of the elements so that
they wait an additional @var{delay} amount of time before starting to process
buffers and cannot be @code{<gst-clock-time-none>}.

This option is used for tuning purposes and should normally not be used.

MT safe.

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item delay
the delay

@end table

Since 0.10.5

@end deffn

@deffn Function gst-pipeline-get-delay  (self@tie{}@code{<gst-pipeline>}) @result{}@tie{} (ret@tie{}@code{unsigned-long-long})
@deffnx Method get-delay
Get the configured delay (see @code{gst-pipeline-set-delay}).

@table @var
@item pipeline
a @code{<gst-pipeline>}

@item ret
The configured delay. MT safe.

@end table

Since 0.10.5

@end deffn


@c %end of fragment
