
@c %start of fragment

@deffn Function clutter-behaviour-path-new  (alpha@tie{}@code{<clutter-alpha>}) (path@tie{}@code{<clutter-path>}) @result{}@tie{} (ret@tie{}@code{<clutter-behaviour>})
@samp{clutter_behaviour_path_new} is deprecated and should not be used
in newly-written code. 1.6

Creates a new path behaviour. You can use this behaviour to drive actors
along the nodes of a path, described by @var{path}.

This will claim the floating reference on the @code{<clutter-path>} so
you do not need to unref if it.

If @var{alpha} is not @samp{@code{#f}}, the @code{<clutter-behaviour>}
will take ownership of the @code{<clutter-alpha>} instance. In the case
when @var{alpha} is @samp{@code{#f}}, it can be set later with
@code{clutter-behaviour-set-alpha}.

@table @var
@item alpha
a @code{<clutter-alpha>} instance, or @samp{@code{#f}}.

@item path
a @code{<clutter-path>} or @samp{@code{#f}} for an empty path

@item ret
a @code{<clutter-behaviour>}.

@end table

Since 0.2

@end deffn

@deffn Function clutter-behaviour-path-set-path  (self@tie{}@code{<clutter-behaviour-path>}) (path@tie{}@code{<clutter-path>})
@deffnx Method set-path
@samp{clutter_behaviour_path_set_path} is deprecated and should not be
used in newly-written code. 1.6

Change the path that the actors will follow. This will take the floating
reference on the @code{<clutter-path>} so you do not need to unref it.

@table @var
@item pathb
the path behaviour

@item path
the new path to follow

@end table

Since 1.0

@end deffn

@deffn Function clutter-behaviour-path-get-path  (self@tie{}@code{<clutter-behaviour-path>}) @result{}@tie{} (ret@tie{}@code{<clutter-path>})
@deffnx Method get-path
@samp{clutter_behaviour_path_get_path} is deprecated and should not be
used in newly-written code. 1.6

Get the current path of the behaviour

@table @var
@item pathb
a @code{<clutter-behaviour-path>} instance

@item ret
the path.

@end table

Since 1.0

@end deffn

@deffn Function clutter-knot-equal  (self@tie{}@code{<clutter-knot>}) (knot_b@tie{}@code{<clutter-knot>}) @result{}@tie{} (ret@tie{}@code{bool})
Compares to knot and checks if the point to the same location.

@table @var
@item knot-a
First knot

@item knot-b
Second knot

@item ret
@samp{@code{#t}} if the knots point to the same location.

@end table

Since 0.2

@end deffn


@c %end of fragment
