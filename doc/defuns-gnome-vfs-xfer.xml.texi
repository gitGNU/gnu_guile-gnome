
@c %start of fragment

@deffn Function gnome-vfs-xfer-uri-list  (source_uri_list@tie{}@code{glist-of}) (target_uri_list@tie{}@code{glist-of}) (xfer_options@tie{}@code{<gnome-vfs-xfer-options>}) (error_mode@tie{}@code{<gnome-vfs-xfer-error-mode>}) (overwrite_mode@tie{}@code{<gnome-vfs-xfer-overwrite-mode>}) (progress_callback@tie{}@code{<gnome-vfs-xfer-progress-callback>}) (data@tie{}@code{<gpointer>}) @result{}@tie{} (ret@tie{}@code{<gnome-vfs-result>})
This function will transfer multiple files to multiple targets, given source
URIs and destination URIs. If you want to do asynchronous file transfers, you
have to use @code{gnome-vfs-async-xfer} instead.

@table @var
@item source-uri-list
A @code{<g-list>} of source @code{<gnome-vfsur-is>}.

@item target-uri-list
A @code{<g-list>} of target @code{<gnome-vfsur-is>}, each corresponding to one
URI in @var{source-uri-list}.

@item xfer-options
@code{<gnome-vfs-xfer-options>} defining the desired operation and parameters.

@item error-mode
A @code{<gnome-vfs-error-mode>} specifying how to proceed if a VFS error occurs.

@item overwrite-mode
A @code{<gnome-vfs-overwrite-mode>} specifying how to proceed if a file is being
overwritten.

@item progress-callback
This @code{<gnome-vfs-progress-callback>} is used to inform the user about the
progress of a transfer, and to request further input from him if a problem
occurs.

@item data
Data to be passed back in callbacks from the xfer engine.

@item ret
If all goes well it returns @samp{GNOME_VFS_OK}. Check @code{<gnome-vfs-result>}
for other values.

@end table

@end deffn

@deffn Function gnome-vfs-xfer-uri  (source_uri@tie{}@code{<gnome-vfsuri*>}) (target_uri@tie{}@code{<gnome-vfsuri*>}) (xfer_options@tie{}@code{<gnome-vfs-xfer-options>}) (error_mode@tie{}@code{<gnome-vfs-xfer-error-mode>}) (overwrite_mode@tie{}@code{<gnome-vfs-xfer-overwrite-mode>}) (progress_callback@tie{}@code{<gnome-vfs-xfer-progress-callback>}) (data@tie{}@code{<gpointer>}) @result{}@tie{} (ret@tie{}@code{<gnome-vfs-result>})
This function works exactly like @code{gnome-vfs-xfer-uri-list}, and is a
convenience wrapper for only acting on one source/target URI pair.

@table @var
@item source-uri
A source @code{<gnome-vfsuri>}.

@item target-uri
A target @code{<gnome-vfsuri>}.

@item xfer-options
@code{<gnome-vfs-xfer-options>} defining the desired operation and parameters.

@item error-mode
A @code{<gnome-vfs-error-mode>} specifying how to proceed if a VFS error occurs.

@item overwrite-mode
A @code{<gnome-vfs-overwrite-mode>} specifying how to proceed if a file is being
overwritten.

@item progress-callback
This @code{<gnome-vfs-progress-callback>} is used to inform the user about the
progress of a transfer, and to request further input from him if a problem
occurs.

@item data
Data to be passed back in callbacks from the xfer engine.

@item ret
an integer representing the result of the operation.

@end table

@end deffn

@deffn Function gnome-vfs-xfer-delete-list  (source_uri_list@tie{}@code{glist-of}) (error_mode@tie{}@code{<gnome-vfs-xfer-error-mode>}) (xfer_options@tie{}@code{<gnome-vfs-xfer-options>}) (progress_callback@tie{}@code{<gnome-vfs-xfer-progress-callback>}) (data@tie{}@code{<gpointer>}) @result{}@tie{} (ret@tie{}@code{<gnome-vfs-result>})
Unlinks items in the @var{source-uri-list} from their filesystems.

@table @var
@item source-uri-list
This is a list containing uris.

@item error-mode
Decide how you want to deal with interruptions.

@item xfer-options
Set whatever transfer options you need.

@item progress-callback
Callback to check on progress of transfer.

@item data
Data to be passed back in callbacks from the xfer engine.

@item ret
@samp{GNOME_VFS_OK} if successful, or the appropriate error code otherwise.

@end table

@end deffn


@c %end of fragment
