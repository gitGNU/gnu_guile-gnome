
@c %start of fragment

@deffn Function clutter-container-add-actor  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>})
@deffnx Method add-actor
Adds a @code{<clutter-actor>} to @var{container}. This function will
emit the "actor-added" signal. The actor should be parented to
@var{container}. You cannot add a @code{<clutter-actor>} to more than
one @code{<clutter-container>}.

@table @var
@item container
a @code{<clutter-container>}

@item actor
the first @code{<clutter-actor>} to add

@end table

Since 0.4

@end deffn

@deffn Function clutter-container-remove-actor  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>})
@deffnx Method remove-actor
Removes @var{actor} from @var{container}. The actor should be
unparented, so if you want to keep it around you must hold a reference
to it yourself, using @code{g-object-ref}. When the actor has been
removed, the "actor-removed" signal is emitted by @var{container}.

@table @var
@item container
a @code{<clutter-container>}

@item actor
a @code{<clutter-actor>}

@end table

Since 0.4

@end deffn

@deffn Function clutter-container-get-children  (self@tie{}@code{<clutter-container>}) @result{}@tie{} (ret@tie{}@code{glist-of})
@deffnx Method get-children
Retrieves all the children of @var{container}.

@table @var
@item container
a @code{<clutter-container>}

@item ret
a list of @code{<clutter-actor>}s. Use @code{g-list-free} on the
returned list when done.

@end table

Since 0.4

@end deffn

@deffn Function clutter-container-raise-child  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>}) (sibling@tie{}@code{<clutter-actor>})
@deffnx Method raise-child
Raises @var{actor} to @var{sibling} level, in the depth ordering.

@table @var
@item container
a @code{<clutter-container>}

@item actor
the actor to raise

@item sibling
the sibling to raise to, or @samp{@code{#f}} to raise to the top

@end table

Since 0.6

@end deffn

@deffn Function clutter-container-lower-child  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>}) (sibling@tie{}@code{<clutter-actor>})
@deffnx Method lower-child
Lowers @var{actor} to @var{sibling} level, in the depth ordering.

@table @var
@item container
a @code{<clutter-container>}

@item actor
the actor to raise

@item sibling
the sibling to lower to, or @samp{@code{#f}} to lower to the bottom

@end table

Since 0.6

@end deffn

@deffn Function clutter-container-sort-depth-order  (self@tie{}@code{<clutter-container>})
@deffnx Method sort-depth-order
Sorts a container's children using their depth. This function should not
be normally used by applications.

@table @var
@item container
a @code{<clutter-container>}

@end table

Since 0.6

@end deffn

@deffn Function clutter-container-get-child-meta  (self@tie{}@code{<clutter-container>}) (actor@tie{}@code{<clutter-actor>}) @result{}@tie{} (ret@tie{}@code{<clutter-child-meta>})
@deffnx Method get-child-meta
Retrieves the @code{<clutter-child-meta>} which contains the data about
the @var{container} specific state for @var{actor}.

@table @var
@item container
a @code{<clutter-container>}

@item actor
a @code{<clutter-actor>} that is a child of @var{container}.

@item ret
the @code{<clutter-child-meta>} for the @var{actor} child of
@var{container} or @samp{@code{#f}} if the specifiec actor does not
exist or the container is not configured to provide
@code{<clutter-child-meta>}s.

@end table

Since 0.8

@end deffn


@c %end of fragment
