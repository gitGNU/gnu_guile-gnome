;;;; -*- scheme -*-
;;;; guile-gnome
;;;; Copyright (C) 2004 Jan Nieuwenhuizen <janneke@gnu.org>
;;;;                    Andy Wingo <wingo at pobox dot com>

;;;; This program is free software; you can redistribute it and/or    
;;;; modify it under the terms of the GNU General Public License as   
;;;; published by the Free Software Foundation; either version 2 of   
;;;; the License, or (at your option) any later version.              
;;;;                                                                  
;;;; This program is distributed in the hope that it will be useful,  
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;;;; GNU General Public License for more details.                     
;;;;                                                                  
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, contact:
;;;;
;;;; Free Software Foundation           Voice:  +1-617-542-5942
;;;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;;;; Boston, MA  02111-1307,  USA       gnu@gnu.org


(include "libgnomecanvas-types.defs")
(include "libgnomecanvas-overrides.defs")

;; /usr/include/libgnomecanvas-2.0/libgnomecanvas/gnome-canvas.h
;; GnomeCanvas
(define-function gnome_canvas_get_type
  (c-name "gnome_canvas_get_type")
  (return-type "GType"))

(define-function gnome_canvas_new
  (is-constructor-of GnomeCanvas)
  (c-name "gnome_canvas_new")
  (return-type "GtkWidget*"))

(define-function gnome_canvas_new_aa
  (is-constructor-of GnomeCanvas)
  (c-name "gnome_canvas_new_aa")
  (return-type "GtkWidget*"))

(define-method c2w
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_c2w")
  (return-type "none")
  (parameters
    '("int" "cx")
    '("int" "cy")
    '("double*" "wx")
    '("double*" "wy")))

(define-method get_color
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_color")
  (return-type "int")
  (parameters
    '("const-char*" "spec")
    '("GdkColor*" "color")))

(define-method get_color_pixel
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_color_pixel")
  (return-type "gulong")
  (parameters
    '("guint" "rgba")))

(define-method get_dither
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_dither")
  (return-type "GdkRgbDither*"))

(define-method get_item_at
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_item_at")
  (return-type "GnomeCanvasItem*")
  (parameters
    '("double" "x")
    '("double" "y")))

(define-method get_scroll_offsets
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_scroll_offsets")
  (return-type "none")
  (parameters
    '("int*" "cx")
    '("int*" "cy")))

(define-method get_scroll_region
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_get_scroll_region")
  (return-type "none")
  (parameters
    '("double*" "x1")
    '("double*" "y1")
    '("double*" "x2")
    '("double*" "y2")))

;; only used by object implementations
;; (define-method request_redraw_uta
;;   (of-object "GnomeCanvas")
;;   (c-name "gnome_canvas_request_redraw_uta")
;;   (return-type "none")
;;   (parameters
;;     '("ArtUta8" "uta")
;;   )
;; )
 
;; only used by object implementations
;; (define-method request_redraw
;;   (of-object "GnomeCanvas")
;;   (c-name "gnome_canvas_request_redraw")
;;   (return-type "none")
;;   (parameters
;;     '("int" "x1")
;;     '("int" "y1")
;;     '("int" "x2")
;;     '("int" "y2")))

(define-method root
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_root")
  (return-type "GnomeCanvasGroup*"))

(define-method set_dither
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_set_dither")
  (return-type "none")
  (parameters
    '("GdkRgbDither*" "dither")))

;; only for use by item implementations
;; (define-method set_stipple_origin
;;   (of-object "GnomeCanvas")
;;   (c-name "gnome_canvas_set_stipple_origin")
;;   (return-type "none")
;;   (parameters
;;     '("GdkGC*" "gc")))

(define-method set_pixels_per_unit
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_set_pixels_per_unit")
  (return-type "none")
  (parameters
    '("double" "n")))
	      
(define-method set_scroll_region
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_set_scroll_region")
  (return-type "none")
  (parameters
    '("double" "x1")
    '("double" "y1")
    '("double" "x2")
    '("double" "y2")))

(define-method scroll_to
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_scroll_to")
  (return-type "none")
  (parameters
    '("int" "cx")
    '("int" "cy")))

(define-method update_now
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_update_now")
  (return-type "none"))

(define-method w2c
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_w2c")
  (return-type "none")
  (parameters
    '("double" "wx")
    '("double" "wy")
    '("int*" "cx")
    '("int*" "cy")))

;; ignored, to be overridden
(define-method w2c_affine
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_w2c_affine")
  (return-type "none")
  (parameters
    '("double[6]" "affine")))

(define-method w2c_d
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_w2c_d")
  (return-type "none")
  (parameters
    '("double" "wx")
    '("double" "wy")
    '("double*" "cx")
    '("double*" "cy")))

(define-method window_to_world
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_window_to_world")
  (return-type "none")
  (parameters
    '("double" "winx")
    '("double" "winy")
    '("double*" "worldx")
    '("double*" "worldy")))

(define-method world_to_window
  (of-object "GnomeCanvas")
  (c-name "gnome_canvas_world_to_window")
  (return-type "none")
  (parameters
    '("double" "worldx")
    '("double" "worldy")
    '("double*" "winx")
    '("double*" "winy")))

;; GnomeCanvasItem
(define-function gnome_canvas_item_get_type
  (c-name "gnome_canvas_item_get_type")
  (return-type "GType"))

(define-function gnome_canvas_item_new
  (c-name "gnome_canvas_item_new")
  (return-type "GnomeCanvasItem*")
    (parameters
    '("GnomeCanvasGroup*" "root")
     '("GType" "type")
     ;; With varargs, this function is not made available,
     ;; and only (make <gnome-canvas-TYPE> ...) can be used.
     ;;'("const-gchar*" "first_arg_name"))
     ;; (varargs #t))
     '("const-gchar*" "first_arg_name" (null-ok) (default "NULL"))))

;; overridden by custom wrapper
(define-method affine_absolute
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_affine_absolute")
  (return-type "none")
  (parameters
   '("const-double[6]" "affine")))

;; overridden by custom wrapper
(define-method affine_relative
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_affine_relative")
  (return-type "none")
  (parameters
   '("const-double[6]" "affine")))

(define-method grab_focus
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_grab_focus")
  (return-type "none"))

(define-method get_bounds
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_get_bounds")
  (return-type "none")
  (parameters
    '("double*" "x1")
    '("double*" "y1")
    '("double*" "x2")
    '("double*" "y2")))

(define-method hide
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_hide")
  (return-type "none"))

(define-method i2w
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_i2w")
  (return-type "none")
  (parameters
    '("double*" "x")
    '("double*" "y")))

;; ignored, to be overridden
(define-method i2w_affine
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_i2w_affine")
  (return-type "none")
  (parameters
    '("double[6]" "affine")))

;; ignored, to be overridden
(define-method i2c_affine
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_i2c_affine")
  (return-type "none")
  (parameters
    '("double[6]" "affine")))

(define-method lower
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_lower")
  (return-type "none")
  (parameters
    '("int" "positions")))

(define-method lower_to_bottom
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_lower_to_bottom")
  (return-type "none"))

(define-method move
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_move")
  (return-type "none")
  (parameters
    '("double" "dx")
    '("double" "dy")))

(define-method raise
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_raise")
  (return-type "none")
  (parameters
    '("int" "positions")))

(define-method raise_to_top
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_raise_to_top")
  (return-type "none"))

(define-method reparent
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_reparent")
  (return-type "none")
  (parameters
    '("GnomeCanvasGroup*" "new_group")))

;; only used by item implementations
;; (define-method request_update
;;   (of-object "GnomeCanvasItem")
;;   (c-name "gnome_canvas_item_request_update")
;;   (return-type "none")
;; )

;; ignored b.o. varargs
(define-method set
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_set")
  (return-type "none")
  (parameters
    '("const-gchar*" "first_arg_name"))
  (varargs #t))

(define-method show
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_show")
  (return-type "none"))

(define-method w2i
  (of-object "GnomeCanvasItem")
  (c-name "gnome_canvas_item_w2i")
  (return-type "none")
  (parameters
    '("double*" "x")
    '("double*" "y")))

;;; GnomeCanvasGroup

(define-function gnome_canvas_group_get_type
  (c-name "gnome_canvas_group_get_type")
  (return-type "GType"))

;; The `add' method name trickery does not seem to work.
;; Comment-out for now.  --jcn
; (define-method add
;   (of-object "GnomeCanvasGroup")
;   (c-name "gnome_canvas_item_new")
;   (return-type "GnomeCanvasItem*")
;   ;;(is-constructor-of GnomeCanvasItem)
;   (parameters
;    '("GType" "type")
;    '("const-gchar*" "first_arg_name" (null-ok) (default "NULL")))
;   ;; Without (varargs #t) this works, but [only] appears as
;   ;; `gnome-canvas-item-new'.
;   ;; With varargs, it is not available. 
;   ;;  (varargs #t))
;   )

;; /usr/include/libgnomecanvas-2.0/libgnomecanvas/gnome-canvas-rect-ellipse.h

(define-function gnome_canvas_rect_get_type
  (c-name "gnome_canvas_rect_get_type")
  (return-type "GType"))

;; Other types:
(define-function gnome_canvas_text_get_type
  (c-name "gnome_canvas_text_get_type")
  (return-type "GType"))

(define-function gnome_canvas_bpath_get_type
  (c-name "gnome_canvas_bpath_get_type")
  (return-type "GType"))

(define-function gnome_canvas_clipgroup_get_type
  (c-name "gnome_canvas_clipgroup_get_type")
  (return-type "GType"))

(define-function gnome_canvas_line_get_type
  (c-name "gnome_canvas_line_get_type")
  (return-type "GType"))

(define-function gnome_canvas_pixbuf_get_type
  (c-name "gnome_canvas_pixbuf_get_type")
  (return-type "GType"))

(define-function gnome_canvas_polygon_get_type
  (c-name "gnome_canvas_polygon_get_type")
  (return-type "GType"))

(define-function gnome_canvas_re_get_type
  (c-name "gnome_canvas_re_get_type")
  (return-type "GType"))

(define-function gnome_canvas_ellipse_get_type
  (c-name "gnome_canvas_ellipse_get_type")
  (return-type "GType"))

(define-function gnome_canvas_rich_text_get_type
  (c-name "gnome_canvas_rich_text_get_type")
  (return-type "GType"))

(define-function gnome_canvas_shape_get_type
  (c-name "gnome_canvas_shape_get_type")
  (return-type "GType"))

(define-function gnome_canvas_text_get_type
  (c-name "gnome_canvas_text_get_type")
  (return-type "GType"))

(define-function gnome_canvas_widget_get_type
  (c-name "gnome_canvas_widget_get_type")
  (return-type "GType"))

(define-function gnome_canvas_points_get_type
  (c-name "gnome_canvas_points_get_type")
  (return-type "GType"))

