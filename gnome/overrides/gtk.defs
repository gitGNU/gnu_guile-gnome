;; -*- scheme -*-
;; guile-gnome
;; Copyright (C) 2003,2004 Andy Wingo <wingo at pobox dot com>

;; This program is free software; you can redistribute it and/or    
;; modify it under the terms of the GNU General Public License as   
;; published by the Free Software Foundation; either version 2 of   
;; the License, or (at your option) any later version.              
;;                                                                  
;; This program is distributed in the hope that it will be useful,  
;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;; GNU General Public License for more details.                     
;;                                                                  
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;;Custom wrapper definitions.
;;
;;; Code:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Types
(define-boxed Border
  (c-name "GtkBorder")
  (gtype-id "GTK_TYPE_BORDER"))

(define-object Clipboard
  (c-name "GtkClipboard")
  (gtype-id "GTK_TYPE_CLIPBOARD"))

(define-object CellLayout
  (c-name "GtkCellLayout")
  (gtype-id "GTK_TYPE_CELL_LAYOUT"))

(define-object AccelMap
  (c-name "GtkAccelMap")
  (gtype-id "GTK_TYPE_ACCEL_MAP"))

(define-boxed TreeRowReference
  (c-name "GtkTreeRowReference")
  (gtype-id "GTK_TYPE_TREE_ROW_REFERENCE"))

(define-object FileFilter
  (c-name "GtkFileFilter")
  (gtype-id "GTK_TYPE_FILE_FILTER"))

(define-object PrintContext
  (c-name "GtkPrintContext")
  (gtype-id "GTK_TYPE_PRINT_CONTEXT"))

(define-object PrintOperationPreview
  (c-name "GtkPrintOperationPreview")
  (gtype-id "GTK_TYPE_PRINT_OPERATION_PREVIEW"))

(define-object PrintSettings
  (c-name "GtkPrintSettings")
  (gtype-id "GTK_TYPE_PRINT_SETTINGS"))

(define-object PageSetup
  (c-name "GtkPageSetup")
  (gtype-id "GTK_TYPE_PAGE_SETUP"))

(define-boxed PaperSize
  (c-name "GtkPaperSize")
  (gtype-id "GTK_TYPE_PAPER_SIZE"))

(define-object IMContext
  (c-name "GtkIMContext")
  (gtype-id "GTK_TYPE_IM_CONTEXT"))

(define-boxed RecentInfo
  (c-name "GtkRecentInfo")
  (gtype-id "GTK_TYPE_RECENT_INFO"))

(define-object RecentChooser
  (c-name "GtkRecentChooser")
  (gtype-id "GTK_TYPE_RECENT_CHOOSER"))

(define-object RecentFilter
  (c-name "GtkRecentFilter")
  (gtype-id "GTK_TYPE_RECENT_FILTER"))

(define-object GenericTreeModel
  (in-module "GuileGtk")
  (parent "GtkTreeModel")
  (c-name "GuileGtkGenericTreeModel")
  (gtype-id "GUILE_GTK_TYPE_GENERIC_TREE_MODEL"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Customs
(include "gnome/overrides/gtk-customs.defs")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkActionGroup
(define-method add_actions
  (of-object "GtkActionGroup")
  (c-name "_wrap_gtk_action_group_add_actions")
  (overrides "gtk_action_group_add_actions")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "entries")))

(define-method add_toggle_actions
  (of-object "GtkActionGroup")
  (c-name "_wrap_gtk_action_group_add_toggle_actions")
  (overrides "gtk_action_group_add_toggle_actions")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "entries")))

(define-method add_radio_actions
  (of-object "GtkActionGroup")
  (c-name "_wrap_gtk_action_group_add_radio_actions")
  (overrides "gtk_action_group_add_radio_actions")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("SCM"  "entries")
    '("gint" "value")
    '("SCM"  "on_change")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkCellView
(define-method get_cell_renderers
  (of-object "GtkCellView")
  (c-name "gtk_cell_view_get_cell_renderers")
  (overrides "gtk_cell_view_get_cell_renderers")
  (return-type "GList*-of-GtkCellView*")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkClipboard
(define-method set_text
  (of-object "GtkClipboard")
  (c-name "_wrap_gtk_clipboard_set_text")
  (overrides "gtk_clipboard_set_text")
  (parameters
   '("const-gchar*" "text")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkColorSelectionDialog
(define-method get_colorsel
  (of-object "GtkColorSelectionDialog")
  (c-name "_wrap_gtk_color_selection_dialog_get_colorsel")
  (overrides "gtk-color-selection-dialog-get-colorsel")
  (return-type "GtkWidget*"))
(define-method get_ok_button
  (of-object "GtkColorSelectionDialog")
  (c-name "_wrap_gtk_color_selection_dialog_get_ok_button")
  (overrides "gtk-color-selection-dialog-get-ok-button")
  (return-type "GtkWidget*"))
(define-method get_cancel_button
  (of-object "GtkColorSelectionDialog")
  (c-name "_wrap_gtk_color_selection_dialog_get_cancel_button")
  (overrides "gtk-color-selection-dialog-get-cancel-button")
  (return-type "GtkWidget*"))
(define-method get_help_button
  (of-object "GtkColorSelectionDialog")
  (c-name "_wrap_gtk_color_selection_dialog_get_help_button")
  (overrides "gtk-color-selection-dialog-get-help-button")
  (return-type "GtkWidget*"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkDialog
(define-method get_vbox
  (of-object "GtkDialog")
  (c-name "_wrap_gtk_dialog_get_vbox")
  (overrides "gtk_dialog_get_vbox")
  (return-type "GtkWidget*"))
(define-method get_action_area
  (of-object "GtkDialog")
  (c-name "_wrap_gtk_dialog_get_action_area")
  (overrides "gtk_dialog_get_action_area")
  (return-type "GtkWidget*"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkEditable
(define-method insert_text
  (of-object "GtkEditable")
  (c-name "_wrap_gtk_editable_insert_text")
  (overrides "gtk_editable_insert_text")
  (return-type "gint")
  (parameters
    '("const-gchar*" "new_text")
    '("gint" "position")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkFileSelection
;; NB: As of Gtk+-2.4, this API is obsolete.
(define-function gtk-file-selection:ok-button
  (c-name "_wrap_gtk_file_selection_get_ok_button")
  (overrides "gtk-file-selection:ok-button") ;; scm-name hack
  (return-type "GtkWidget*")
  (parameters
   '("GtkFileSelection*" "selection")))
(define-function gtk-file-selection:cancel-button
  (c-name "_wrap_gtk_file_selection_get_cancel_button")
  (overrides "gtk-file-selection:cancel-button") ;; scm-name hack
  (return-type "GtkWidget*")
  (parameters
   '("GtkFileSelection*" "selection")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkIconView

(define-method get_selected_items
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_selected_items")
  (overrides "gtk_icon_view_get_selected_items")
  (return-type "GList*-of-GtkTreePath*")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkIconSize
(define-function lookup
  (c-name "gtk_icon_size_lookup")
  (overrides "gtk_icon_size_lookup")
  (return-type "gboolean")
  (parameters
    '("GtkIconSize" "size")
    '("gint*" "width")
    '("gint*" "height")
  )
)
(define-function get_name
  (c-name "gtk_icon_size_get_name")
  (overrides "gtk_icon_size_get_name")
  (return-type "const-gchar*")
  (parameters
    '("GtkIconSize" "size")
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkListStore
(define-function gtk_list_store_new
  (c-name "_wrap_gtk_list_store_new")
  (overrides "gtk_list_store_new")
  (is-constructor-of GtkListStore)
  (return-type "GtkListStore*")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "types")))
(define-method set_value
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_set_value")
  (overrides "gtk_list_store_set_value")
  (return-type "void")
  (leave-guile-mode #f)
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")
    '("SCM" "value")))
(define-method remove
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_remove")
  (overrides "gtk_list_store_remove")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "iter")))
(define-method insert
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_insert")
  (overrides "gtk_list_store_insert")
  (return-type "GtkTreeIter*")
  (parameters
    '("gint" "position")))
(define-method insert_before
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_insert_before")
  (overrides "gtk_list_store_insert_before")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "sibling" (null-ok))))
(define-method insert_after
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_insert_after")
  (overrides "gtk_list_store_insert_after")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "sibling" (null-ok))))
(define-method prepend
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_prepend")
  (overrides "gtk_list_store_prepend")
  (return-type "GtkTreeIter*"))
(define-method append
  (of-object "GtkListStore")
  (c-name "_wrap_gtk_list_store_append")
  (overrides "gtk_list_store_append")
  (return-type "GtkTreeIter*"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkMenu
(define-function gtk_menu_get_for_attach_widget
  (c-name "gtk_menu_get_for_attach_widget")
  (overrides "gtk_menu_get_for_attach_widget")
  (return-type "const-GList*-of-GtkMenu*")
  (parameters
    '("GtkWidget*" "widget")
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkMessageDialog
(ignore "gtk_message_dialog_new")
(define-function gtk_message_dialog_new
  (c-name "_wrap_gtk_message_dialog_new")
  (overrides "%gtk-message-dialog-new") ;; hack
  (is-constructor-of GtkMessageDialog)
  (leave-guile-mode #f)
  (return-type "SCM")
  (parameters
    '("GtkWindow*" "parent" (null-ok) (default "NULL"))
    '("GtkDialogFlags" "flags" (default "0"))
    '("GtkMessageType" "type" (default "GTK_MESSAGE_INFO"))
    '("GtkButtonsType" "buttons" (default "GTK_BUTTONS_NONE"))
    '("const-gchar*" "text")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkRadio*
;; Note that GtkRadioGroup is #defined to GSList in the g-wrap spec.
;; This is done because the group should be treated opaquely, not as a
;; list.
(define-function gtk_radio_button_new
  (c-name "gtk_radio_button_new")
  (overrides "gtk_radio_button_new")
  (is-constructor-of GtkRadioButton)
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )))
(define-function radio_button_new_with_label
  (c-name "gtk_radio_button_new_with_label")
  (overrides "gtk_radio_button_new_with_label")
  (is-constructor-of GtkRadioButton)
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )
    '("const-gchar*" "label")))
(define-function radio_button_new_with_mnemonic
  (c-name "gtk_radio_button_new_with_mnemonic")
  (overrides "gtk_radio_button_new_with_mnemonic")
  (is-constructor-of GtkRadioButton)
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )
    '("const-gchar*" "label")))
(define-method get_group
  (of-object "GtkRadioButton")
  (c-name "gtk_radio_button_get_group")
  (overrides "gtk_radio_button_get_group")
  (return-type "GtkRadioGroup*"))
(define-method set_group
  (of-object "GtkRadioButton")
  (c-name "gtk_radio_button_set_group")
  (overrides "gtk_radio_button_set_group")
  (return-type "none")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )))
(define-function gtk_radio_menu_item_new
  (c-name "gtk_radio_menu_item_new")
  (overrides "gtk_radio_menu_item_new")
  (is-constructor-of GtkRadioMenuItem)
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )))
(define-function gtk_radio_menu_item_new_with_label
  (c-name "gtk_radio_menu_item_new_with_label")
  (overrides "gtk_radio_menu_item_new_with_label")
  (is-constructor-of GtkRadioMenuItem)
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )
    '("const-gchar*" "label")))
(define-function gtk_radio_menu_item_new_with_mnemonic
  (c-name "gtk_radio_menu_item_new_with_mnemonic")
  (overrides "gtk_radio_menu_item_new_with_mnemonic")
  (is-constructor-of GtkRadioMenuItem)
  (return-type "GtkWidget*")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok))
    '("const-gchar*" "label")))
(define-method get_group
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_get_group")
  (overrides "gtk_radio_menu_item_get_group")
  (return-type "GtkRadioGroup*"))
(define-method set_group
  (of-object "GtkRadioMenuItem")
  (c-name "gtk_radio_menu_item_set_group")
  (overrides "gtk_radio_menu_item_set_group")
  (return-type "none")
  (parameters
    '("GtkRadioGroup*" "group" (null-ok) )))
(define-function
  gtk_radio_tool_button_new
  (c-name "gtk_radio_tool_button_new")
  (overrides "gtk_radio_tool_button_new")
  (is-constructor-of "GtkRadioToolButton")
  (return-type "GtkToolItem*")
  (parameters
    '("GtkRadioGroup*" "group"
      (default "NULL"))))
(define-function
  gtk_radio_tool_button_new_from_stock
  (c-name "gtk_radio_tool_button_new_from_stock")
  (overrides
    "gtk_radio_tool_button_new_from_stock")
  (return-type "GtkToolItem*")
  (parameters
    '("GtkRadioGroup*" "group"
      (default "NULL"))
    '("const-gchar*" "stock_id")))
(define-method
  get_group
  (of-object "GtkRadioToolButton")
  (c-name "gtk_radio_tool_button_get_group")
  (overrides "gtk_radio_tool_button_get_group")
  (return-type "GtkRadioGroup*"))
(define-method
  set_group
  (of-object "GtkRadioToolButton")
  (c-name "gtk_radio_tool_button_set_group")
  (overrides "gtk_radio_tool_button_set_group")
  (return-type "none")
  (parameters
    '("GtkRadioGroup*" "group")))
(define-method
  get_group
  (of-object "GtkRadioAction")
  (c-name "gtk_radio_action_get_group")
  (overrides "gtk_radio_action_get_group")
  (return-type "GtkRadioGroup*"))
(define-method
  set_group
  (of-object "GtkRadioAction")
  (c-name "gtk_radio_action_set_group")
  (overrides "gtk_radio_action_set_group")
  (return-type "none")
  (parameters
    '("GtkRadioGroup*" "group")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkRecentChooser
(define-method get_items
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_get_items")
  (overrides "gtk_recent_chooser_get_items")
  (return-type "GList*-of-GtkRecentInfo*")
)

(define-method list_filters
  (of-object "GtkRecentChooser")
  (c-name "gtk_recent_chooser_list_filters")
  (overrides "gtk_recent_chooser_list_filters")
  (return-type "GSList*-of-GtkRecentFilter*")
)

(define-method get_items
  (of-object "GtkRecentManager")
  (c-name "gtk_recent_manager_get_items")
  (overrides "gtk_recent_manager_get_items")
  (return-type "GList*-of-GtkRecentInfo*")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkSelectionData
(define-method get_as_string
  (of-object "GtkSelectionData")
  (c-name "_gtk_selection_data_get_as_string")
  (overrides "gtk_selection_data_get_as_string")
  (return-type "gchar*"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkStockItem
(define-function gtk_stock_add
  (c-name    "_wrap_gtk_stock_add")
  (overrides "gtk_stock_add")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
   '("SCM" "items")))

(define-function gtk_stock_lookup
  (c-name    "_wrap_gtk_stock_lookup")
  (overrides "gtk_stock_lookup")
  (leave-guile-mode #f)
  (return-type "SCM")
  (parameters
    '("const-gchar*" "stock_id")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkStyle
(define-method get-fg-gc
  (of-object "GtkStyle")
  (c-name "gtk_style_get_fg_gc")
  (return-type "GdkGC*")
  (parameters '("GtkStateType" "state")))

(define-method get-bg-gc
  (of-object "GtkStyle")
  (c-name "gtk_style_get_bg_gc")
  (return-type "GdkGC*")
  (parameters '("GtkStateType" "state")))

(define-method get-white-gc
  (of-object "GtkStyle")
  (c-name "gtk_style_get_white_gc")
  (return-type "GdkGC*"))

(define-method get-black-gc
  (of-object "GtkStyle")
  (c-name "gtk_style_get_black_gc")
  (return-type "GdkGC*"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkTextBuffer
(define-method set_text
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_set_text")
  (overrides "gtk_text_buffer_set_text")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "stext")))
(define-method insert
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_insert")
  (overrides "gtk_text_buffer_insert")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("GtkTextIter*" "iter")
    '("SCM" "stext")))
(define-method insert_at_cursor
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_insert_at_cursor")
  (overrides "gtk_text_buffer_insert_at_cursor")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "stext")))
(define-method insert_interactive
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_insert_interactive")
  (overrides "gtk_text_buffer_insert_interactive")
  (return-type "gboolean")
  (leave-guile-mode #f)
  (parameters
    '("GtkTextIter*" "iter")
    '("SCM" "stext")
    '("gboolean" "default_editable")))
(define-method insert_interactive_at_cursor
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_insert_interactive_at_cursor")
  (overrides "gtk_text_buffer_insert_interactive_at_cursor")
  (return-type "gboolean")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "stext")
    '("gboolean" "default_editable")))
(define-method insert_with_tags
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_insert_with_tags")
  (overrides "gtk_text_buffer_insert_with_tags")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("GtkTextIter*" "iter")
    '("SCM" "stext")
    '("GList*-of-GtkTextTag*" "tag_list")))
(define-method insert_with_tags_by_name
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_insert_with_tags_by_name")
  (overrides "gtk_text_buffer_insert_with_tags_by_name")
  (return-type "none")
  (leave-guile-mode #f)
  (parameters
    '("GtkTextIter*" "iter")
    '("SCM" "stext")
    '("GList*-of-const-gchar*" "tag_list")))
(define-method get_iter_at_line_offset
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_iter_at_line_offset")
  (overrides "gtk_text_buffer_get_iter_at_line_offset")
  (return-type "GtkTextIter*")
  (parameters
    '("gint" "line_number")
    '("gint" "char_offset")))
(define-method get_iter_at_line_index
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_iter_at_line_index")
  (overrides "gtk_text_buffer_get_iter_at_line_index")
  (return-type "GtkTextIter*")
  (parameters
    '("gint" "line_number")
    '("gint" "byte_index")))
(define-method get_iter_at_offset
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_iter_at_offset")
  (overrides "gtk_text_buffer_get_iter_at_offset")
  (return-type "GtkTextIter*")
  (parameters
    '("gint" "char_offset")))
(define-method get_iter_at_line
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_iter_at_line")
  (overrides "gtk_text_buffer_get_iter_at_line")
  (return-type "GtkTextIter*")
  (parameters
    '("gint" "line_number")))
(define-method get_start_iter
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_start_iter")
  (overrides "gtk_text_buffer_get_start_iter")
  (return-type "GtkTextIter*"))
(define-method get_bounds
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_bounds")
  (overrides "gtk_text_buffer_get_bounds")
  (leave-guile-mode #f)
  (return-type "SCM"))
(define-method get_selection_bounds
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_selection_bounds")
  (overrides "gtk_text_buffer_get_selection_bounds")
  (leave-guile-mode #f)
  (return-type "SCM"))
(define-method get_end_iter
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_end_iter")
  (overrides "gtk_text_buffer_get_end_iter")
  (return-type "GtkTextIter*"))
(define-method get_iter_at_mark
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_iter_at_mark")
  (overrides "gtk_text_buffer_get_iter_at_mark")
  (return-type "GtkTextIter*")
  (parameters
    '("GtkTextMark*" "mark")))
(define-method get_iter_at_child_anchor
  (of-object "GtkTextBuffer")
  (c-name "_wrap_gtk_text_buffer_get_iter_at_child_anchor")
  (overrides "gtk_text_buffer_get_iter_at_child_anchor")
  (return-type "GtkTextIter*")
  (parameters
    '("GtkTextChildAnchor*" "anchor")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkTreeModel
(define-method get_iter
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_get_iter")
  (overrides "gtk_tree_model_get_iter")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreePath*" "path")))
(define-method get_iter_first
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_get_iter_first")
  (overrides "gtk_tree_model_get_iter_first")
  (return-type "GtkTreeIter*"))
(define-method get_value
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_get_value")
  (overrides "gtk_tree_model_get_value")
  (leave-guile-mode #f)
  (return-type "SCM")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")))
(define-method iter_next
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_iter_next")
  (overrides "gtk_tree_model_iter_next")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "iter")))
(define-method iter_children
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_iter_children")
  (overrides "gtk_tree_model_iter_children")
  (return-type "GList*-of-GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent" (null-ok))))
(define-method iter_parent
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_iter_parent")
  (overrides "gtk_tree_model_iter_parent")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "child")))
(define-method iter_nth_child
  (of-object "GtkTreeModel")
  (c-name "_wrap_gtk_tree_model_iter_nth_child")
  (overrides "gtk_tree_model_iter_nth_child")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent" (null-ok))
    '("gint" "n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkTreeSelection
(define-method get_selected
  (of-object "GtkTreeSelection")
  (c-name "_wrap_gtk_tree_selection_get_selected")
  (overrides "gtk_tree_selection_get_selected")
  (leave-guile-mode #f)
  (return-type "SCM"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkTreeStore
(define-function gtk_tree_store_new
  (c-name "_wrap_gtk_tree_store_new")
  (overrides "gtk_tree_store_new")
  (is-constructor-of GtkTreeStore)
  (return-type "GtkTreeStore*")
  (leave-guile-mode #f)
  (parameters
    '("SCM" "types")))
(define-method set_value
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_set_value")
  (overrides "gtk_tree_store_set_value")
  (return-type "void")
  (leave-guile-mode #f)
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint" "column")
    '("SCM" "value")))
(define-method remove
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_remove")
  (overrides "gtk_tree_store_remove")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "iter")))
(define-method insert
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_insert")
  (overrides "gtk_tree_store_insert")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent")
    '("gint" "position")))
(define-method insert_before
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_insert_before")
  (overrides "gtk_tree_store_insert_before")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent" (null-ok))
    '("GtkTreeIter*" "sibling" (null-ok))))
(define-method insert_after
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_insert_after")
  (overrides "gtk_tree_store_insert_after")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent" (null-ok))
    '("GtkTreeIter*" "sibling" (null-ok))))
(define-method prepend
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_prepend")
  (overrides "gtk_tree_store_prepend")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent" (null-ok))))
(define-method append
  (of-object "GtkTreeStore")
  (c-name "_wrap_gtk_tree_store_append")
  (overrides "gtk_tree_store_append")
  (return-type "GtkTreeIter*")
  (parameters
    '("GtkTreeIter*" "parent" (null-ok))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkTreeViewColumn
(define-method set_cell_data_func
  (of-object "GtkTreeViewColumn")
  (c-name "_wrap_gtk_tree_view_column_set_cell_data_func")
  (overrides "gtk_tree_view_column_set_cell_data_func")
  (leave-guile-mode #f)
  (parameters
    '("GtkCellRenderer*" "cell")
    '("SCM" "proc")))

(define-method get_cell_renderers
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_cell_renderers")
  (return-type "GList*-of-GtkCellRenderer*")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkUIManager
(define-method add_ui_from_string
  (of-object "GtkUIManager")
  (c-name "_wrap_gtk_ui_manager_add_ui_from_string")
  (overrides "gtk_ui_manager_add_ui_from_string")
  (return-type "guint")
  (parameters
    '("const-gchar*" "buffer")
    '("GError**" "error")
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GtkWidget
(define-method drag_dest_set
  (of-object "GtkWidget")
  (c-name "_wrap_gtk_drag_dest_set")
  (overrides "gtk_drag_dest_set")
  (parameters
   '("GtkDestDefaults" "flags")
   '("const-GList*-of-const-gchar*" "types")
   '("GdkDragAction" "actions")))

(define-method get-window
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_window")
  (return-type "GdkWindow*"))

(define-method get-allocation
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_allocation")
  (return-type "GdkRectangle*")) ;; same as GtkAllocation

(ignore-glob  "*_get_type"
              "_*"
              "*_ref"
              "*_unref"
              "*_copy"
              "*_free"
              "*_newv"
              "*_valist"
              "*_setv"
              "*_foreach"
              "*_valist")

;; deprecated parts of gtk
(ignore-glob "gtk_item_factory*"
             "gtk_clist*"
             "gtk_ctree*"
             "gtk_combo_new" ;; avoid ignoring gtk_combo_box
             "gtk_combo_set_*"
             "gtk_combo_disable_activate"
             "gtk_list_item_*"
             "gtk_old_editable*"
             "gtk_option_menu*"
             "gtk_pixmap*"
             "gtk_preview*"
             "gtk_progress_set_*" ;; avoid ignoring gtk_progress_bar
             "gtk_progress_get_*"
             "gtk_progress_configure"
             "gtk_text_new" ;; avoid ignoring textbuffer/view, etc
             "gtk_text_set_*"
             "gtk_text_get_*"
             "gtk_text_freeze"
             "gtk_text_thaw"
             "gtk_text_insert"
             "gtk_text_backward_delete"
             "gtk_text_forward_delete"
             "gtk_tips_query_*"
             "gtk_tree_new" ;; avoid ignoring treemodel/view, etc
             "gtk_tree_append"
             "gtk_tree_prepend"
             "gtk_tree_insert"
             "gtk_tree_remove_*"
             "gtk_tree_set_*"
             "gtk_tree_clear_items"
             "gtk_tree_select_*"
             "gtk_tree_unselect_*"
             "gtk_tree_child_position"
             "gtk_tree_item_*")

(ignore-glob "gtk_file_system_*"
             "gtk_file_info_*"
             "gtk_file_loader_*"
             "gtk_file_folder_*"
             "gtk_file_path*"
             "gtk_icon_info_*"
             "gtk_button_box_*_size"
             "gtk_button_box_*_ipadding"
             "gtk_signal_*"
             "gtk_text_layout*"
             "gtk_text_child_anchor_register_child"
             "gtk_text_child_anchor_unregister_child"
             "gtk_text_child_anchor_queue_resize"
             "gtk_text_anchored_child_set_layout"
             "gtk_gc_*"
             "gtk_idle_*"
             "gtk_init*"
             "gtk_input_add*" ; there is also gtk_input_dialog
             "gtk_input_remove"
             "gtk_quit_*"
             "gtk_timeout_*"
             "gtk_target_list_*"
             "gtk_tree_path_*"
             "gtk_binding*"
             "gtk_object_*"
             "gtk_marshal_*")

;; should probably define a null-terminated string array type
(ignore
 "gtk_about_dialog_get_artists"
 "gtk_about_dialog_get_authors"
 "gtk_about_dialog_get_comments"
 "gtk_about_dialog_get_documenters"
 "gtk_about_dialog_get_translator_credits"
 "gtk_about_dialog_set_artists"
 "gtk_about_dialog_set_authors"
 "gtk_about_dialog_set_comments"
 "gtk_about_dialog_set_documenters"
 "gtk_about_dialog_set_email_hook"
 "gtk_about_dialog_set_translator_credits"
 "gtk_about_dialog_set_url_hook"
 "gtk_accel_group_find"
 "gtk_accel_group_query"
 "gtk_accel_map_foreach_unfiltered"
 "gtk_accel_map_load_scanner"
 "gtk_accel_map_lookup_entry"
 "gtk_accelerator_parse"                ; GdkModifierType*
 "gtk_action_group_add_actions_full"
 "gtk_action_group_add_radio_actions_full"
 "gtk_action_group_add_toggle_actions_full"
 "gtk_action_group_set_translate_func"
 "gtk_assistant_set_forward_page_func"
 "gtk_box_query_child_packing"
 "gtk_calendar_display_options"
 "gtk_cell_layout_set_cell_data_func"
 "gtk_cell_renderer_get_size"
 "gtk_check_menu_item_set_show_toggle"
 "gtk_clipboard_request_contents"
 "gtk_clipboard_request_image"
 "gtk_clipboard_request_rich_text"
 "gtk_clipboard_request_targets"
 "gtk_clipboard_request_text"
 "gtk_clipboard_set_can_store"
 "gtk_clipboard_set_with_data"
 "gtk_clipboard_set_with_owner"
 "gtk_clipboard_wait_for_rich_text"
 "gtk_clipboard_wait_for_targets"
 "gtk_color_selection_get_color"
 "gtk_color_selection_palette_from_string"
 "gtk_color_selection_set_change_palette_hook"
 "gtk_color_selection_set_change_palette_with_screen_hook"
 "gtk_color_selection_set_color"
 "gtk_color_selection_set_update_policy"
 "gtk_combo_box_get_row_separator_func"
 "gtk_combo_box_set_row_separator_func"
 "gtk_container_add_child_arg_type"
 "gtk_container_add_with_args"
 "gtk_container_addv"
 "gtk_container_child_arg_get_info"
 "gtk_container_child_args_collect"
 "gtk_container_class_find_child_property"
 "gtk_container_class_install_child_property"
 "gtk_container_class_list_child_properties"
 "gtk_container_forall"         ;; scm equivalent unimplemented
 "gtk_container_foreach"        ;; use (for-each f (get-children c))
 "gtk_container_foreach_full"
 "gtk_container_get_focus_chain"
 "gtk_container_get_property"
 "gtk_container_query_child_args"
 "gtk_container_set_property"
 "gtk_curve_get_vector"
 "gtk_curve_set_curve_type"
 "gtk_curve_set_vector"
 "gtk_dialog_new"
 "gtk_dialog_set_alternative_button_order"
 "gtk_dialog_set_alternative_button_order_from_array"
 "gtk_drag_begin"
 "gtk_drag_dest_find_target"
 "gtk_drag_dest_get_target_list"
 "gtk_drag_dest_set_target_list"
 "gtk_drag_set_default_icon"
 "gtk_drag_set_source"
 "gtk_drag_source_get_target_list"
 "gtk_drag_source_set"
 "gtk_drag_source_set_target_list"
 "gtk_draw_arrow"
 "gtk_draw_box"
 "gtk_draw_box_gap"
 "gtk_draw_check"
 "gtk_draw_diamond"
 "gtk_draw_expander"
 "gtk_draw_extension"
 "gtk_draw_flat_box"
 "gtk_draw_focus"
 "gtk_draw_handle"
 "gtk_draw_hline"
 "gtk_draw_layout"
 "gtk_draw_option"
 "gtk_draw_polygon"
 "gtk_draw_resize_grip"
 "gtk_draw_shadow"
 "gtk_draw_shadow_gap"
 "gtk_draw_slider"
 "gtk_draw_string"
 "gtk_draw_tab"
 "gtk_draw_vline"
 "gtk_drawing_area_size"
 "gtk_entry_append_text"
 "gtk_entry_completion_set_match_func"
 "gtk_entry_new"
 "gtk_entry_new_with_max_length"
 "gtk_entry_prepend_text"
 "gtk_entry_select_region"
 "gtk_entry_set_editable"
 "gtk_entry_set_position"
 "gtk_exit"
 "gtk_file_filter_add_custom"
 "gtk_file_filter_filter"
 "gtk_file_folder_is_finished_loading"
 "gtk_file_selection_get_selections"
 "gtk_font_selection_dialog_get_font"
 "gtk_font_selection_get_font"
 "gtk_gc_get"                           ; GdkGCValues*
 "gtk_get_current_event"
 "gtk_get_current_event_state"          ; GdkModifierType*
 "gtk_get_event_widget"
 "gtk_get_option_group"
 "gtk_hbutton_box_get_layout_default"
 "gtk_hbutton_box_get_spacing_default"
 "gtk_hbutton_box_set_layout_default"
 "gtk_hbutton_box_set_spacing_default"
 "gtk_icon_set_get_sizes"
 "gtk_icon_theme_get_icon_sizes"
 "gtk_icon_theme_get_search_path"        ;; returns array
 "gtk_icon_theme_lookup_icon"
 "gtk_icon_theme_set_search_path"        ;; takes array
 "gtk_icon_view_enable_model_drag_dest"
 "gtk_icon_view_enable_model_drag_source"
 "gtk_icon_view_get_cursor"
 "gtk_icon_view_get_dest_item_at_pos"
 "gtk_icon_view_get_drag_dest_item"
 "gtk_icon_view_get_item_at_pos"
 "gtk_icon_view_get_visible_range"
 "gtk_im_context_get_preedit_string"
 "gtk_image_get"
 "gtk_image_get_icon_name"
 "gtk_image_get_icon_set"
 "gtk_image_get_image"
 "gtk_image_get_pixmap"
 "gtk_image_get_stock"
 "gtk_image_set"
 "gtk_item_factories_path_delete"
 "gtk_key_snooper_install"
 "gtk_key_snooper_remove"
 "gtk_label_get"
 "gtk_label_parse_uline"
 "gtk_layout_freeze"
 "gtk_layout_thaw"
 "gtk_link_button_set_uri_hook"
 "gtk_list_append_items"
 "gtk_list_child_position"
 "gtk_list_clear_items"
 "gtk_list_end_drag_selection"
 "gtk_list_end_selection"
 "gtk_list_extend_selection"
 "gtk_list_get_type"
 "gtk_list_insert_items"
 "gtk_list_new"
 "gtk_list_prepend_items"
 "gtk_list_remove_items"
 "gtk_list_remove_items_no_unref"
 "gtk_list_scroll_horizontal"
 "gtk_list_scroll_vertical"
 "gtk_list_select_all"
 "gtk_list_select_child"
 "gtk_list_select_item"
 "gtk_list_set_selection_mode"
 "gtk_list_start_selection"
 "gtk_list_store_insert_with_values"
 "gtk_list_store_insert_with_valuesv"
 "gtk_list_store_newv"
 "gtk_list_store_set_column_types"
 "gtk_list_toggle_add_mode"
 "gtk_list_toggle_focus_row"
 "gtk_list_toggle_row"
 "gtk_list_undo_selection"
 "gtk_list_unselect_all"
 "gtk_list_unselect_child"
 "gtk_list_unselect_item"
 "gtk_menu_attach_to_widget"
 "gtk_menu_popup"
 "gtk_message_dialog_format_secondary_markup"
 "gtk_message_dialog_format_secondary_text"
 "gtk_notebook_query_tab_label_packing"
 "gtk_notebook_set_homogeneous_tabs"
 "gtk_notebook_set_tab_border"
 "gtk_notebook_set_tab_hborder"
 "gtk_notebook_set_tab_vborder"
 "gtk_notebook_set_window_creation_hook"
 "gtk_paint_polygon"                    ; GdkPoint*
 "gtk_paint_string"
 "gtk_paned_compute_position"
 "gtk_parse_args"
 "gtk_preview_uninit"
 "gtk_print_run_page_setup_dialog_async"
 "gtk_print_settings_get_page_ranges"
 "gtk_print_settings_get_print_pages"
 "gtk_print_settings_set_page_ranges"
 "gtk_print_settings_set_print_pages"
 "gtk_progress_bar_new_with_adjustment"
 "gtk_progress_bar_set_activity_blocks"
 "gtk_progress_bar_set_activity_step"
 "gtk_progress_bar_set_bar_style"
 "gtk_progress_bar_set_discrete_blocks"
 "gtk_progress_bar_update"
 "gtk_rc_add_class_style"
 "gtk_rc_add_widget_class_style"
 "gtk_rc_add_widget_name_style"
 "gtk_rc_find_pixmap_in_path"
 "gtk_rc_get_default_files"
 "gtk_rc_parse_color"
 "gtk_rc_parse_priority"
 "gtk_rc_parse_state"
 "gtk_rc_scanner_new"
 "gtk_recent_chooser_get_uris"
 "gtk_recent_chooser_set_sort_func"
 "gtk_recent_filter_add_custom"
 "gtk_recent_filter_filter"
 "gtk_recent_info_get_applications"
 "gtk_recent_info_get_groups"
 "gtk_recent_manager_add_full"
 "gtk_scrolled_window_get_policy"
 "gtk_selection_add_targets"
 "gtk_selection_clear"
 "gtk_selection_data_get_targets"
 "gtk_selection_data_get_text"          ; guchar*
 "gtk_selection_data_get_uris"
 "gtk_selection_data_set"               ; guchar*
 "gtk_selection_data_set_uris"
 "gtk_selection_request"
 "gtk_set_locale"
 "gtk_settings_install_property_parser"
 "gtk_settings_set_property_value"
 "gtk_size_group_get_widgets"
 "gtk_socket_steal"
 "gtk_status_icon_get_geometry"
 "gtk_status_icon_position_menu"
 "gtk_stock_set_translate_func"
 "gtk_style_get_font"
 "gtk_style_set_font"
 "gtk_target_table_new_from_list"
 "gtk_targets_include_image"
 "gtk_targets_include_rich_text"
 "gtk_targets_include_text"
 "gtk_targets_include_uri"
 "gtk_text_buffer_create_tag"
 "gtk_text_buffer_deserialize"
 "gtk_text_buffer_get_copy_target_list"
 "gtk_text_buffer_get_deserialize_formats"
 "gtk_text_buffer_get_paste_target_list"
 "gtk_text_buffer_get_serialize_formats"
 "gtk_text_buffer_register_deserialize_format"
 "gtk_text_buffer_register_serialize_format"
 "gtk_text_buffer_serialize"
 "gtk_text_buffer_unregister_deserialize_format"
 "gtk_text_buffer_unregister_serialize_format"
 "gtk_text_iter_backward_find_char"
 "gtk_text_iter_forward_find_char"
 "gtk_text_view_get_iter_at_position"
 "gtk_text_view_new"
 "gtk_toolbar_append_element"
 "gtk_toolbar_append_item"
 "gtk_toolbar_append_space"
 "gtk_toolbar_append_widget"
 "gtk_toolbar_insert_element"
 "gtk_toolbar_insert_item"
 "gtk_toolbar_insert_space"
 "gtk_toolbar_insert_stock"
 "gtk_toolbar_insert_widget"
 "gtk_toolbar_prepend_element"
 "gtk_toolbar_prepend_item"
 "gtk_toolbar_prepend_space"
 "gtk_toolbar_prepend_widget"
 "gtk_toolbar_remove_space"
 "gtk_toolbar_set_icon_size"
 "gtk_toolbar_unset_icon_size"
 "gtk_tooltips_data_get"
 "gtk_tooltips_get_info_from_tip_window"
 "gtk_tooltips_set_delay"
 "gtk_tree_get_row_drag_data"
 "gtk_tree_model_filter_set_modify_func"
 "gtk_tree_model_filter_set_visible_func"
 "gtk_tree_model_get_iter_from_string"
 "gtk_tree_selection_get_selected_rows"
 "gtk_tree_selection_get_user_data"
 "gtk_tree_selection_set_select_function"
 "gtk_tree_sortable_get_sort_column_id"
 "gtk_tree_sortable_set_default_sort_func"
 "gtk_tree_sortable_set_sort_func"
 "gtk_tree_store_insert_with_values"
 "gtk_tree_store_insert_with_valuesv"
 "gtk_tree_store_newv"
 "gtk_tree_store_set_column_types"
 "gtk_tree_view_column_cell_get_size"
 "gtk_tree_view_enable_model_drag_dest"
 "gtk_tree_view_enable_model_drag_source"
 "gtk_tree_view_get_background_area"
 "gtk_tree_view_get_cell_area"
 "gtk_tree_view_get_cursor"
 "gtk_tree_view_get_dest_row_at_pos"
 "gtk_tree_view_get_drag_dest_row"
 "gtk_tree_view_get_path_at_pos"
 "gtk_tree_view_get_row_separator_func"
 "gtk_tree_view_get_search_equal_func"
 "gtk_tree_view_get_search_position_func"
 "gtk_tree_view_get_visible_range"
 "gtk_tree_view_get_visible_rect"
 "gtk_tree_view_insert_column_with_data_func"
 "gtk_tree_view_map_expanded_rows"
 "gtk_tree_view_set_column_drag_function"
 "gtk_tree_view_set_destroy_count_func"
 "gtk_tree_view_set_row_separator_func"
 "gtk_tree_view_set_search_equal_func"
 "gtk_tree_view_set_search_position_func"
 "gtk_type_class"                       ; gpointer
 "gtk_type_enum_find_value"
 "gtk_type_enum_get_values"
 "gtk_type_flags_find_value"
 "gtk_type_flags_get_values"
 "gtk_type_init"
 "gtk_type_new"
 "gtk_type_unique"
 "gtk_vbutton_box_get_layout_default"
 "gtk_vbutton_box_get_spacing_default"
 "gtk_vbutton_box_set_layout_default"
 "gtk_vbutton_box_set_spacing_default"
 "gtk_widget_class_find_style_property"
 "gtk_widget_class_install_style_property"
 "gtk_widget_class_install_style_property_parser"
 "gtk_widget_class_list_style_properties"
 "gtk_widget_destroyed"
 "gtk_widget_draw"
 "gtk_widget_intersect"
 "gtk_widget_new"
 "gtk_widget_queue_clear"
 "gtk_widget_queue_clear_area"
 "gtk_widget_set_uposition"
 "gtk_widget_set_usize"
 "gtk_window_add_embedded_xid"
 "gtk_window_remove_embedded_xid"
 "gtk_window_set_geometry_hints"        ; GdkGeometry*
 "gtk_window_set_policy"
 )
