;; -*- scheme -*-
;; guile-gnome
;; Copyright (C) 2008, 2012 Free Software Foundation, Inc.

;; This program is free software; you can redistribute it and/or    
;; modify it under the terms of the GNU General Public License as   
;; published by the Free Software Foundation; either version 2 of   
;; the License, or (at your option) any later version.              
;;                                                                  
;; This program is distributed in the hope that it will be useful,  
;; but WITHOUT ANY WARRANTY; without even the implied warranty of   
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    
;; GNU General Public License for more details.                     
;;                                                                  
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;;Custom wrapper definitions.
;;
;;; Code:

(define-boxed Units
  (in-module "Clutter")
  (c-name "ClutterUnits")
  (gtype-id "CLUTTER_TYPE_UNITS")
)

(define-boxed AnimatorKey
  (in-module "Clutter")
  (c-name "ClutterAnimatorKey")
  (gtype-id "CLUTTER_TYPE_ANIMATOR_KEY")
)

(define-boxed StateKey
  (in-module "Clutter")
  (c-name "ClutterStateKey")
  (gtype-id "(clutter_state_key_get_type ())")
)

(define-interface Animatable
  (in-module "Clutter")
  (c-name "ClutterAnimatable")
  (gtype-id "CLUTTER_TYPE_ANIMATABLE")
)

(define-interface Container
  (in-module "Clutter")
  (c-name "ClutterContainer")
  (gtype-id "CLUTTER_TYPE_CONTAINER")
)

(define-interface Media
  (in-module "Clutter")
  (c-name "ClutterMedia")
  (gtype-id "CLUTTER_TYPE_MEDIA")
)

(define-interface StageManager
  (in-module "Clutter")
  (c-name "ClutterStageManager")
  (gtype-id "CLUTTER_TYPE_STAGE_MANAGER")
)

(define-object ClutterBindingPool
  (in-module "Clutter")
  (c-name "ClutterBindingPool")
  (gtype-id "CLUTTER_TYPE_BINDING_POOL")
)

(define-object AlignConstraint
  (in-module "Clutter")
  (c-name "ClutterAlignConstraint")
  (gtype-id "CLUTTER_TYPE_ALIGN_CONSTRAINT")
)

(define-object BindConstraint
  (in-module "Clutter")
  (c-name "ClutterBindConstraint")
  (gtype-id "CLUTTER_TYPE_BIND_CONSTRAINT")
)

(define-object ColorizeEffect
  (in-module "Clutter")
  (c-name "ClutterColorizeEffect")
  (gtype-id "CLUTTER_TYPE_COLORIZE_EFFECT")
)

(define-object DesaturateEffect
  (in-module "Clutter")
  (c-name "ClutterDesaturateEffect")
  (gtype-id "CLUTTER_TYPE_DESATURATE_EFFECT")
)

(define-object PageTurnEffect
  (in-module "Clutter")
  (c-name "ClutterPageTurnEffect")
  (gtype-id "CLUTTER_TYPE_PAGE_TURN_EFFECT")
)

(define-object Settings
  (in-module "Clutter")
  (c-name "ClutterSettings")
  (gtype-id "CLUTTER_TYPE_SETTINGS")
)

(define-method get_actions
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_actions")
  (overrides "clutter_actor_get_actions")
  (return-type "GList*-of-ClutterAction*")
  )

(define-method get_constraints
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_constraints")
  (overrides "clutter_actor_get_constraints")
  (return-type "GList*-of-ClutterConstraint*")
)

(define-method get_effects
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_effects")
  (overrides "clutter_actor_get_effects")
  (return-type "GList*-of-ClutterEffect*")
)

(define-method set_mode
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_mode")
  (overrides "clutter_alpha_set_mode")
  (return-type "none")
  (parameters
    '("ClutterAnimationMode" "mode")
  )
)

(define-method get_mode
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_mode")
  (overrides "clutter_alpha_get_mode")
  (return-type "ClutterAnimationMode")
)

(define-method get_keys
  (of-object "ClutterAnimator")
  (c-name "clutter_animator_get_keys")
  (overrides "clutter_animator_get_keys")
  (return-type "GList*-of-ClutterAnimatorKey*")
  (parameters
    '("GObject*" "object")
    '("const-gchar*" "property_name")
    '("gdouble" "progress")
  )
)

(define-function clutter_binding_pool_get_for_class
  (c-name "clutter_binding_pool_get_for_class")
  (overrides "clutter_binding_pool_get_for_class")
  (return-type "ClutterBindingPool*")
  (parameters
    '("GObjectClass*" "klass")
  )
)
(define-method get_children
  (of-object "ClutterContainer")
  (c-name "clutter_container_get_children")
  (overrides "clutter_container_get_children")
  (return-type "GList*-of-ClutterActor*")
)

(define-method get_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_actors")
  (overrides "clutter_behaviour_get_actors")
  (return-type "GSList*-of-ClutterActor*")
)

(define-method list_devices
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_list_devices")
  (overrides "clutter_device_manager_list_devices")
  (return-type "GSList*-of-ClutterInputDevice*")
)

(define-method peek_devices
  (of-object "ClutterDeviceManager")
  (c-name "clutter_device_manager_peek_devices")
  (overrides "clutter_device_manager_peek_devices")
  (return-type "const-GSList*-of-ClutterInputDevice*")
)

(define-method get_nodes
  (of-object "ClutterPath")
  (c-name "clutter_path_get_nodes")
    (overrides "clutter_path_get_nodes")
  (return-type "GSList*-of-ClutterPathNode*")
)

(define-method list_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_list_objects")
  (overrides "clutter_script_list_objects")
  (return-type "GList*-of-GObject*")
)

(define-method list_timelines
  (of-object "ClutterScore")
  (c-name "clutter_score_list_timelines")
  (overrides "clutter_score_list_timelines")
  (return-type "GSList*-of-ClutterTimeline*")
)

(define-method get_states
  (of-object "ClutterState")
  (c-name "clutter_state_get_states")
  (overrides "clutter_state_get_states")
  (return-type "GList*-of-const-gchar*")
)

(define-method get_keys
  (of-object "ClutterState")
  (c-name "clutter_state_get_keys")
  (overrides "clutter_state_get_keys")
  (return-type "GList*-of-ClutterStateKey*")
  (parameters
    '("const-gchar*" "source_state_name")
    '("const-gchar*" "target_state_name")
    '("GObject*" "object")
    '("const-gchar*" "property_name")
  )
)

(define-function clutter_units_from_pixels
  (return-type "ClutterUnits*")
  (c-name "wrap_clutter_units_from_pixels")
  (overrides "clutter_units_from_pixels")
  (caller-owns-return #t)
  (parameters
    '("gint" "px")
  )
)

(define-function clutter_units_from_em
  (return-type "ClutterUnits*")
  (c-name "wrap_clutter_units_from_em")
  (overrides "clutter_units_from_em")
  (caller-owns-return #t)
  (parameters
    '("gfloat" "em")
  )
)

(define-function clutter_units_from_em_for_font
  (return-type "ClutterUnits*")
  (c-name "wrap_clutter_units_from_em_for_font")
  (overrides "clutter_units_from_em_for_font")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "font_name")
    '("gfloat" "em")
  )
)

(define-function clutter_units_from_mm
  (return-type "ClutterUnits*")
  (c-name "wrap_clutter_units_from_mm")
  (overrides "clutter_units_from_mm")
  (caller-owns-return #t)
  (parameters
    '("gfloat" "mm")
  )
)

(define-function clutter_units_from_pt
  (return-type "ClutterUnits*")
  (c-name "wrap_clutter_units_from_pt")
  (overrides "clutter_units_from_pt")
  (caller-owns-return #t)
  (parameters
    '("gfloat" "pt")
  )
)

(define-function clutter_units_from_string
  (return-type "ClutterUnits*")
  (c-name "wrap_clutter_units_from_string")
  (overrides "clutter_units_from_string")
  (caller-owns-return #t)
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method get_perspective
  (of-object "ClutterStage")
  (c-name "wrap_clutter_stage_get_perspective")
  (overrides "clutter_stage_get_perspective")
  (return-type "SCM")
  (leave-guile-mode #f))

(define-method get_fog
  (of-object "ClutterStage")
  (c-name "wrap_clutter_stage_get_fog")
  (overrides "clutter_stage_get_fog")
  (return-type "SCM")
  (leave-guile-mode #f))

(define-method list_timelines
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_list_stages")
  (overrides "clutter_stage_manager_list_stages")
  (return-type "GSList*-of-ClutterStage*")
)

(define-method peek_stages
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_peek_stages")
  (overrides "clutter_stage_manager_peek_stages")
  (return-type "const-GSList*-of-ClutterStage*")
)

(define-function clutter_color_from_string
  (c-name "_wrap_clutter_color_from_string")
  (overrides "clutter_color_from_string")
  (return-type "SCM")
  (leave-guile-mode #f)
  (parameters
   '("const-char*" "name")))

(ignore-glob  "*_get_type"
              "_*"
              "*_ref"
              "*_unref"
              "*_copy"
              "*_free"
              "*_newv"
              "*_valist"
              "*_setv"
              "*_foreach"
              "*_valist")

(ignore-glob "*_vertices"
             "*_func"
             "clutter_alpha_new_full"
             "clutter_actor_get_transformation_matrix"
             "clutter_actor_animatev"
             "clutter_actor_animate_with_timelinev"
             "clutter_actor_animate_with_alphav"
             "clutter_binding_pool_install_action"
             "clutter_binding_pool_override_action"
             "clutter_box_packv"
             "clutter_color_hash"
             "clutter_color_equal"
             "clutter_param_spec_color"
             "clutter_container_foreach_with_internals"
             "clutter_container_class_find_child_property"
             "clutter_container_class_list_child_properties"
             "clutter_deform_effect_get_back_material"
             "clutter_deform_effect_set_back_material"
             "clutter_frame_source_*"
             "clutter_init*"
             "clutter_init*"
             "clutter_get_option_group"
             "clutter_get_option_group_without_init"
             ;;"clutter_main*" ;; fixme: do i need to do something special with clutter-main?
             "clutter_threads*"
             "clutter_model*"
             "clutter_layout_manager_list_child_properties"
             "clutter_list_model*"
             "clutter_offscreen_effect_get_target"
             "clutter_offscreen_effect_create_texture"
             "clutter_scriptable*"
             "clutter_script_connect_signals*"
             "clutter_script_add_search_paths"
             "clutter_shader_get_cogl_program"
             "clutter_shader_get_cogl_fragment_shader"
             "clutter_shader_get_cogl_vertex_shader"
             "clutter_shader_effect_get_shader"
             "clutter_shader_effect_get_program"
             "clutter_stage_read_pixels"
             "clutter_texture_set_from_rgb_data"
             "clutter_texture_set_from_yuv_data"
             "clutter_texture_set_area_from_rgb_data"
             "clutter_texture_set_cogl_texture"
             "clutter_texture_get_cogl_texture"
             "clutter_texture_set_cogl_material"
             "clutter_texture_get_cogl_material"
             "clutter_texture_get_pixel_format"
             "clutter_timeline_do_tick"
             "clutter_timeline_list_markers"
             "clutter_timeout_pool*"
             "clutter_param_spec_units"
             "clutter_value_get_units"
             "clutter_value_set_units"
             "clutter_value_get_fixed"
             "clutter_value_set_fixed"
             "clutter_value_set_shader_*"
             "clutter_value_get_shader_*"
             "clutter_param_spec_fixed"
             "clutter_util_next_p2"
             )
