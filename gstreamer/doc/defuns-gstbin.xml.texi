
@c %start of fragment

@deftp Class <gst-bin>
This @code{<gobject>} class defines the following properties:

@table @code
@item async-handling
The bin will handle Asynchronous state changes

@end table

@end deftp

@defop Signal <gst-bin> element-added  (arg0@tie{}@code{<gst-element>})
Will be emitted after the element was added to the bin.

@end defop

@defop Signal <gst-bin> element-removed  (arg0@tie{}@code{<gst-element>})
Will be emitted after the element was removed from the bin.

@end defop

@deffn Function gst-bin-new  (name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{<gst-element>})
Creates a new bin with the given name.

@table @var
@item name
the name of the new bin

@item ret
a new @code{<gst-bin>}

@end table

@end deffn

@deffn Function gst-bin-add  (self@tie{}@code{<gst-bin>}) (element@tie{}@code{<gst-element>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method add
Adds the given element to the bin. Sets the element's parent, and thus takes
ownership of the element. An element can only be added to one bin.

If the element's pads are linked to other pads, the pads will be unlinked before
the element is added to the bin.

MT safe.

@table @var
@item bin
a @code{<gst-bin>}

@item element
the @code{<gst-element>} to add

@item ret
TRUE if the element could be added, FALSE if the bin does not want to accept the
element.

@end table

@end deffn

@deffn Function gst-bin-remove  (self@tie{}@code{<gst-bin>}) (element@tie{}@code{<gst-element>}) @result{}@tie{} (ret@tie{}@code{bool})
@deffnx Method remove
Removes the element from the bin, unparenting it as well. Unparenting the
element means that the element will be dereferenced, so if the bin holds the
only reference to the element, the element will be freed in the process of
removing it from the bin. If you want the element to still exist after removing,
you need to call @code{gst-object-ref} before removing it from the bin.

If the element's pads are linked to other pads, the pads will be unlinked before
the element is removed from the bin.

MT safe.

@table @var
@item bin
a @code{<gst-bin>}

@item element
the @code{<gst-element>} to remove

@item ret
TRUE if the element could be removed, FALSE if the bin does not want to remove
the element.

@end table

@end deffn

@deffn Function gst-bin-get-by-name  (self@tie{}@code{<gst-bin>}) (name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{<gst-element>})
@deffnx Method get-by-name
Gets the element with the given name from a bin. This function recurses into
child bins.

Returns NULL if no element with the given name is found in the bin.

MT safe. Caller owns returned reference.

@table @var
@item bin
a @code{<gst-bin>}

@item name
the element name to search for

@item ret
the @code{<gst-element>} with the given name, or NULL

@end table

@end deffn

@deffn Function gst-bin-get-by-name-recurse-up  (self@tie{}@code{<gst-bin>}) (name@tie{}@code{mchars}) @result{}@tie{} (ret@tie{}@code{<gst-element>})
@deffnx Method get-by-name-recurse-up
Gets the element with the given name from this bin. If the element is not found,
a recursion is performed on the parent bin.

Returns NULL if: - no element with the given name is found in the bin

MT safe. Caller owns returned reference.

@table @var
@item bin
a @code{<gst-bin>}

@item name
the element name to search for

@item ret
the @code{<gst-element>} with the given name, or NULL

@end table

@end deffn

@deffn Function gst-bin-get-by-interface  (self@tie{}@code{<gst-bin>}) (interface@tie{}@code{<gtype>}) @result{}@tie{} (ret@tie{}@code{<gst-element>})
@deffnx Method get-by-interface
Looks for an element inside the bin that implements the given interface. If such
an element is found, it returns the element. You can cast this element to the
given interface afterwards. If you want all elements that implement the
interface, use @code{gst-bin-iterate-all-by-interface}. This function recurses
into child bins.

MT safe. Caller owns returned reference.

@table @var
@item bin
a @code{<gst-bin>}

@item iface
the @code{<g-type>} of an interface

@item ret
A @code{<gst-element>} inside the bin implementing the interface

@end table

@end deffn

@deffn Function gst-bin-iterate-elements  (self@tie{}@code{<gst-bin>}) @result{}@tie{} (ret@tie{}@code{<gst-iterator*>})
@deffnx Method iterate-elements
Gets an iterator for the elements in this bin.

Each element yielded by the iterator will have its refcount increased, so unref
after use.

MT safe. Caller owns returned value.

@table @var
@item bin
a @code{<gst-bin>}

@item ret
a @code{<gst-iterator>} of @code{<gst-element>}, or NULL

@end table

@end deffn

@deffn Function gst-bin-iterate-recurse  (self@tie{}@code{<gst-bin>}) @result{}@tie{} (ret@tie{}@code{<gst-iterator*>})
@deffnx Method iterate-recurse
Gets an iterator for the elements in this bin. This iterator recurses into
GstBin children.

Each element yielded by the iterator will have its refcount increased, so unref
after use.

MT safe. Caller owns returned value.

@table @var
@item bin
a @code{<gst-bin>}

@item ret
a @code{<gst-iterator>} of @code{<gst-element>}, or NULL

@end table

@end deffn

@deffn Function gst-bin-iterate-sinks  (self@tie{}@code{<gst-bin>}) @result{}@tie{} (ret@tie{}@code{<gst-iterator*>})
@deffnx Method iterate-sinks
Gets an iterator for all elements in the bin that have the
@code{<gst-element-is-sink>} flag set.

Each element yielded by the iterator will have its refcount increased, so unref
after use.

MT safe. Caller owns returned value.

@table @var
@item bin
a @code{<gst-bin>}

@item ret
a @code{<gst-iterator>} of @code{<gst-element>}, or NULL

@end table

@end deffn

@deffn Function gst-bin-iterate-sorted  (self@tie{}@code{<gst-bin>}) @result{}@tie{} (ret@tie{}@code{<gst-iterator*>})
@deffnx Method iterate-sorted
Gets an iterator for the elements in this bin in topologically sorted order.
This means that the elements are returned from the most downstream elements
(sinks) to the sources.

This function is used internally to perform the state changes of the bin
elements.

Each element yielded by the iterator will have its refcount increased, so unref
after use.

MT safe. Caller owns returned value.

@table @var
@item bin
a @code{<gst-bin>}

@item ret
a @code{<gst-iterator>} of @code{<gst-element>}, or NULL

@end table

@end deffn

@deffn Function gst-bin-iterate-sources  (self@tie{}@code{<gst-bin>}) @result{}@tie{} (ret@tie{}@code{<gst-iterator*>})
@deffnx Method iterate-sources
Gets an iterator for all elements in the bin that have no sinkpads and have the
@code{<gst-element-is-sink>} flag unset.

Each element yielded by the iterator will have its refcount increased, so unref
after use.

MT safe. Caller owns returned value.

@table @var
@item bin
a @code{<gst-bin>}

@item ret
a @code{<gst-iterator>} of @code{<gst-element>}, or NULL

@end table

@end deffn

@deffn Function gst-bin-iterate-all-by-interface  (self@tie{}@code{<gst-bin>}) (interface@tie{}@code{<gtype>}) @result{}@tie{} (ret@tie{}@code{<gst-iterator*>})
@deffnx Method iterate-all-by-interface
Looks for all elements inside the bin that implements the given interface. You
can safely cast all returned elements to the given interface. The function
recurses inside child bins. The iterator will yield a series of
@code{<gst-element>} that should be unreffed after use.

Each element yielded by the iterator will have its refcount increased, so unref
after use.

MT safe. Caller owns returned value.

@table @var
@item bin
a @code{<gst-bin>}

@item iface
the @code{<g-type>} of an interface

@item ret
a @code{<gst-iterator>} of @code{<gst-element>} for all elements in the bin
implementing the given interface, or NULL

@end table

@end deffn

@deffn Function gst-bin-find-unconnected-pad  (self@tie{}@code{<gst-bin>}) (direction@tie{}@code{<gst-pad-direction>}) @result{}@tie{} (ret@tie{}@code{<gst-pad>})
@deffnx Method find-unconnected-pad
Recursively looks for elements with an unconnected pad of the given direction
within the specified bin and returns an unconnected pad if one is found, or NULL
otherwise. If a pad is found, the caller owns a reference to it and should use
@code{gst-object-unref} on the pad when it is not needed any longer.

@table @var
@item bin
bin in which to look for elements with unconnected pads

@item direction
whether to look for an unconnected source or sink pad

@item ret
unconnected pad of the given direction, or NULL.

@end table

Since 0.10.3

@end deffn


@c %end of fragment
